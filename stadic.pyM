##STDIC Interface by Ling

from PyQt4 import QtCore, QtGui
import sys, os
import json
import shutil
import time
from extractimg import *


##PyQt initialization

try:
    _fromUtf8 = QtCore.QString.fromUtf8
except AttributeError:
    def _fromUtf8(s):
        return s

try:
    _encoding = QtGui.QApplication.UnicodeUTF8
    def _translate(context, text, disambig):
        return QtGui.QApplication.translate(context, text, disambig, _encoding)
except AttributeError:
    def _translate(context, text, disambig):
        return QtGui.QApplication.translate(context, text, disambig)



##Main Window Gui Layout and Design
class Ui_FormSTADIC(QtGui.QWidget):
    def __init__(self):
        QtGui.QWidget.__init__(self)
        self.setupUi(self)
        self.imported=False
        self.created=False


    def setupUi(self, FormSTADIC):

        ##Base Frame and Tab Widget
        FormSTADIC.resize(1500, 800)
        FormSTADIC.setWindowTitle(_translate("FormSTADIC", "STADIC", None))
        self.FormHLayout = QtGui.QHBoxLayout()
        self.setLayout(self.FormHLayout)
        self.STADICLblColVLayout = QtGui.QVBoxLayout()
        self.FormHLayout.addLayout(self.STADICLblColVLayout)
        self.STADICMark = QtGui.QLabel(FormSTADIC)
        font = QtGui.QFont()
        font.setFamily(_fromUtf8("Impact"))
        font.setPointSize(24)
        self.STADICMark.setFont(font)
        self.STADICMark.setAutoFillBackground(False)
        self.STADICMark.setTextFormat(QtCore.Qt.LogText)
        self.STADICMark.setText(_translate("FormSTADIC", "STADIC", None))
        self.FormHLayout.addWidget(self.STADICMark)
        self.STADICLblColVLayout.addWidget(self.STADICMark)
        spacerItem = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Fixed)
        self.STADICLblColVLayout.addItem(spacerItem)
        self.SaveBtn = QtGui.QPushButton("Save")
        self.STADICLblColVLayout.addWidget(self.SaveBtn)
        self.SaveBtn.clicked.connect(self.SaveAll)
        self.SaveAsBtn = QtGui.QPushButton("Save As")
        self.STADICLblColVLayout.addWidget(self.SaveAsBtn)
        self.SaveAsBtn.clicked.connect(self.SaveAs)
        spacerItem = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Expanding)
        self.STADICLblColVLayout.addItem(spacerItem)
        self.StadicTab = QtGui.QTabWidget(FormSTADIC)
        self.FormHLayout.addWidget(self.StadicTab)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.StadicTab.setFont(font)
        self.StadicTab.setMovable(False)



        ## Tab1: File
        self.TabFile = QtGui.QWidget(self.StadicTab)
        self.StadicTab.addTab(self.TabFile, _fromUtf8("FILE"))
        self.StadicTab.setTabToolTip(self.StadicTab.indexOf(self.TabFile),"Project File Information")
        self.TabFileHLayout = QtGui.QHBoxLayout(self.TabFile)
        self.TabFile1VLayout = QtGui.QVBoxLayout()
        self.TabFileHLayout.addLayout(self.TabFile1VLayout)
        self.TabFile2Grid = QtGui.QGridLayout()
        self.TabFile1VLayout.addLayout(self.TabFile2Grid)
        spacerItem2 = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Minimum)
        self.TabFile2Grid.addItem(spacerItem2, 0, 0, 1, 1)
        spacerItem3 = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Minimum)
        self.TabFile2Grid.addItem(spacerItem3, 1, 0, 1, 1)
        self.TabFileJFLbl = QtGui.QLabel(self.TabFile)
        self.TabFile2Grid.addWidget(self.TabFileJFLbl, 1, 1, 1, 1)
        self.TabFileJFLbl.setText(_translate("FormSTADIC", "JSON File:", None))
        self.TabFileJFLineEd = QtGui.QLineEdit(self.TabFile)
        self.TabFile2Grid.addWidget(self.TabFileJFLineEd, 1, 2, 1, 1)
        self.TabFileJFLineEd.setReadOnly(1)
        self.TabFileJFBtn = QtGui.QPushButton("Browse")
        self.TabFile2Grid.addWidget(self.TabFileJFBtn, 1, 3, 1, 1)
        self.TabFileJFBtn.clicked.connect(self.JFBtn)
        self.TabFileJFCrtBtn = QtGui.QPushButton("Create")
        self.TabFile2Grid.addWidget(self.TabFileJFCrtBtn, 1, 4, 1, 1)
        self.TabFileJFCrtBtn.clicked.connect(self.JFCrtBtn)
        spacerItem4 = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        self.TabFile2Grid.addItem(spacerItem4, 1, 5, 1, 1)
        self.TabFileDUnitsLbl = QtGui.QLabel(self.TabFile)
        self.TabFile2Grid.addWidget(self.TabFileDUnitsLbl, 2, 1, 1, 1)
        self.TabFileDUnitsLbl.setText(_translate("FormSTADIC", "Import Dimensions:", None))
        self.TabFileDUnitComBox = QtGui.QComboBox(self.TabFile)
        Units=["Inches", "Feet", "Meters", "Millimeters"]
        self.TabFileDUnitComBox.addItems(Units)
        IU=lambda: self.DUnitChange(self.TabFileDUnitComBox, "import_units")
        self.TabFileDUnitComBox.currentIndexChanged.connect(IU)
        self.TabFile2Grid.addWidget(self.TabFileDUnitComBox, 2, 2, 1, 1)
        self.TabFileDUnitComBox.setCurrentIndex(-1)
        self.TabFileDDUnitsLbl = QtGui.QLabel(self.TabFile)
        self.TabFile2Grid.addWidget(self.TabFileDDUnitsLbl, 3, 1, 1, 1)
        self.TabFileDDUnitsLbl.setText(_translate("FormSTADIC", "Display Dimensions:", None))
        self.TabFileDDUnitComBox = QtGui.QComboBox(self.TabFile)
        self.TabFileDDUnitComBox.addItems(Units)
        DU=lambda: self.DUnitChange(self.TabFileDDUnitComBox, "display_units")
        self.TabFileDDUnitComBox.currentIndexChanged.connect(DU)
        self.TabFileDDUnitComBox.setCurrentIndex(-1)
        self.TabFile2Grid.addWidget(self.TabFileDDUnitComBox, 3, 2, 1, 1)
        self.TabFileLUnitsLbl = QtGui.QLabel(self.TabFile)
        self.TabFile2Grid.addWidget(self.TabFileLUnitsLbl, 4, 1, 1, 1)
        self.TabFileLUnitsLbl.setText(_translate("FormSTADIC", "Lighting Units:", None))
        self.TabFileLUnitsComBox = QtGui.QComboBox(self.TabFile)
        self.TabFileLUnitsComBox.addItems(["lux", "fc"])
        self.TabFileLUnitsComBox.currentIndexChanged.connect(self.LUnitChange)
        self.TabFile2Grid.addWidget(self.TabFileLUnitsComBox, 4, 2, 1, 1)
        self.TabFileLUnitsComBox.setCurrentIndex(-1)
        self.TabFileDirLbl=QtGui.QLabel(self.TabFile)
        self.TabFile2Grid.addWidget(self.TabFileDirLbl, 5, 1, 1, 1)
        self.TabFileDirLbl.setText("Directory:")
        self.TabFileDirLineEd=QtGui.QLineEdit(self.TabFile)
        self.TabFile2Grid.addWidget(self.TabFileDirLineEd, 5, 2, 1, 1)
        self.TabFileDirLineEd.setReadOnly(1)
        self.TabFileDirBtn=QtGui.QPushButton("Set")
        self.TabFile2Grid.addWidget(self.TabFileDirBtn, 5, 3, 1, 1)
        self.TabFileDirBtn.clicked.connect(self.FileDir)
        spacerItem = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Expanding)
        self.TabFile2Grid.addItem(spacerItem, 6, 2, 1, 1)


        ## Tab2: Site
        self.TabSite = QtGui.QWidget(self.StadicTab)
        self.StadicTab.addTab(self.TabSite, _fromUtf8("SITE"))
        self.StadicTab.setTabToolTip(self.StadicTab.indexOf(self.TabSite),"Weather File Information")
        self.TabSiteHLayout = QtGui.QHBoxLayout(self.TabSite)
        self.TabSite1VLayout = QtGui.QVBoxLayout()
        self.TabSiteHLayout.addItem(self.TabSite1VLayout)
        self.TabSite2Grid = QtGui.QGridLayout()
        self.TabSite1VLayout.addItem(self.TabSite2Grid)
        spacerItem = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Minimum)
        self.TabSite2Grid.addItem(spacerItem, 0, 0, 1, 1)
        spacerItem = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Minimum)
        self.TabSite2Grid.addItem(spacerItem, 1, 0, 1, 1)
        self.TabSiteWeaLbl = QtGui.QLabel(self.TabSite)
        self.TabSite2Grid.addWidget(self.TabSiteWeaLbl, 1, 1, 1, 1)
        self.TabSiteWeaLbl.setText(_translate("FormSTADIC", "Weather File:", None))
        self.TabSiteWeaLbl.setFixedWidth(180)
        self.TabSiteWeaLineEd = QtGui.QLineEdit(self.TabSite)
        self.TabSite2Grid.addWidget(self.TabSiteWeaLineEd, 1, 2, 1, 1)
        self.TabSiteWeaLineEd.setReadOnly(1)
        spacerItem = QtGui.QSpacerItem(5, 20, QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Minimum)
        self.TabSite2Grid.addItem(spacerItem, 1, 3, 1, 1)
        self.TabSiteWeaBtn = QtGui.QPushButton(self.TabSite)
        self.TabSite2Grid.addWidget(self.TabSiteWeaBtn, 1, 4, 1, 1)
        self.TabSiteWeaBtn.setText("Import")
        self.TabSiteWeaBtn.clicked.connect(self.WeaFile)
        spacerItem = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        self.TabSite2Grid.addItem(spacerItem, 1, 5, 1, 1)
        spacerItem = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Minimum)
        self.TabSite2Grid.addItem(spacerItem, 2, 1, 1, 1)
        self.TabSiteDaySLbl=QtGui.QLabel(self.TabSite)
        self.TabSite2Grid.addWidget(self.TabSiteDaySLbl, 3, 1, 1, 1)
        self.TabSiteDaySLbl.setText(_translate("FormSTADIC","Daylight Savings:", None))
        self.TabSiteDaySChk=QtGui.QCheckBox(self.TabSite)
        self.TabSite2Grid.addWidget(self.TabSiteDaySChk, 3, 2, 1, 1)
        self.TabSiteDaySChk.stateChanged.connect(self.DayS)
        spacerItem = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Minimum)
        self.TabSite2Grid.addItem(spacerItem, 4, 1, 1, 1)
        self.TabSiteGrdReflLbl=QtGui.QLabel(self.TabSite)
        self.TabSite2Grid.addWidget(self.TabSiteGrdReflLbl, 5, 1, 1, 1)
        self.TabSiteGrdReflLbl.setText(_translate("FormSTADIC", "Ground Reflectance:", None))
        self.TabSiteGrdReflLineEd=QtGui.QLineEdit(self.TabSite)
        self.TabSite2Grid.addWidget(self.TabSiteGrdReflLineEd, 5, 2, 1, 1)
        self.TabSiteGrdReflLineEd.setFixedWidth(100)
        site=lambda: self.SiteData(self.TabSiteGrdReflLineEd,"ground_reflectance")
        self.TabSiteGrdReflLineEd.editingFinished.connect(site)
        spacerItem = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Minimum)
        self.TabSite2Grid.addItem(spacerItem, 6, 1, 1, 1)
        self.TabSiteBldgRotLbl = QtGui.QLabel(self.TabSite)
        self.TabSite2Grid.addWidget(self.TabSiteBldgRotLbl, 7, 1, 1, 1)
        self.TabSiteBldgRotLbl.setText(_translate("FormSTADIC", "Building Rotation:", None))
        self.TabSiteBldgRotLineEd = QtGui.QLineEdit(self.TabSite)
        self.TabSiteBldgRotLineEd.setFixedWidth(100)
        self.TabSite2Grid.addWidget(self.TabSiteBldgRotLineEd, 7, 2, 1, 1)
        site=lambda: self.SiteData(self.TabSiteBldgRotLineEd,"building_rotation")
        self.TabSiteBldgRotLineEd.editingFinished.connect(site)
        self.TabSiteBldgRotLineEd.setValidator(QtGui.QIntValidator(0,359))
        spacerItem = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Expanding)
        self.TabSite1VLayout.addItem(spacerItem)


        ## Tab3: Space Data
        self.TabSData = QtGui.QWidget(self.StadicTab)
        self.StadicTab.addTab(self.TabSData, _fromUtf8("SPACE"))
        self.StadicTab.setTabToolTip(self.StadicTab.indexOf(self.TabSData),"Editing the space information")
        self.TabSDataHLayout = QtGui.QHBoxLayout(self.TabSData)
        self.TabSData1VLayout = QtGui.QVBoxLayout()
        self.TabSDataHLayout.addLayout(self.TabSData1VLayout)
        self.TabSData2Grid = QtGui.QGridLayout()
        self.TabSData1VLayout.addLayout(self.TabSData2Grid)
        spacerItem= QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Minimum)
        self.TabSData2Grid.addItem(spacerItem, 0, 0, 1, 1)
        spacerItem = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Minimum)
        self.TabSData2Grid.addItem(spacerItem, 1, 0, 1, 1)
        self.TabSDataSPNLbl = QtGui.QLabel(self.TabSData)
        self.TabSData2Grid.addWidget(self.TabSDataSPNLbl, 1, 1, 1, 1)
        self.TabSDataSPNLbl.setFixedWidth(180)
        self.TabSDataSPNLbl.setText(_translate("FormSTADIC", "Space Name:", None))
        self.TabSDataSPComBox = QtGui.QComboBox(self.TabSData)
        self.TabSData2Grid.addWidget(self.TabSDataSPComBox, 1, 2, 1, 1)
        self.TabSDataSPComBox.setFixedWidth(500)
        self.TabSDataSPComBox.currentIndexChanged.connect(self.TabSDataLoad)
        self.TabSDataSPAddBtn= QtGui.QPushButton(self.TabSData)
        self.TabSData2Grid.addWidget(self.TabSDataSPAddBtn, 1, 3, 1, 1)
        self.TabSDataSPAddBtn.setText(_translate("FormSTADIC", "Add", None))
        self.TabSDataSPAddBtn.clicked.connect(self.SPAdd)
        self.TabSDataSPDelBtn= QtGui.QPushButton(self.TabSData)
        self.TabSData2Grid.addWidget(self.TabSDataSPDelBtn, 1, 4, 1, 1)
        self.TabSDataSPDelBtn.setText(_translate("FormSTADIC", "Delete", None))
        self.TabSDataSPDelBtn.clicked.connect(self.SPDel)
        self.TabSDataSPDelBtn.setDisabled(1)
        spacerItem = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        self.TabSData2Grid.addItem(spacerItem, 1, 5, 1, 1)
        spacerItem = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Minimum)
        self.TabSData2Grid.addItem(spacerItem, 2, 0, 1, 1)
        self.TabSData2HLayout = QtGui.QHBoxLayout()
        self.TabSData1VLayout.addLayout(self.TabSData2HLayout)
        spacerItem14 = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Minimum)
        self.TabSData2HLayout.addItem(spacerItem14)
        self.TabSDataFPathLbl = QtGui.QLabel(self.TabSData)
        self.TabSData2HLayout.addWidget(self.TabSDataFPathLbl)
        self.TabSDataFPathLbl.setText(_translate("FormSTADIC", "FOLDER PATHS:", None))
        spacerItem = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        self.TabSData2HLayout.addItem(spacerItem)
        self.TabSData2Grid2 = QtGui.QGridLayout()
        self.TabSData1VLayout.addLayout(self.TabSData2Grid2)
        spacerItem = QtGui.QSpacerItem(100, 20, QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Minimum)
        self.TabSData2Grid2.addItem(spacerItem, 0, 0, 1, 1)
        self.TabSDataGeoBrwLbl = QtGui.QLabel(self.TabSData)
        self.TabSDataGeoBrwLbl.setFixedWidth(120)
        self.TabSData2Grid2.addWidget(self.TabSDataGeoBrwLbl, 0, 1, 1, 1)
        self.TabSDataGeoBrwLbl.setText(_translate("FormSTADIC", "Geometry:", None))
        self.TabSDataGeoBrwLineEd = QtGui.QLineEdit(self.TabSData)
        self.TabSDataGeoBrwLineEd.setFixedWidth(500)
        self.TabSDataGeoBrwLineEd.setReadOnly(1)
        self.TabSData2Grid2.addWidget(self.TabSDataGeoBrwLineEd, 0, 2, 1, 1)
        self.TabSDataGeoBrwBtn=QtGui.QPushButton(self.TabSData)
        self.TabSData2Grid2.addWidget(self.TabSDataGeoBrwBtn, 0, 3, 1, 1)
        self.TabSDataGeoBrwBtn.setText("Set")
        brw=lambda: self.sppath(self.TabSDataGeoBrwLineEd,"geometry_directory")
        self.TabSDataGeoBrwBtn.clicked.connect(brw)
        spacerItem = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        self.TabSData2Grid2.addItem(spacerItem, 0, 4, 1, 1)
        self.TabSDataIESBrwLbl = QtGui.QLabel(self.TabSData)
        self.TabSData2Grid2.addWidget(self.TabSDataIESBrwLbl, 1, 1, 1, 1)
        self.TabSDataIESBrwLbl.setText(_translate("FormSTADIC", "IES Files:", None))
        self.TabSDataIESBrwLineEd = QtGui.QLineEdit(self.TabSData)
        self.TabSDataIESBrwLineEd.setFixedWidth(500)
        self.TabSDataIESBrwLineEd.setReadOnly(1)
        self.TabSData2Grid2.addWidget(self.TabSDataIESBrwLineEd, 1, 2, 1, 1)
        self.TabSDataIESBrwBtn=QtGui.QPushButton(self.TabSData)
        self.TabSData2Grid2.addWidget(self.TabSDataIESBrwBtn, 1 , 3, 1, 1)
        self.TabSDataIESBrwBtn.setText("Set")
        brw=lambda: self.sppath(self.TabSDataIESBrwLineEd,"ies_directory")
        self.TabSDataIESBrwBtn.clicked.connect(brw)
        self.TabSDataInputLbl = QtGui.QLabel(self.TabSData)
        self.TabSData2Grid2.addWidget(self.TabSDataInputLbl, 2, 1, 1, 1)
        self.TabSDataInputLbl.setText(_translate("FormSTADIC", "Input:", None))
        self.TabSDataInputLineEd = QtGui.QLineEdit(self.TabSData)
        self.TabSDataInputLineEd.setFixedWidth(500)
        self.TabSDataInputLineEd.setReadOnly(1)
        self.TabSData2Grid2.addWidget(self.TabSDataInputLineEd, 2, 2, 1, 1)
        self.TabSDataInputBrwBtn=QtGui.QPushButton(self.TabSData)
        self.TabSData2Grid2.addWidget(self.TabSDataInputBrwBtn, 2 , 3, 1, 1)
        self.TabSDataInputBrwBtn.setText("Set")
        brw=lambda: self.sppath(self.TabSDataInputLineEd,"input_directory")
        self.TabSDataInputBrwBtn.clicked.connect(brw)
        self.TabSDataResLbl = QtGui.QLabel(self.TabSData)
        self.TabSDataResLbl.setText(_translate("FormSTADIC", "Results:", None))
        self.TabSData2Grid2.addWidget(self.TabSDataResLbl, 3, 1, 1, 1)
        self.TabSDataResLineEd = QtGui.QLineEdit(self.TabSData)
        self.TabSDataResLineEd.setFixedWidth(500)
        self.TabSDataResLineEd.setReadOnly(1)
        self.TabSData2Grid2.addWidget(self.TabSDataResLineEd, 3, 2, 1, 1)
        self.TabSDataResBrwBtn=QtGui.QPushButton(self.TabSData)
        self.TabSData2Grid2.addWidget(self.TabSDataResBrwBtn, 3, 3, 1, 1)
        self.TabSDataResBrwBtn.setText("Set")
        brw=lambda: self.sppath(self.TabSDataResLineEd, "results_directory")
        self.TabSDataResBrwBtn.clicked.connect(brw)
        self.TabSData2Grid3=QtGui.QGridLayout()
        self.TabSData1VLayout.addLayout(self.TabSData2Grid3)
        spacerItem10 = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Minimum)
        self.TabSData2Grid3.addItem(spacerItem10, 0, 0, 1, 1)
        spacerItem11 = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Minimum)
        self.TabSData2Grid3.addItem(spacerItem11, 1, 0, 1, 1)
        self.TabSDataMatLbl = QtGui.QLabel(self.TabSData)
        self.TabSData2Grid3.addWidget(self.TabSDataMatLbl, 1, 1, 1, 1)
        self.TabSDataMatLbl.setText(_translate("FormSTADIC", "Material RAD File:", None))
        self.TabSDataMatLbl.setFixedWidth(180)
        self.TabSDataMatLineEd = QtGui.QLineEdit(self.TabSData)
        self.TabSDataMatLineEd.setFixedWidth(500)
        self.TabSData2Grid3.addWidget(self.TabSDataMatLineEd, 1, 2, 1, 1)
        self.TabSDataMatLineEd.setReadOnly(1)
        self.TabSDataMatBtn = QtGui.QPushButton(self.TabSData)
        self.TabSData2Grid3.addWidget(self.TabSDataMatBtn, 1, 3, 1, 1)
        self.TabSDataMatBtn.setText(_translate("FormSTADIC", "View/Edit", None))
        viewedit=lambda: self.view_edit(self.TabSDataMatLineEd)
        self.TabSDataMatBtn.clicked.connect(viewedit)
        self.TabSDataMatImportBtn = QtGui.QPushButton(self.TabSData)
        self.TabSData2Grid3.addWidget(self.TabSDataMatImportBtn, 1, 4, 1, 1)
        self.TabSDataMatImportBtn.setText(_translate("FormSTADIC", "Import", None))
        self.TabSDataMatImportBtn.clicked.connect(self.MatImport)
        spacerItem = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        self.TabSData2Grid3.addItem(spacerItem, 1, 5, 1, 1)
        self.TabSDataGeoLbl = QtGui.QLabel(self.TabSData)
        self.TabSData2Grid3.addWidget(self.TabSDataGeoLbl, 2, 1, 1, 1)
        self.TabSDataGeoLbl.setText(_translate("FormSTADIC", "Geometry RAD File:", None))
        self.TabSDataGeoLineEd = QtGui.QLineEdit(self.TabSData)
        self.TabSDataGeoLineEd.setFixedWidth(500)
        self.TabSData2Grid3.addWidget(self.TabSDataGeoLineEd, 2, 2, 1, 1)
        self.TabSDataGeoLineEd.setReadOnly(1)
        self.TabSDataGeoBtn = QtGui.QPushButton(self.TabSData)
        self.TabSData2Grid3.addWidget(self.TabSDataGeoBtn, 2, 3, 1, 1)
        self.TabSDataGeoBtn.setText(_translate("FormSTADIC", "View/Edit", None))
        viewedit=lambda: self.view_edit(self.TabSDataGeoLineEd)
        self.TabSDataGeoBtn.clicked.connect(viewedit)
        self.TabSDataGeoImportBtn = QtGui.QPushButton(self.TabSData)
        self.TabSData2Grid3.addWidget(self.TabSDataGeoImportBtn, 2, 4, 1, 1)
        self.TabSDataGeoImportBtn.setText(_translate("FormSTADIC", "Import", None))
        self.TabSDataGeoImportBtn.clicked.connect(self.GeoImport)
        # self.TabSDataOccLbl = QtGui.QLabel(self.TabFile)
        # self.TabSData2Grid3.addWidget(self.TabSDataOccLbl, 3, 1, 1, 1)
        # self.TabSDataOccLbl.setText(_translate("FormSTADIC", "Occupancy Schedule:", None))
        # self.TabSDataOccLineEd = QtGui.QLineEdit(self.TabFile)
        # self.TabSDataOccLineEd.setFixedWidth(500)
        # self.TabSData2Grid3.addWidget(self.TabSDataOccLineEd, 3, 2, 1, 1)
        # self.TabSDataOccLineEd.setReadOnly(1)
        # self.TabSDataOccBtn = QtGui.QPushButton(self.TabFile)
        # self.TabSData2Grid3.addWidget(self.TabSDataOccBtn, 3, 3, 1, 1)
        # self.TabSDataOccBtn.setText(_translate("FormSTADIC", "Browse", None))
        # self.TabSDataOccBtn.clicked.connect(self.OccImport)
        self.TabSDataLSLbl = QtGui.QLabel(self.TabFile)
        self.TabSData2Grid3.addWidget(self.TabSDataLSLbl, 4, 1, 1, 1)
        self.TabSDataLSLbl.setText(_translate("FormSTADIC", "Lighting Schedule", None))
        self.TabSDataLSLineEd = QtGui.QLineEdit(self.TabFile)
        self.TabSDataLSLineEd.setFixedWidth(500)
        self.TabSData2Grid3.addWidget(self.TabSDataLSLineEd, 4, 2, 1, 1)
        self.TabSDataLSLineEd.setReadOnly(1)
        self.TabSDataLSBtn = QtGui.QPushButton(self.TabFile)
        self.TabSData2Grid3.addWidget(self.TabSDataLSBtn, 4, 3, 1, 1)
        self.TabSDataLSBtn.setText(_translate("FormSTADIC", "Browse", None))
        self.TabSDataLSBtn.clicked.connect(self.LSImport)
        spacerItem20 = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Expanding)
        self.TabSData1VLayout.addItem(spacerItem20)



        ## Tab4: Analysis Grids
        self.TabAna = QtGui.QWidget(self.StadicTab)
        self.StadicTab.addTab(self.TabAna, _fromUtf8("ANALYSIS GRID"))
        self.StadicTab.setTabToolTip(self.StadicTab.indexOf(self.TabAna),"")
        self.TabAnaVLayout = QtGui.QVBoxLayout(self.TabAna)
        spacerItem21 = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Minimum)
        self.TabAnaVLayout.addItem(spacerItem21)
        self.TabAna2HLayout=QtGui.QHBoxLayout()
        self.TabAnaVLayout.addLayout(self.TabAna2HLayout)
        spacerItem = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Minimum)
        self.TabAna2HLayout.addItem(spacerItem)
        self.TabAnaSPNLbl=QtGui.QLabel(self.TabAna)
        self.TabAna2HLayout.addWidget(self.TabAnaSPNLbl)
        self.TabAnaSPNLbl.setText(_translate("FormSTADIC", "Space Name:", None))
        self.TabAnaSPNLbl.setFixedWidth(130)
        self.TabAnaSPNComBox=QtGui.QComboBox(self.TabAna)
        self.TabAna2HLayout.addWidget(self.TabAnaSPNComBox)
        self.TabAnaSPNComBox.setFixedWidth(300)
        spacerItem = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        self.TabAnaSPNComBox.currentIndexChanged.connect(self.TabAnaLoad)
        self.TabAna2HLayout.addItem(spacerItem)
        self.TabAna2HLayout2 = QtGui.QHBoxLayout()
        self.TabAnaVLayout.addLayout(self.TabAna2HLayout2)
        spacerItem = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Minimum)
        self.TabAna2HLayout2.addItem(spacerItem)
        self.TabAnaGPFLbl = QtGui.QLabel(self.TabAna)
        self.TabAna2HLayout2.addWidget(self.TabAnaGPFLbl)
        self.TabAnaGPFLbl.setFixedWidth(130)
        self.TabAnaGPFLbl.setText(_translate("FormSTADIC", "Grid Points File:", None))
        self.TabAnaGPFLineEd=QtGui.QLineEdit(self.TabAna)
        self.TabAna2HLayout2.addWidget(self.TabAnaGPFLineEd)
        self.TabAnaGPFLineEd.setFixedWidth(300)
        self.TabAnaGPFLineEd.setReadOnly(1)
        self.TabAnaGPWBtn = QtGui.QPushButton(self.TabAna)
        self.TabAna2HLayout2.addWidget(self.TabAnaGPWBtn)
        self.TabAnaGPWBtn.setText(_translate("FormSTADIC", "Import", None))
        self.TabAnaGPWBtn.setFixedWidth((100))
        self.TabAnaGPWBtn.clicked.connect(self.AddPts)
        self.TabAnaGPRstBtn = QtGui.QPushButton(self.TabAna)
        self.TabAna2HLayout2.addWidget(self.TabAnaGPRstBtn)
        self.TabAnaGPRstBtn.setText(_translate("FormSTADIC", "Reset", None))
        self.TabAnaGPRstBtn.setFixedWidth((100))
        self.TabAnaGPRstBtn.clicked.connect(self.PtsRst)
        spacerItem = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        self.TabAna2HLayout2.addItem(spacerItem)
        self.TabAnaGrid2 = QtGui.QGridLayout()
        self.TabAnaVLayout.addLayout(self.TabAnaGrid2)
        spacerItem24 = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Minimum)
        self.TabAnaGrid2.addItem(spacerItem24, 0, 0, 1, 1)
        self.TabAnaMatNLbl = QtGui.QLabel(self.TabAna)
        self.TabAnaGrid2.addWidget(self.TabAnaMatNLbl, 0, 1, 1, 1)
        self.TabAnaMatNLbl.setFixedWidth(130)
        self.TabAnaMatNLbl.setText(_translate("FormSTADIC", "Material Name:", None))
        self.TabAnaMatNComBox = QtGui.QComboBox(self.TabAna)
        self.TabAnaGrid2.addWidget(self.TabAnaMatNComBox, 0, 2, 1, 1)
        self.TabAnaMatNComBox.setFixedWidth(300)
        self.TabAnaMatAddBtn=QtGui.QPushButton(self.TabAna)
        self.TabAnaGrid2.addWidget(self.TabAnaMatAddBtn, 0, 3, 1, 1)
        self.TabAnaMatAddBtn.setText(_translate("FormSTADIC","Add", None))
        self.TabAnaMatAddBtn.clicked.connect(self.PtsMatAdd)
        self.TabAnaMatAddBtn.setFixedWidth(100)
        self.TabAnaMatDelBtn=QtGui.QPushButton(self.TabAna)
        self.TabAnaGrid2.addWidget(self.TabAnaMatDelBtn, 0, 4, 1, 1)
        self.TabAnaMatDelBtn.setText(_translate("FormSTADIC","Delete", None))
        self.TabAnaMatDelBtn.clicked.connect(self.PtsMatDel)
        self.TabAnaMatDelBtn.setFixedWidth(100)
        spacerItem25 = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        self.TabAnaGrid2.addItem(spacerItem25, 0, 5, 1, 1)
        self.TabAnaGrid2_2 = QtGui.QGridLayout()
        self.TabAnaVLayout.addLayout(self.TabAnaGrid2_2)
        spacerItem26 = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Minimum)
        self.TabAnaGrid2_2.addItem(spacerItem26, 0, 0, 1, 1)
        self.TabAnaSPLbl = QtGui.QLabel(self.TabAna)
        self.TabAnaGrid2_2.addWidget(self.TabAnaSPLbl, 0, 1, 1, 1)
        self.TabAnaSPLbl.setText(_translate("FormSTADIC", "Spacing:", None))
        self.TabAnaSPLbl.setFixedWidth(134)
        self.TabAnaSPXLbl = QtGui.QLabel(self.TabAna)
        self.TabAnaGrid2_2.addWidget(self.TabAnaSPXLbl, 0, 2, 1, 1)
        self.TabAnaSPXLbl.setFixedWidth(22)
        self.TabAnaSPXLbl.setText(_translate("FormSTADIC", "X", None))
        self.TabAnaSPXLineEd = QtGui.QLineEdit(self.TabAna)
        self.TabAnaGrid2_2.addWidget(self.TabAnaSPXLineEd, 0, 3, 1, 1)
        self.TabAnaSPXLineEd.setValidator(QtGui.QDoubleValidator())
        self.TabAnaSPXLineEd.setFixedWidth(65)
        anadata=lambda: self.Ptsdata(self.TabAnaSPXLineEd,"x_spacing")
        self.TabAnaSPXLineEd.editingFinished.connect(anadata)
        self.TabAnaSPYLbl = QtGui.QLabel(self.TabAna)
        self.TabAnaGrid2_2.addWidget(self.TabAnaSPYLbl, 0, 4, 1, 1)
        self.TabAnaSPYLbl.setFixedWidth(22)
        self.TabAnaSPYLbl.setText(_translate("FormSTADIC", "Y", None))
        self.TabAnaSPYLineEd = QtGui.QLineEdit(self.TabAna)
        self.TabAnaGrid2_2.addWidget(self.TabAnaSPYLineEd, 0, 5, 1, 1)
        self.TabAnaSPYLineEd.setFixedWidth(65)
        self.TabAnaSPYLineEd.setValidator(QtGui.QDoubleValidator())
        anadata=lambda: self.Ptsdata(self.TabAnaSPYLineEd,"y_spacing")
        self.TabAnaSPYLineEd.editingFinished.connect(anadata)
        spacerItem= QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        self.TabAnaGrid2_2.addItem(spacerItem, 0, 8, 1, 1)
        self.TabAnaOffLbl = QtGui.QLabel(self.TabAna)
        self.TabAnaGrid2_2.addWidget(self.TabAnaOffLbl, 1, 1, 1, 1)
        self.TabAnaOffLbl.setFixedWidth(134)
        self.TabAnaOffLbl.setText(_translate("FormSTADIC", "Offset:", None))
        self.TabAnaOffXLbl = QtGui.QLabel(self.TabAna)
        self.TabAnaGrid2_2.addWidget(self.TabAnaOffXLbl, 1, 2, 1, 1)
        self.TabAnaOffXLbl.setFixedWidth(22)
        self.TabAnaOffXLbl.setText(_translate("FormSTADIC", "X", None))
        self.TabAnaOffXLineEd = QtGui.QLineEdit(self.TabAna)
        self.TabAnaGrid2_2.addWidget(self.TabAnaOffXLineEd, 1, 3, 1, 1)
        self.TabAnaOffXLineEd.setFixedWidth(65)
        self.TabAnaOffXLineEd.setValidator(QtGui.QDoubleValidator())
        anadata=lambda: self.Ptsdata(self.TabAnaOffXLineEd,"offset")
        self.TabAnaOffXLineEd.editingFinished.connect(anadata)
        self.TabAnaOffYLbl = QtGui.QLabel(self.TabAna)
        self.TabAnaGrid2_2.addWidget(self.TabAnaOffYLbl, 1, 4, 1, 1)
        self.TabAnaOffYLbl.setFixedWidth(22)
        self.TabAnaOffYLbl.setText(_translate("FormSTADIC", "Y", None))
        self.TabAnaOffYLineEd = QtGui.QLineEdit(self.TabAna)
        anadata=lambda: self.Ptsdata(self.TabAnaOffYLineEd,"offset")
        self.TabAnaOffYLineEd.editingFinished.connect(anadata)
        self.TabAnaGrid2_2.addWidget(self.TabAnaOffYLineEd, 1, 5, 1, 1)
        self.TabAnaOffYLineEd.setFixedWidth(65)
        self.TabAnaOffYLineEd.setValidator(QtGui.QDoubleValidator())
        self.TabAnaOffZLbl = QtGui.QLabel(self.TabAna)
        self.TabAnaGrid2_2.addWidget(self.TabAnaOffZLbl, 1, 6, 1, 1)
        self.TabAnaOffZLbl.setFixedWidth(22)
        self.TabAnaOffZLineEd = QtGui.QLineEdit(self.TabAna)
        self.TabAnaGrid2_2.addWidget(self.TabAnaOffZLineEd, 1, 7, 1, 1)
        self.TabAnaOffZLineEd.setFixedWidth(65)
        self.TabAnaOffZLineEd.setValidator(QtGui.QDoubleValidator())
        anadata=lambda: self.Ptsdata(self.TabAnaOffZLineEd,"z_offset")
        self.TabAnaOffZLineEd.editingFinished.connect(anadata)
        self.TabAnaOffZLbl.setText(_translate("FormSTADIC", "Z", None))
        spacerItem27 = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Expanding)
        self.TabAnaVLayout.addItem(spacerItem27)


        ##Tab5: Window Groups
        self.TabWin = QtGui.QWidget()
        self.StadicTab.addTab(self.TabWin, _fromUtf8("WINDOW GROUPS"))
        self.StadicTab.setTabToolTip(self.StadicTab.indexOf(self.TabWin),"")
        GLayout= QtGui.QGridLayout()
        self.TabWin.setLayout(GLayout)

        #self.TabWinGridLayout = QtGui.QGridLayout(self.TabWin)
        Scroll=QtGui.QScrollArea()
        Scroll.setWidgetResizable(1)
        GLayout.addWidget(Scroll, 0, 0, 1 ,1)
        AreaContents=QtGui.QWidget()
        AreaContents.setGeometry(QtCore.QRect(0,0,1500,800))
        self.TabWin1Grid = QtGui.QGridLayout(AreaContents)
        Scroll.setWidget(AreaContents)

        #self.TabWinGridLayout.addLayout(self.TabWin1Grid, 0, 0, 1, 1)
        spacerItem = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Minimum)
        self.TabWin1Grid.addItem(spacerItem, 0, 0, 1, 1)
        spacerItem = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Minimum)
        self.TabWin1Grid.addItem(spacerItem, 0, 1, 1, 1)
        self.TabWin2Grid = QtGui.QGridLayout()
        self.TabWin1Grid.addLayout(self.TabWin2Grid, 1, 1, 1, 1)
        self.TabWinSPNLbl=QtGui.QLabel(self.TabWin)
        self.TabWin2Grid.addWidget(self.TabWinSPNLbl, 0, 0, 1, 1)
        self.TabWinSPNLbl.setText(_translate("FormSTADIC","Space Name:", None))
        self.TabWinSPNComBox=QtGui.QComboBox(self.TabWin)
        self.TabWin2Grid.addWidget(self.TabWinSPNComBox, 0, 2, 1, 1)
        self.TabWinSPNComBox.currentIndexChanged.connect(self.TabWinGLoad)
        spacerItem = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        self.TabWin2Grid.addItem(spacerItem, 0, 3, 1, 1)
        self.TabWinWGLbl = QtGui.QLabel(self.TabWin)
        self.TabWin2Grid.addWidget(self.TabWinWGLbl, 1, 0, 1, 1)
        self.TabWinWGLbl.setText(_translate("FormSTADIC", "Window Groups:", None))
        self.TabWin2Grid2 = QtGui.QGridLayout()
        self.TabWin1Grid.addLayout(self.TabWin2Grid2, 2, 1, 1, 1)
        self.TabWinGrpNLbl = QtGui.QLabel(self.TabWin)
        self.TabWin2Grid2.addWidget(self.TabWinGrpNLbl, 0, 1, 1, 1)
        self.TabWinGrpNLbl.setText(_translate("FormSTADIC", "Group Name:", None))
        self.TabWinWGComBox = QtGui.QComboBox(self.TabWin)
        self.TabWin2Grid2.addWidget(self.TabWinWGComBox, 0, 2, 1, 1)
        self.TabWinWGComBox.currentIndexChanged.connect(self.TabWinGCombo)
        self.TabWinWGAddBtn = QtGui.QPushButton(self.TabWin)
        self.TabWin2Grid2.addWidget(self.TabWinWGAddBtn, 0, 3, 1, 1)
        self.TabWinWGAddBtn.setText(_translate("FormSTADIC", "Add", None))
        self.TabWinWGAddBtn.clicked.connect(self.WGAdd)
        self.TabWinWGDelBtn = QtGui.QPushButton(self.TabWin)
        self.TabWin2Grid2.addWidget(self.TabWinWGDelBtn, 0, 4, 1, 1)
        self.TabWinWGDelBtn.setText(_translate("FormSTADIC", "Delete", None))
        self.TabWinWGDelBtn.clicked.connect(self.WGDel)
        spacerItem = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        self.TabWin2Grid2.addItem(spacerItem, 0, 5, 1, 1)
        self.TabWinBGeoLbl=QtGui.QLabel(self.TabWin)
        self.TabWin2Grid2.addWidget(self.TabWinBGeoLbl, 1, 1, 1, 1)
        self.TabWinBGeoLbl.setText(_translate("FormSTADIC","Base Geometry:", None))
        self.TabWinBGeoLineEd = QtGui.QLineEdit(self.TabWin)
        self.TabWin2Grid2.addWidget(self.TabWinBGeoLineEd, 1, 2, 1, 1)
        self.TabWinBGeoLineEd.setReadOnly(1)
        self.TabWinBGeoBtn = QtGui.QPushButton(self.TabWin)
        self.TabWin2Grid2.addWidget(self.TabWinBGeoBtn, 1, 3, 1, 1)
        self.TabWinBGeoBtn.setText(_translate("FormSTADIC","Browse", None))
        self.TabWinBGeoBtn.clicked.connect(self.WinG)
        self.TabWinWGMatLbl = QtGui.QLabel(self.TabWin)
        self.TabWin2Grid2.addWidget(self.TabWinWGMatLbl, 2, 1, 1, 1)
        self.TabWinWGMatLbl.setText(_translate("FormSTADIC", "Material:", None))
        self.TabWinWGMatComBox = QtGui.QComboBox(self.TabWin)
        self.TabWin2Grid2.addWidget(self.TabWinWGMatComBox, 2, 2, 1, 1)
        self.TabWinWGMatAddBtn=QtGui.QPushButton(self.TabWin)
        self.TabWin2Grid2.addWidget(self.TabWinWGMatAddBtn, 2, 3, 1, 1)
        self.TabWinWGMatAddBtn.setText(_translate("FormSTADIC","Add", None))
        self.TabWinWGMatAddBtn.clicked.connect(self.WGMatAdd)
        self.TabWinWGMatDelBtn=QtGui.QPushButton(self.TabWin)
        self.TabWin2Grid2.addWidget(self.TabWinWGMatDelBtn, 2, 4, 1, 1)
        self.TabWinWGMatDelBtn.setText(_translate("FormSTADIC","Delete", None))
        self.TabWinWGMatDelBtn.clicked.connect(self.WGMatDel)
        spacerItem = QtGui.QSpacerItem(20, 20, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Minimum)
        self.TabWin2Grid2.addItem(spacerItem, 3, 1, 1, 1)
        self.TabWinSCLbl = QtGui.QLabel(self.TabWin)
        self.TabWin2Grid2.addWidget(self.TabWinSCLbl, 4, 0, 1, 1)
        self.TabWinSCLbl.setText(_translate("FormSTADIC", "Shading Devices:", None))
        self.TabWinSCLbl.setFixedWidth(150)
        self.TabWinShadeFLbl = QtGui.QLabel(self.TabWin)
        self.TabWin2Grid2.addWidget(self.TabWinShadeFLbl, 5, 1, 1, 1)
        self.TabWinShadeFLbl.setText(_translate("FormSTADIC", "Shade File:", None))
        self.TabWinShadeFLbl.setAlignment(QtCore.Qt.AlignTop)
        self.TabWinShadeFLbl.setFixedHeight(100)
        self.TabWinShadeTbl=QtGui.QTableWidget(self.TabWin)
        self.TabWin2Grid2.addWidget(self.TabWinShadeTbl, 5, 2, 1, 1)
        self.TabWinShadeTbl.setFixedHeight(200)
        self.TabWinShadeTbl.setColumnCount(3)
        item = QtGui.QTableWidgetItem()
        self.TabWinShadeTbl.setHorizontalHeaderItem(0,item)
        item = self.TabWinShadeTbl.horizontalHeaderItem(0)
        item.setText(_translate("FormSTADIC", "File Name", None))
        item = QtGui.QTableWidgetItem()
        self.TabWinShadeTbl.setHorizontalHeaderItem(1,item)
        item = self.TabWinShadeTbl.horizontalHeaderItem(1)
        item.setText(_translate("FormSTADIC", "sDA Shade", None))
        item = QtGui.QTableWidgetItem()
        self.TabWinShadeTbl.setHorizontalHeaderItem(2,item)
        item = self.TabWinShadeTbl.horizontalHeaderItem(2)
        item.setText(_translate("FormSTADIC", "Delete", None))
        self.TabWinShadeTbl.setColumnWidth(0,200)
        self.TabWinShadeTbl.setColumnWidth(1,100)
        self.TabWinShadeTbl.setColumnWidth(2,100)
        self.TabWinShadeAddBtn = QtGui.QPushButton(self.TabWin)
        self.TabWin2Grid2.addWidget(self.TabWinShadeAddBtn, 5, 3, 1, 1)
        self.TabWinShadeAddBtn.setText(_translate("FormSTADIC", "Add", None))
        self.TabWinShadeAddBtn.clicked.connect(self.WShadeAdd)
        self.TabWinSCMtdLbl = QtGui.QLabel(self.TabWin)
        self.TabWin2Grid2.addWidget(self.TabWinSCMtdLbl, 6, 1, 1, 1)
        self.TabWinSCMtdLbl.setText(_translate("FormSTADIC", "Control:", None))
        self.TabWinMtdComBox = QtGui.QComboBox(self.TabWin)
        self.TabWinMtdComBox.addItem(_fromUtf8("Signal"))
        self.TabWinMtdComBox.addItem(_fromUtf8("Profile Angle"))
        self.TabWinMtdComBox.addItem(_fromUtf8("Signal and Profile Angle"))
        self.TabWinMtdComBox.addItem(_fromUtf8("None"))
        self.TabWinMtdComBox.currentIndexChanged.connect(self.ShadeCtrlMtd)
        self.TabWin2Grid2.addWidget(self.TabWinMtdComBox, 6, 2, 1, 1)
        self.TabWinMtdComBox.setCurrentIndex(3)
        self.TabWinBSDFLbl=QtGui.QLabel(self.TabWin)
        self.TabWin2Grid2.addWidget(self.TabWinBSDFLbl, 7, 1, 1, 1)
        self.TabWinBSDFLbl.setText(_translate("FormSTADIC","BSDF", None))
        self.TabWinBSDFChkB = QtGui.QCheckBox(self.TabWin)
        self.TabWinBSDFChkB.setText(_fromUtf8(""))
        self.TabWin2Grid2.addWidget(self.TabWinBSDFChkB, 7, 2, 1, 1)
        cboxsta=lambda: self.CheckState(self.TabWinBSDFChkB,"BSDF")
        self.TabWinBSDFChkB.stateChanged.connect(cboxsta)
        self.TabWinBSDFBMatLbl = QtGui.QLabel(self.TabWin)
        self.TabWin2Grid2.addWidget(self.TabWinBSDFBMatLbl, 8, 1, 1, 1)
        self.TabWinBSDFBMatLbl.setText(_translate("FormSTADIC", "Base Material:", None))
        self.TabWinBSDFBMatComBox = QtGui.QComboBox(self.TabWin)
        self.TabWin2Grid2.addWidget(self.TabWinBSDFBMatComBox, 8, 2, 1, 1)
        self.TabWinBSDFSMatLbl = QtGui.QLabel(self.TabWin)
        self.TabWin2Grid2.addWidget(self.TabWinBSDFSMatLbl, 9, 1, 1, 1)
        self.TabWinBSDFSMatLbl.setText(_translate("FormSTADIC", "Setting Material:", None))
        self.TabWinBSDFSetList = QtGui.QListWidget(self.TabWin)
        self.TabWin2Grid2.addWidget(self.TabWinBSDFSetList, 9, 2, 1, 1)
        self.TabWinBSDFSetList.setFixedHeight(60)
        self.TabWinBSDFSetAddBtn = QtGui.QPushButton(self.TabWin)
        self.TabWin2Grid2.addWidget(self.TabWinBSDFSetAddBtn, 9, 3, 1, 1)
        self.TabWinBSDFSetAddBtn.setText(_translate("FormSTADIC", "Add", None))
        #self.TabWinBSDFSetAddBtn.clicked.connect()
        self.TabWinBSDFSetDelBtn = QtGui.QPushButton(self.TabWin)
        self.TabWin2Grid2.addWidget(self.TabWinBSDFSetDelBtn, 9, 4, 1, 1)
        self.TabWinBSDFSetDelBtn.setText(_translate("FormSTADIC", "Delete", None))
        #self.TabWinBSDFSetDelBtn.clicked.connect()
        self.TabWinBSDFLbl.hide()
        self.TabWinBSDFChkB.hide()
        self.TabWinBSDFBMatLbl.hide()
        self.TabWinBSDFBMatComBox.hide()
        self.TabWinBSDFSetList.hide()
        self.TabWinBSDFSMatLbl.hide()
        self.TabWinBSDFSetAddBtn.hide()
        self.TabWinBSDFSetDelBtn.hide()
        spacerItem = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Expanding)
        self.TabWin1Grid.addItem(spacerItem, 7, 0, 1, 1)
        #self.TabWinGridLayout.addItem(spacerItem, 3, 0, 1, 1)


        ##Tab6: Electric Lighting
        self.TabElec = QtGui.QWidget()
        self.StadicTab.addTab(self.TabElec, _fromUtf8("ELECTRIC LIGHTING"))
        self.StadicTab.setTabToolTip(self.StadicTab.indexOf(self.TabElec),"")
        self.TabElecHLayout = QtGui.QHBoxLayout(self.TabElec)
        self.TabElec1Grid = QtGui.QGridLayout()
        self.TabElecHLayout.addLayout(self.TabElec1Grid)
        ##
        spacerItem = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Minimum)
        self.TabElec1Grid.addItem(spacerItem, 0, 0, 1, 1)
        spacerItem = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Minimum)
        self.TabElec1Grid.addItem(spacerItem, 1, 0, 1, 1)
        self.TabElec2HLayout=QtGui.QHBoxLayout()
        self.TabElec1Grid.addLayout(self.TabElec2HLayout, 1, 1, 1, 1)
        self.TabElecSPNLbl=QtGui.QLabel(self.TabElec)
        self.TabElec2HLayout.addWidget(self.TabElecSPNLbl)
        self.TabElecSPNLbl.setText(_translate("FormSTADIC", "Space Name:", None))
        self.TabElecSPNLbl.setFixedWidth(120)
        self.TabElecSPComBox=QtGui.QComboBox(self.TabElec)
        self.TabElec2HLayout.addWidget(self.TabElecSPComBox)
        self.TabElecSPComBox.setFixedWidth(180)
        self.TabElecSPComBox.currentIndexChanged.connect(self.TabElecLoad)
        self.TabElecLayerLbl=QtGui.QLabel(self.TabElec)
        self.TabElec2HLayout.addWidget(self.TabElecLayerLbl)
        self.TabElecLayerLbl.setFixedWidth(120)
        self.TabElecLayerLbl.setText("Floor Layer:")
        self.TabElecLayerCbx=QtGui.QComboBox(self.TabElec)
        self.TabElec2HLayout.addWidget(self.TabElecLayerCbx)
        self.TabElecLayerCbx.setFixedWidth(180)
        self.TabElecLayerCbx.currentIndexChanged.connect(self.LumDpLayer)
        self.TabElecLayoutDipBtn = QtGui.QPushButton(self.TabElec)
        self.TabElec2HLayout.addWidget(self.TabElecLayoutDipBtn)
        self.TabElecLayoutDipBtn.setText(_translate("FormSTADIC", "View Layout", None))
        self.TabElecLayoutDipBtn.setFixedWidth(150)
        self.TabElecLayoutDipBtn.clicked.connect(self.LumLayoutDisplay)
        spacerItem = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        self.TabElec2HLayout.addItem(spacerItem)
        self.TabElecInfoLbl = QtGui.QLabel(self.TabElec)
        self.TabElec1Grid.addWidget(self.TabElecInfoLbl, 2, 1, 1, 1)
        self.TabElecInfoLbl.setText(_translate("FormSTADIC", "Luminaire and Ballast Info:", None))
        self.TabElecInfoTable=QtGui.QTableWidget(self.TabElec)
        self.TabElecInfoTable.setFixedHeight(150)
        self.TabElec1Grid.addWidget(self.TabElecInfoTable, 3, 1, 1, 1)
        self.TabElecInfoTable.setColumnCount(10)
        item = QtGui.QTableWidgetItem()
        self.TabElecInfoTable.setHorizontalHeaderItem(0,item)
        item = self.TabElecInfoTable.horizontalHeaderItem(0)
        item.setText(_translate("FormSTADIC", "Zone", None))
        item = QtGui.QTableWidgetItem()
        self.TabElecInfoTable.setHorizontalHeaderItem(1,item)
        item = self.TabElecInfoTable.horizontalHeaderItem(1)
        item.setText(_translate("FormSTADIC", "IES File", None))
        item = QtGui.QTableWidgetItem()
        self.TabElecInfoTable.setHorizontalHeaderItem(2,item)
        item = self.TabElecInfoTable.horizontalHeaderItem(2)
        item.setText(_translate("FormSTADIC", "Lumens/Lamp", None))
        item = QtGui.QTableWidgetItem()
        self.TabElecInfoTable.setHorizontalHeaderItem(3,item)
        item = self.TabElecInfoTable.horizontalHeaderItem(3)
        item.setText(_translate("FormSTADIC", "LLF", None))
        item = QtGui.QTableWidgetItem()
        self.TabElecInfoTable.setHorizontalHeaderItem(4,item)
        item = self.TabElecInfoTable.horizontalHeaderItem(4)
        item.setText(_translate("FormSTADIC", "BF Min", None))
        item = QtGui.QTableWidgetItem()
        self.TabElecInfoTable.setHorizontalHeaderItem(5,item)
        item = self.TabElecInfoTable.horizontalHeaderItem(5)
        item.setText(_translate("FormSTADIC", "BF Max", None))
        item = QtGui.QTableWidgetItem()
        self.TabElecInfoTable.setHorizontalHeaderItem(6,item)
        item = self.TabElecInfoTable.horizontalHeaderItem(6)
        item.setText(_translate("FormSTADIC", "Power Min", None))
        item = QtGui.QTableWidgetItem()
        self.TabElecInfoTable.setHorizontalHeaderItem(7,item)
        item = self.TabElecInfoTable.horizontalHeaderItem(7)
        item.setText(_translate("FormSTADIC", "Power Max", None))
        item = QtGui.QTableWidgetItem()
        self.TabElecInfoTable.setHorizontalHeaderItem(8,item)
        item = self.TabElecInfoTable.horizontalHeaderItem(8)
        item.setText(_translate("FormSTADIC", "Control Type", None))
        item = QtGui.QTableWidgetItem()
        self.TabElecInfoTable.setHorizontalHeaderItem(9,item)
        item = self.TabElecInfoTable.horizontalHeaderItem(9)
        item.setText(_translate("FormSTADIC", "Delete", None))
        item = QtGui.QTableWidgetItem()
        self.TabElecInfoTable.horizontalHeader().setCascadingSectionResizes(False)
        self.TabElecInfoTable.setColumnWidth(0,100)
        self.TabElecInfoTable.setColumnWidth(1,200)
        self.TabElecInfoTable.setColumnWidth(2,150)
        self.TabElecInfoTable.setColumnWidth(3,100)
        self.TabElecInfoTable.setColumnWidth(4,100)
        self.TabElecInfoTable.setColumnWidth(5,100)
        self.TabElecInfoTable.setColumnWidth(6,100)
        self.TabElecInfoTable.setColumnWidth(7,100)
        self.TabElecInfoTable.setColumnWidth(8,150)
        self.TabElecInfoTable.setColumnWidth(9,100)
        self.TabElecInfoTable.cellChanged.connect(self.InfoChange)
        self.TabElec2HLayout2 = QtGui.QHBoxLayout()
        self.TabElec1Grid.addLayout(self.TabElec2HLayout2, 4, 1, 1, 1)
        self.TabElecZoneCopyBtn=QtGui.QPushButton(self.TabElec)
        self.TabElec2HLayout2.addWidget(self.TabElecZoneCopyBtn)
        self.TabElecZoneCopyBtn.setText(_translate("FormSTADIC", "Duplicate A Zone", None))
        self.TabElecZoneCopyBtn.clicked.connect(self.ElecZoneCopy)
        self.TabElecZoneCopyBtn.setFixedWidth(150)
        self.TabElecInfoAddBtn = QtGui.QPushButton(self.TabElec)
        self.TabElec2HLayout2.addWidget(self.TabElecInfoAddBtn)
        self.TabElecInfoAddBtn.setText(_translate("FormSTADIC", "Add A Zone", None))
        self.TabElecInfoAddBtn.setFixedWidth(150)
        self.TabElecInfoAddBtn.clicked.connect(self.ElecInfoAdd)
        spacerItem = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        self.TabElec2HLayout2.addItem(spacerItem)
        self.TabElec2HLayout3=QtGui.QHBoxLayout()
        self.TabElec1Grid.addLayout(self.TabElec2HLayout3, 5, 1, 1, 1)
        self.TabElecZoneLbl=QtGui.QLabel(self.TabElec)
        self.TabElec2HLayout3.addWidget(self.TabElecZoneLbl)
        self.TabElecZoneLbl.setText("Zone:")
        self.TabElecZoneLbl.setFixedWidth(120)
        self.TabElecZoneCombox=QtGui.QComboBox(self.TabElec)
        self.TabElec2HLayout3.addWidget(self.TabElecZoneCombox)
        self.TabElecZoneCombox.setCurrentIndex(0)
        self.TabElecZoneCombox.setFixedWidth(180)
        self.TabElecZoneCombox.currentIndexChanged.connect(self.ElecLOLoad)
        spacerItem = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        self.TabElec2HLayout3.addItem(spacerItem)
        self.TabElecLayoutLbl = QtGui.QLabel(self.TabElec)
        self.TabElec1Grid.addWidget(self.TabElecLayoutLbl, 6, 1, 1, 1)
        self.TabElecLayoutLbl.setText(_translate("FormSTADIC", "Luminaire Layout", None))
        self.TabElecLayoutTable = QtGui.QTableWidget(self.TabElec)
        self.TabElecLayoutTable.setFixedHeight(150)
        self.TabElec1Grid.addWidget(self.TabElecLayoutTable, 7, 1, 1, 1)
        self.TabElecLayoutTable.setColumnCount(8)
        item = QtGui.QTableWidgetItem()
        self.TabElecLayoutTable.setHorizontalHeaderItem(0, item)
        item = self.TabElecLayoutTable.horizontalHeaderItem(0)
        item.setText(_translate("FormSTADIC", "Zone", None))
        item = QtGui.QTableWidgetItem()
        self.TabElecLayoutTable.setHorizontalHeaderItem(1, item)
        item = self.TabElecLayoutTable.horizontalHeaderItem(1)
        item.setText(_translate("FormSTADIC", "X", None))
        item = QtGui.QTableWidgetItem()
        self.TabElecLayoutTable.setHorizontalHeaderItem(2, item)
        item = self.TabElecLayoutTable.horizontalHeaderItem(2)
        item.setText(_translate("FormSTADIC", "Y", None))
        item = QtGui.QTableWidgetItem()
        self.TabElecLayoutTable.setHorizontalHeaderItem(3, item)
        item = self.TabElecLayoutTable.horizontalHeaderItem(3)
        item.setText(_translate("FormSTADIC", "Z", None))
        item = QtGui.QTableWidgetItem()
        self.TabElecLayoutTable.setHorizontalHeaderItem(4, item)
        item = self.TabElecLayoutTable.horizontalHeaderItem(4)
        item.setText(_translate("FormSTADIC", "ROT", None))
        item = QtGui.QTableWidgetItem()
        self.TabElecLayoutTable.setHorizontalHeaderItem(5, item)
        item = self.TabElecLayoutTable.horizontalHeaderItem(5)
        item.setText(_translate("FormSTADIC", "TILT", None))
        item = QtGui.QTableWidgetItem()
        self.TabElecLayoutTable.setHorizontalHeaderItem(6, item)
        item = self.TabElecLayoutTable.horizontalHeaderItem(6)
        item.setText(_translate("FormSTADIC", "SPIN", None))
        item = QtGui.QTableWidgetItem()
        self.TabElecLayoutTable.setHorizontalHeaderItem(7, item)
        item = self.TabElecLayoutTable.horizontalHeaderItem(7)
        item.setText(_translate("FormSTADIC", "Delete", None))
        self.TabElecLayoutTable.setColumnWidth(0,100)
        self.TabElecLayoutTable.setColumnWidth(1,100)
        self.TabElecLayoutTable.setColumnWidth(2,100)
        self.TabElecLayoutTable.setColumnWidth(3,100)
        self.TabElecLayoutTable.setColumnWidth(4,100)
        self.TabElecLayoutTable.setColumnWidth(5,100)
        self.TabElecLayoutTable.setColumnWidth(6,100)
        self.TabElecLayoutTable.setColumnWidth(7,100)
        self.TabElecLayoutTable.cellChanged.connect(self.LOChange)
        self.TabElec2HLayout4 = QtGui.QHBoxLayout()
        self.TabElec1Grid.addLayout(self.TabElec2HLayout4, 8, 1, 1, 1)
        self.TabElecLayoutAddBtn = QtGui.QPushButton(self.TabElec)
        self.TabElec2HLayout4.addWidget(self.TabElecLayoutAddBtn)
        self.TabElecLayoutAddBtn.setText(_translate("FormSTADIC", "Add A Luminaire", None))
        self.TabElecLayoutAddBtn.setFixedWidth(150)
        self.TabElecLayoutAddBtn.clicked.connect(self.ElecLOAdd)
        spacerItem = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        self.TabElec2HLayout4.addItem(spacerItem)
        self.scene=QtGui.QGraphicsScene()
        self.view = QtGui.QGraphicsView(self.scene)
        self.view.setFixedHeight(250)
        self.TabElec1Grid.addWidget(self.view, 9,1,1,1)
        spacerItem = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Expanding)
        self.TabElec1Grid.addItem(spacerItem, 10, 1, 1, 1)


        ##Tab7: Ctrl Group
        self.TabCtrl = QtGui.QWidget()
        self.StadicTab.addTab(self.TabCtrl, _fromUtf8("CONTROL"))
        self.StadicTab.setTabToolTip(self.StadicTab.indexOf(self.TabCtrl),"Electric Lighting Photocontrol Setup")
        self.TabCtrlHLayout = QtGui.QHBoxLayout(self.TabCtrl)
        self.TabCtrl1Grid = QtGui.QGridLayout()
        self.TabCtrlHLayout.addLayout(self.TabCtrl1Grid)
        spacerItem = QtGui.QSpacerItem(40, 40, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Minimum)
        self.TabCtrl1Grid.addItem(spacerItem, 0, 0, 1, 1)
        spacerItem = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Minimum)
        self.TabCtrl1Grid.addItem(spacerItem, 1, 0, 1, 1)
        self.TabCtrlSPNLbl=QtGui.QLabel(self.TabCtrl)
        self.TabCtrl1Grid.addWidget(self.TabCtrlSPNLbl, 1, 1, 1, 1)
        self.TabCtrlSPNLbl.setText(_translate("FormSTADIC","Space Name:", None))
        self.TabCtrl2HLayout=QtGui.QHBoxLayout()
        self.TabCtrl1Grid.addLayout(self.TabCtrl2HLayout, 1, 2, 1, 1)
        self.TabCtrlSPNComBox=QtGui.QComboBox(self.TabCtrl)
        self.TabCtrl2HLayout.addWidget(self.TabCtrlSPNComBox)
        self.TabCtrlSPNComBox.currentIndexChanged.connect(self.TabCtrlLoad)
        spacerItem = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        self.TabCtrl2HLayout.addItem(spacerItem)
        spacerItem = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Minimum)
        self.TabCtrl1Grid.addItem(spacerItem, 2, 0, 1, 1)
        self.TabCtrlCtrlZLbl = QtGui.QLabel(self.TabCtrl)
        self.TabCtrl1Grid.addWidget(self.TabCtrlCtrlZLbl, 3, 1, 1, 1)
        self.TabCtrlCtrlZLbl.setText(_translate("FormSTADIC", "Control Zone:", None))
        self.TabCtrl2HLayout2=QtGui.QHBoxLayout()
        self.TabCtrl1Grid.addLayout(self.TabCtrl2HLayout2, 3, 2, 1, 1)
        self.TabCtrlCtrlZComBox = QtGui.QComboBox(self.TabCtrl)
        self.TabCtrl2HLayout2.addWidget(self.TabCtrlCtrlZComBox)
        self.TabCtrlCtrlZComBox.currentIndexChanged.connect(self.ElecCtrlZ)
        self.TabCtrlCtrlZComBox.setFixedWidth(200)
        spacerItem = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        self.TabCtrl2HLayout2.addItem(spacerItem)

        self.TabCtrlOptCLbl = QtGui.QLabel(self.TabCtrl)
        self.TabCtrl1Grid.addWidget(self.TabCtrlOptCLbl, 4, 1, 1, 1)
        self.TabCtrlOptCLbl.setText(_translate("FormSTADIC", "Control Algorithm:", None))
        self.TabCtrl2HLayout3=QtGui.QHBoxLayout()
        self.TabCtrl1Grid.addLayout(self.TabCtrl2HLayout3, 4, 2, 1, 1)
        self.TabCtrlOptCComBox = QtGui.QComboBox(self.TabCtrl)
        self.TabCtrl2HLayout3.addWidget(self.TabCtrlOptCComBox)
        self.TabCtrlOptCComBox.addItem("Dimming")
        self.TabCtrlOptCComBox.addItem("On")
        self.TabCtrlOptCComBox.setCurrentIndex(-1)
        self.TabCtrlOptCComBox.setFixedWidth(200)
        self.TabCtrlOptCComBox.currentIndexChanged.connect(self.ElecCtrlAlg)
        spacerItem = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        self.TabCtrl2HLayout3.addItem(spacerItem)
        self.TabCtrlCPLbl = QtGui.QLabel(self.TabCtrl)
        self.TabCtrl1Grid.addWidget(self.TabCtrlCPLbl, 5, 1, 1, 1)
        self.TabCtrlCPLbl.setText(_translate("FormSTADIC", "Critical Points:", None))
        self.TabCtrl2Grid = QtGui.QGridLayout()
        self.TabCtrl1Grid.addLayout(self.TabCtrl2Grid, 6, 2, 1, 1)
        self.TabCtrlTgtIllLbl = QtGui.QLabel(self.TabCtrl)
        self.TabCtrl2Grid.addWidget(self.TabCtrlTgtIllLbl, 0, 0, 1, 1)
        self.TabCtrlTgtIllLbl.setText(_translate("FormSTADIC", "Target Illuminance: ", None))
        self.TabCtrlTgtIllLbl.setFixedWidth(200)
        self.TabCtrlTgtIllLineEd = QtGui.QLineEdit(self.TabCtrl)
        self.TabCtrl2Grid.addWidget(self.TabCtrlTgtIllLineEd, 0, 1, 1, 1)
        self.TabCtrlTgtIllLineEd.editingFinished.connect(self.Tgt)
        self.TabCtrlTgtIllLineEd.setFixedWidth(300)
        self.TabCtrlTgtIllLineEd.setValidator(QtGui.QIntValidator(0, 10000000))
        spacerItem = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        self.TabCtrl2Grid.addItem(spacerItem, 0, 3, 1, 1)
        self.TabCtrlTgtPctgLbl = QtGui.QLabel(self.TabCtrl)
        self.TabCtrl2Grid.addWidget(self.TabCtrlTgtPctgLbl, 1, 0, 1, 1)
        self.TabCtrlTgtPctgLbl.setText(_translate("FormSTADIC", "Min Fraction:", None))
        self.TabCtrlTgtPctgLineEd = QtGui.QLineEdit(self.TabCtrl)
        self.TabCtrl2Grid.addWidget(self.TabCtrlTgtPctgLineEd, 1, 1, 1, 1)
        self.TabCtrlTgtPctgLineEd.editingFinished.connect(self.TgtPctg)
        self.TabCtrlTgtPctgLineEd.setFixedWidth(300)
        self.TabCtrlCPMtdLbl = QtGui.QLabel(self.TabCtrl)
        self.TabCtrl2Grid.addWidget(self.TabCtrlCPMtdLbl, 2, 0, 1, 1)
        self.TabCtrlCPMtdLbl.setText(_translate("FormSTADIC", "Method:", None))
        self.TabCtrlCPMtdComBox = QtGui.QComboBox(self.TabCtrl)
        self.TabCtrl2Grid.addWidget(self.TabCtrlCPMtdComBox, 2, 1, 1, 1)
        self.TabCtrlCPMtdComBox.setFixedWidth(300)
        self.TabCtrlCPMtdComBox.addItem("Auto")
        self.TabCtrlCPMtdComBox.addItem("Manual")
        self.TabCtrlCPMtdComBox.setCurrentIndex(0)
        self.TabCtrlCPMtdComBox.currentIndexChanged.connect(self.CPMtd)
        self.TabCtrlQtyLbl = QtGui.QLabel(self.TabCtrl)
        self.TabCtrl2Grid.addWidget(self.TabCtrlQtyLbl, 3, 0, 1, 1)
        self.TabCtrlQtyLbl.setText(_translate("FormSTADIC", "CP Quantity:", None))
        self.TabCtrlQtyComBox = QtGui.QComboBox(self.TabCtrl)
        self.TabCtrl2Grid.addWidget(self.TabCtrlQtyComBox, 3, 1, 1, 1)
        self.TabCtrlQtyComBox.setFixedWidth(300)
        for i in range(5):
            self.TabCtrlQtyComBox.addItem(str(i+1))
        self.TabCtrlQtyComBox.addItem("All")
        self.TabCtrlQtyComBox.setCurrentIndex(-1)
        self.TabCtrlQtyComBox.currentIndexChanged.connect(self.CPQty)
        self.TabCtrlEPtsLbl = QtGui.QLabel(self.TabCtrl)
        self.TabCtrl2Grid.addWidget(self.TabCtrlEPtsLbl, 4, 0, 1, 1)
        self.TabCtrlEPtsLbl.setText(_translate("FormSTADIC", "Exclude Points File:", None))
        self.TabCtrlEPtsLineEd = QtGui.QLineEdit(self.TabCtrl)
        self.TabCtrl2Grid.addWidget(self.TabCtrlEPtsLineEd, 4, 1, 1, 1)
        self.TabCtrlEPtsLineEd.setFixedWidth(300)
        self.TabCtrlEPtsLineEd.setReadOnly(1)
        self.TabCtrlEPtsBtn = QtGui.QPushButton(self.TabCtrl)
        self.TabCtrl2Grid.addWidget(self.TabCtrlEPtsBtn, 4, 2, 1, 1)
        self.TabCtrlEPtsBtn.setText(_translate("FormSTADIC", "Browse", None))
        self.TabCtrlEPtsBtn.clicked.connect(self.CPExclude)
        spacerItem = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Minimum)
        self.TabCtrl1Grid.addItem(spacerItem, 7, 0, 1, 1)
        spacerItem = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Expanding)
        self.TabCtrl1Grid.addItem(spacerItem, 9, 0, 1, 1)


        ##Tab8: Metrics
        self.TabDMtr = QtGui.QWidget()
        self.StadicTab.addTab(self.TabDMtr, _fromUtf8("METRICS"))
        self.StadicTab.setTabToolTip(self.StadicTab.indexOf(self.TabDMtr),"Daylight Metric Settings")
        self.TabDMtrHLayout = QtGui.QHBoxLayout(self.TabDMtr)
        self.TabDMtr1Grid = QtGui.QGridLayout()
        self.TabDMtrHLayout.addLayout(self.TabDMtr1Grid)
        spacerItem= QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Minimum)
        self.TabDMtr1Grid.addItem(spacerItem, 0, 0, 1, 1)
        spacerItem= QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Minimum)
        self.TabDMtr1Grid.addItem(spacerItem, 0, 1, 1, 1)
        self.TabDMtrGLbl=QtGui.QLabel(self.TabDMtr)
        self.TabDMtr1Grid.addWidget(self.TabDMtrGLbl, 1, 1, 1, 1)
        self.TabDMtrGLbl.setText(_translate("FormSTADIC", "General Setting", None))
        self.TabDMtrGCbx=QtGui.QCheckBox(self.TabDMtr)
        self.TabDMtr1Grid.addWidget(self.TabDMtrGCbx, 1, 3, 1, 1)
        self.TabDMtrGCbx.stateChanged.connect(self.mtrGeneral)
        self.TabDMtrSPNLbl=QtGui.QLabel(self.TabDMtr)
        self.TabDMtr1Grid.addWidget(self.TabDMtrSPNLbl, 2, 1, 1, 1)
        self.TabDMtrSPNLbl.setText(_translate("FormSTADIC", "Space Name:", None))
        self.TabDMtrSPNComBox=QtGui.QComboBox(self.TabDMtr)
        self.TabDMtr1Grid.addWidget(self.TabDMtrSPNComBox, 2, 3, 1, 1)
        self.TabDMtrSPNComBox.currentIndexChanged.connect(self.TabMtrLoad)
        spacerItem= QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Minimum)
        self.TabDMtr1Grid.addItem(spacerItem, 3, 1, 1, 1)

        self.TabDMtrEgyLbl = QtGui.QLabel(self.TabDMtr)
        self.TabDMtr1Grid.addWidget(self.TabDMtrEgyLbl, 4, 1, 1, 1)
        self.TabDMtrEgyLbl.setText(_translate("FormSTADIC", "Energy:", None))
        spacerItem = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Minimum)
        self.TabDMtr1Grid.addItem(spacerItem, 4, 2, 1, 1)
        self.TabDMtrEgyChkB = QtGui.QCheckBox(self.TabDMtr)
        self.TabDMtrEgyChkB.setText(_fromUtf8(""))
        self.TabDMtr1Grid.addWidget(self.TabDMtrEgyChkB, 4, 3, 1, 1)
        cboxsta=lambda: self.CheckState(self.TabDMtrDAChkB,"Energy")
        self.TabDMtrEgyChkB.stateChanged.connect(cboxsta)
        spacerItem = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        self.TabDMtr1Grid.addItem(spacerItem, 4, 7, 1, 1)
        spacerItem = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Minimum)
        self.TabDMtr1Grid.addItem(spacerItem, 6, 2, 1, 1)

        self.TabDMtrDALbl = QtGui.QLabel(self.TabDMtr)
        self.TabDMtr1Grid.addWidget(self.TabDMtrDALbl, 7, 1, 1, 1)
        self.TabDMtrDALbl.setText(_translate("FormSTADIC", "DA", None))
        spacerItem = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Minimum)
        self.TabDMtr1Grid.addItem(spacerItem, 7, 2, 1, 1)
        self.TabDMtrDAChkB = QtGui.QCheckBox(self.TabDMtr)
        self.TabDMtrDAChkB.setText(_fromUtf8(""))
        self.TabDMtr1Grid.addWidget(self.TabDMtrDAChkB, 7, 3, 1, 1)
        cboxsta=lambda: self.CheckState(self.TabDMtrDAChkB,"DA")
        self.TabDMtrDAChkB.stateChanged.connect(cboxsta)
        spacerItem = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        self.TabDMtr1Grid.addItem(spacerItem, 7, 7, 1, 1)
        self.TabDMtrDATgtLbl = QtGui.QLabel(self.TabDMtr)
        self.TabDMtr1Grid.addWidget(self.TabDMtrDATgtLbl, 8, 1, 1, 1)
        self.TabDMtrDATgtLbl.setText(_translate("FormSTADIC", "Target Illuminance:", None))
        self.TabDMtrDATgtLineEd = QtGui.QLineEdit(self.TabDMtr)
        self.TabDMtr1Grid.addWidget(self.TabDMtrDATgtLineEd, 8, 3, 1, 1)
        self.TabDMtrDATgtLineEd.setValidator(QtGui.QIntValidator(0,10000))
        MtrV=lambda: self.MtrValue(self.TabDMtrDATgtLineEd,"DA", "illuminance")
        self.TabDMtrDATgtLineEd.editingFinished.connect(MtrV)
        spacerItem = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Minimum)
        self.TabDMtr1Grid.addItem(spacerItem, 9, 1, 1, 1)
        self.TabDMtrcDALbl = QtGui.QLabel(self.TabDMtr)
        self.TabDMtr1Grid.addWidget(self.TabDMtrcDALbl, 10, 1, 1, 1)
        self.TabDMtrcDALbl.setText(_translate("FormSTADIC", "cDA", None))
        self.TabDMtrcDAChkB = QtGui.QCheckBox(self.TabDMtr)
        self.TabDMtrcDAChkB.setText(_fromUtf8(""))
        self.TabDMtr1Grid.addWidget(self.TabDMtrcDAChkB, 10, 3, 1, 1)
        cboxsta=lambda: self.CheckState(self.TabDMtrcDAChkB,"cDA")
        self.TabDMtrcDAChkB.stateChanged.connect(cboxsta)
        self.TabDMtrcDATgtLbl = QtGui.QLabel(self.TabDMtr)
        self.TabDMtr1Grid.addWidget(self.TabDMtrcDATgtLbl, 11, 1, 1, 1)
        self.TabDMtrcDATgtLbl.setText(_translate("FormSTADIC", "Target Illuminance:", None))
        self.TabDMtrcDATgtLineEd = QtGui.QLineEdit(self.TabDMtr)
        self.TabDMtrcDATgtLineEd.setValidator(QtGui.QIntValidator(0,10000))
        self.TabDMtr1Grid.addWidget(self.TabDMtrcDATgtLineEd, 11, 3, 1, 1)
        MtrV=lambda: self.MtrValue(self.TabDMtrcDATgtLineEd,"cDA", "illuminance")
        self.TabDMtrcDATgtLineEd.editingFinished.connect(MtrV)
        spacerItem = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Minimum)
        self.TabDMtr1Grid.addItem(spacerItem, 12, 1, 1, 1)
        self.TabDMtrsDALbl = QtGui.QLabel(self.TabDMtr)
        self.TabDMtr1Grid.addWidget(self.TabDMtrsDALbl, 13, 1, 1, 1)
        self.TabDMtrsDALbl.setText(_translate("FormSTADIC", "sDA", None))
        self.TabDMtrsDAChkB = QtGui.QCheckBox(self.TabDMtr)
        self.TabDMtrsDAChkB.setText(_fromUtf8(""))
        self.TabDMtr1Grid.addWidget(self.TabDMtrsDAChkB, 13, 3, 1, 1)
        cboxsta=lambda: self.CheckState(self.TabDMtrsDAChkB,"sDA")
        self.TabDMtrsDAChkB.stateChanged.connect(cboxsta)
        self.TabDMtrsDATgtLbl = QtGui.QLabel(self.TabDMtr)
        self.TabDMtr1Grid.addWidget(self.TabDMtrsDATgtLbl, 14, 1, 1, 1)
        self.TabDMtrsDATgtLbl.setText(_translate("FormSTADIC", "Target Illuminance:", None))
        self.TabDMtrsDATgtLineEd = QtGui.QLineEdit(self.TabDMtr)
        self.TabDMtr1Grid.addWidget(self.TabDMtrsDATgtLineEd, 14, 3, 1, 1)
        self.TabDMtrsDATgtLineEd.setValidator(QtGui.QIntValidator(0,10000))
        MtrV=lambda: self.MtrValue(self.TabDMtrsDATgtLineEd,"sDA", "illuminance")
        self.TabDMtrsDATgtLineEd.editingFinished.connect(MtrV)
        spacerItem = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Minimum)
        self.TabDMtr1Grid.addItem(spacerItem, 14, 4, 1, 1)
        self.TabDMtrsDAFrcLbl = QtGui.QLabel(self.TabDMtr)
        self.TabDMtr1Grid.addWidget(self.TabDMtrsDAFrcLbl, 14, 5, 1, 1)
        self.TabDMtrsDAFrcLbl.setText(_translate("FormSTADIC", "DA Fraction:", None))
        self.TabDMtrsDAFrcLineEd = QtGui.QLineEdit(self.TabDMtr)
        self.TabDMtr1Grid.addWidget(self.TabDMtrsDAFrcLineEd, 14, 6, 1, 1)
        MtrV=lambda: self.MtrValue(self.TabDMtrsDAFrcLineEd,"sDA", "DA_fraction")
        self.TabDMtrsDAFrcLineEd.editingFinished.connect(MtrV)
        self.TabDMtrsDASTmLbl = QtGui.QLabel(self.TabDMtr)
        self.TabDMtr1Grid.addWidget(self.TabDMtrsDASTmLbl, 15, 1, 1, 1)
        self.TabDMtrsDASTmLbl.setText(_translate("FormSTADIC", "Start Time:", None))
        self.TabDMtrsDASTmLineEd = QtGui.QLineEdit(self.TabDMtr)
        self.TabDMtr1Grid.addWidget(self.TabDMtrsDASTmLineEd, 15, 3, 1, 1)
        self.TabDMtrsDASTmLineEd.setValidator(QtGui.QIntValidator(0,24))
        MtrV=lambda: self.MtrValue(self.TabDMtrsDASTmLineEd,"sDA", "start_time")
        self.TabDMtrsDASTmLineEd.editingFinished.connect(MtrV)
        self.TabDMtrsDAETmLbl = QtGui.QLabel(self.TabDMtr)
        self.TabDMtr1Grid.addWidget(self.TabDMtrsDAETmLbl, 15, 5, 1, 1)
        self.TabDMtrsDAETmLbl.setText(_translate("FormSTADIC", "End Time:", None))
        self.TabDMtrsDAETmLineEd = QtGui.QLineEdit(self.TabDMtr)
        self.TabDMtrsDAETmLineEd.setValidator(QtGui.QIntValidator(0,24))
        self.TabDMtr1Grid.addWidget(self.TabDMtrsDAETmLineEd, 15, 6, 1, 1)
        MtrV=lambda: self.MtrValue(self.TabDMtrsDAETmLineEd,"sDA", "end_time")
        self.TabDMtrsDAETmLineEd.editingFinished.connect(MtrV)
        spacerItem = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Minimum)
        self.TabDMtr1Grid.addItem(spacerItem, 16, 1, 1, 1)
        self.TabDMtrOsDALbl = QtGui.QLabel(self.TabDMtr)
        self.TabDMtr1Grid.addWidget(self.TabDMtrOsDALbl, 17, 1, 1, 1)
        self.TabDMtrOsDALbl.setText(_translate("FormSTADIC", "Occupied sDA", None))
        self.TabDMtrOsDAChkB = QtGui.QCheckBox(self.TabDMtr)
        self.TabDMtrOsDAChkB.setText(_fromUtf8(""))
        self.TabDMtr1Grid.addWidget(self.TabDMtrOsDAChkB, 17, 3, 1, 1)
        cboxsta=lambda: self.CheckState(self.TabDMtrOsDAChkB,"occupied_sDA")
        self.TabDMtrOsDAChkB.stateChanged.connect(cboxsta)
        self.TabDMtrOsDATgtLbl = QtGui.QLabel(self.TabDMtr)
        self.TabDMtr1Grid.addWidget(self.TabDMtrOsDATgtLbl, 18, 1, 1, 1)
        self.TabDMtrOsDATgtLbl.setText(_translate("FormSTADIC", "Target Illuminance:", None))
        self.TabDMtrOsDATgtLineEd = QtGui.QLineEdit(self.TabDMtr)
        self.TabDMtr1Grid.addWidget(self.TabDMtrOsDATgtLineEd, 18, 3, 1, 1)
        self.TabDMtrOsDATgtLineEd.setValidator(QtGui.QIntValidator(0,10000))
        MtrV=lambda: self.MtrValue(self.TabDMtrOsDATgtLineEd,"occupied_sDA", "illuminance")
        self.TabDMtrOsDATgtLineEd.editingFinished.connect(MtrV)
        self.TabDMtrOsDAFrcLbl = QtGui.QLabel(self.TabDMtr)
        self.TabDMtr1Grid.addWidget(self.TabDMtrOsDAFrcLbl, 18, 5, 1, 1)
        self.TabDMtrOsDAFrcLbl.setText(_translate("FormSTADIC", "DA Fraction:", None))
        self.TabDMtrOsDAFrcLineEd = QtGui.QLineEdit(self.TabDMtr)
        self.TabDMtr1Grid.addWidget(self.TabDMtrOsDAFrcLineEd, 18, 6, 1, 1)
        MtrV=lambda: self.MtrValue(self.TabDMtrOsDAFrcLineEd,"occupied_sDA", "DA_fraction")
        self.TabDMtrOsDAFrcLineEd.editingFinished.connect(MtrV)
        spacerItem = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Minimum)
        self.TabDMtr1Grid.addItem(spacerItem, 19, 1, 1, 1)
        self.TabDMtrDFLbl = QtGui.QLabel(self.TabDMtr)
        self.TabDMtr1Grid.addWidget(self.TabDMtrDFLbl, 20, 1, 1, 1)
        self.TabDMtrDFLbl.setText(_translate("FormSTADIC", "DF", None))
        self.TabDMtrDFChkB = QtGui.QCheckBox(self.TabDMtr)
        self.TabDMtrDFChkB.setText(_fromUtf8(""))
        self.TabDMtr1Grid.addWidget(self.TabDMtrDFChkB, 20, 3, 1, 1)
        cboxsta=lambda: self.CheckState(self.TabDMtrDFChkB,"DF")
        self.TabDMtrDFChkB.stateChanged.connect(cboxsta)
        spacerItem = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Minimum)
        self.TabDMtr1Grid.addItem(spacerItem, 21, 1, 1, 1)
        self.TabDMtrUDILbl = QtGui.QLabel(self.TabDMtr)
        self.TabDMtr1Grid.addWidget(self.TabDMtrUDILbl, 22, 1, 1, 1)
        self.TabDMtrUDILbl.setText(_translate("FormSTADIC", "UDI", None))
        self.TabDMtrUDIChkB = QtGui.QCheckBox(self.TabDMtr)
        self.TabDMtrUDIChkB.setText(_fromUtf8(""))
        self.TabDMtr1Grid.addWidget(self.TabDMtrUDIChkB, 22, 3, 1, 1)
        cboxsta=lambda: self.CheckState(self.TabDMtrUDIChkB,"UDI")
        self.TabDMtrUDIChkB.stateChanged.connect(cboxsta)
        self.TabDMtrUDIMinLbl = QtGui.QLabel(self.TabDMtr)
        self.TabDMtrUDIMinLbl.setText(_translate("FormSTADIC", "Minimum:", None))
        self.TabDMtr1Grid.addWidget(self.TabDMtrUDIMinLbl, 23, 1, 1, 1)
        self.TabDMtrUDIMinLineEd = QtGui.QLineEdit(self.TabDMtr)
        self.TabDMtrUDIMinLineEd.setValidator(QtGui.QIntValidator(0,10000))
        self.TabDMtr1Grid.addWidget(self.TabDMtrUDIMinLineEd, 23, 3, 1, 1)
        MtrV=lambda: self.MtrValue(self.TabDMtrUDIMinLineEd,"UDI", "minimum")
        self.TabDMtrUDIMinLineEd.editingFinished.connect(MtrV)
        self.TabDMtrUDIMaxLbl = QtGui.QLabel(self.TabDMtr)
        self.TabDMtr1Grid.addWidget(self.TabDMtrUDIMaxLbl, 23, 5, 1, 1)
        self.TabDMtrUDIMaxLbl.setText(_translate("FormSTADIC", "Maximum:", None))
        self.TabDMtrUDIMaxLineEd = QtGui.QLineEdit(self.TabDMtr)
        self.TabDMtrUDIMaxLineEd.setValidator(QtGui.QIntValidator(0,10000))
        self.TabDMtr1Grid.addWidget(self.TabDMtrUDIMaxLineEd, 23, 6, 1, 1)
        MtrV=lambda: self.MtrValue(self.TabDMtrUDIMaxLineEd,"UDI", "maximum")
        self.TabDMtrUDIMaxLineEd.editingFinished.connect(MtrV)
        spacerItem = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Expanding)
        self.TabDMtr1Grid.addItem(spacerItem, 24, 1, 1, 1)


        ##Tab9: Simulation
        self.TabSimu = QtGui.QWidget()
        self.StadicTab.addTab(self.TabSimu, _fromUtf8("SIMULATION"))
        self.StadicTab.setTabToolTip(self.StadicTab.indexOf(self.TabSimu),"Simulation Parameters")
        self.TabSimuHLayout = QtGui.QHBoxLayout(self.TabSimu)
        spacerItem = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Minimum)
        self.TabSimuHLayout.addItem(spacerItem)
        self.TabSimu1VLayout = QtGui.QVBoxLayout()
        self.TabSimuHLayout.addLayout(self.TabSimu1VLayout)
        spacerItem = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Minimum)
        self.TabSimu1VLayout.addItem(spacerItem)
        self.TabSimuRadParaLbl = QtGui.QLabel(self.TabSimu)
        self.TabSimu1VLayout.addWidget(self.TabSimuRadParaLbl)
        self.TabSimuRadParaLbl.setText(_translate("FormSTADIC", "Radiance Parameters:", None))
        spacerItem = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Minimum)
        self.TabSimu1VLayout.addItem(spacerItem)
        self.TabSimu2Grid = QtGui.QGridLayout()
        self.TabSimu1VLayout.addLayout(self.TabSimu2Grid)
        spacerItem = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Minimum)
        self.TabSimu2Grid.addItem(spacerItem,0,0,1,1)
        self.TabSimuSkyDivLbl=QtGui.QLabel(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuSkyDivLbl,0,4,1,1)
        self.TabSimuSkyDivLbl.setText(_translate("FormSTADIC", "Sky Division:", None))
        self.TabSimuSkyDivLbl.setFixedWidth(120)
        self.TabSimuSkyDivLineEd=QtGui.QLineEdit(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuSkyDivLineEd,0,6,1,1)
        self.TabSimuSkyDivLineEd.setFixedWidth(100)
        self.TabSimuSkyDivLineEd.setValidator(QtGui.QIntValidator(0,1000000))
        self.TabSimuSkyDivLineEd.setToolTip("No more than 20 divisions")
        simupara=lambda: self.simuWrite(self.TabSimuSkyDivLineEd,0,"","sky_divisions","int")
        self.TabSimuSkyDivLineEd.editingFinished.connect(simupara)
        spacerItem = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Minimum)
        self.TabSimu2Grid.addItem(spacerItem,0,7,1,1)
        self.TabSimuSunDivLbl=QtGui.QLabel(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuSunDivLbl,0,8,1,1)
        self.TabSimuSunDivLbl.setText(_translate("FormSTADIC", "Sun Division:", None))
        self.TabSimuSunDivLbl.setFixedWidth(120)
        self.TabSimuSunDivLineEd=QtGui.QLineEdit(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuSunDivLineEd,0,10,1,1)
        self.TabSimuSunDivLineEd.setFixedWidth(100)
        self.TabSimuSunDivLineEd.setValidator(QtGui.QIntValidator(0,1000000))
        self.TabSimuSunDivLineEd.setToolTip("No more than 20 divisions")
        simupara=lambda: self.simuWrite(self.TabSimuSunDivLineEd,0,"","sun_divisions","int")
        self.TabSimuSunDivLineEd.editingFinished.connect(simupara)
        spacerItem = QtGui.QSpacerItem(120, 40, QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Minimum)
        self.TabSimu2Grid.addItem(spacerItem, 0, 11, 1, 1)
        spacerItem = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        self.TabSimu2Grid.addItem(spacerItem, 0, 14, 1, 1)
        spacerItem = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Minimum)
        self.TabSimu2Grid.addItem(spacerItem, 1, 0, 1, 1)
        self.TabSimuVLbl=QtGui.QLabel(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuVLbl,2,1,1,1)
        self.TabSimuVLbl.setText(_translate("FormSTADIC", "VMX:", None))
        self.TabSimuVLbl.setFixedWidth(100)
        self.TabSimuVabLbl=QtGui.QLabel(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuVabLbl,2,2,1,1)
        self.TabSimuVabLbl.setText(_translate("FormSTADIC", "ab:", None))
        self.TabSimuVabLineEd=QtGui.QLineEdit(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuVabLineEd,2,3,1,1)
        self.TabSimuVabLineEd.setFixedWidth(100)
        self.TabSimuVabLineEd.setValidator(QtGui.QIntValidator(0,1000000))
        self.TabSimuVabLbl.setToolTip("No more than 20 bounces")
        simupara=lambda: self.simuWrite(self.TabSimuVabLineEd,1,"vmx","ab","int")
        self.TabSimuVabLineEd.editingFinished.connect(simupara)
        self.TabSimuVadLbl=QtGui.QLabel(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuVadLbl,2,5,1,1)
        self.TabSimuVadLbl.setText(_translate("FormSTADIC", "ad:", None))
        self.TabSimuVadLineEd=QtGui.QLineEdit(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuVadLineEd,2,6,1,1)
        self.TabSimuVadLineEd.setFixedWidth(100)
        self.TabSimuVadLineEd.setValidator(QtGui.QIntValidator(0,1000000000))
        self.TabSimuVadLbl.setToolTip("No more than 1000000")
        simupara=lambda: self.simuWrite(self.TabSimuVadLineEd,1,"vmx","ad","int")
        self.TabSimuVadLineEd.editingFinished.connect(simupara)
        self.TabSimuDefLbl=QtGui.QLabel(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDefLbl, 2, 8, 1, 1)
        self.TabSimuDefLbl.setText("Default:")
        self.TabSimuDefabLbl=QtGui.QLabel(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDefabLbl, 2, 9, 1, 1)
        self.TabSimuDefabLbl.setText("ab:")
        self.TabSimuDefabLbl.setToolTip("No more than 20 bounces")
        self.TabSimuDefabLineEd=QtGui.QLineEdit(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDefabLineEd,2,10,1,1)
        self.TabSimuDefabLineEd.setFixedWidth(100)
        self.TabSimuDefabLineEd.setValidator(QtGui.QIntValidator(0,100000))
        simupara=lambda: self.simuWrite(self.TabSimuDefabLineEd,1,"default","ab","int")
        self.TabSimuDefabLineEd.editingFinished.connect(simupara)
        self.TabSimuDefadLbl=QtGui.QLabel(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDefadLbl, 2, 12, 1, 1)
        self.TabSimuDefadLbl.setText("ad:")
        self.TabSimuDefadLineEd=QtGui.QLineEdit(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDefadLineEd,2,13,1,1)
        self.TabSimuDefadLineEd.setFixedWidth(100)
        self.TabSimuDefadLineEd.setValidator(QtGui.QIntValidator(0,100000000))
        simupara=lambda: self.simuWrite(self.TabSimuDefadLineEd,1,"default","ad","int")
        self.TabSimuDefadLineEd.editingFinished.connect(simupara)
        self.TabSimuVasLbl=QtGui.QLabel(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuVasLbl,3,2,1,1)
        self.TabSimuVasLbl.setText(_translate("FormSTADIC", "as:", None))
        self.TabSimuVasLineEd=QtGui.QLineEdit(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuVasLineEd,3,3,1,1)
        self.TabSimuVasLineEd.setFixedWidth(100)
        self.TabSimuVasLineEd.setValidator(QtGui.QIntValidator(0,1000000))
        self.TabSimuVasLbl.setToolTip("No more than 1000000")
        simupara=lambda: self.simuWrite(self.TabSimuVasLineEd,1,"vmx","as","int")
        self.TabSimuVasLineEd.editingFinished.connect(simupara)
        self.TabSimuVarLbl=QtGui.QLabel(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuVarLbl,3,5,1,1)
        self.TabSimuVarLbl.setText(_translate("FormSTADIC", "ar:", None))
        self.TabSimuVarLineEd=QtGui.QLineEdit(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuVarLineEd,3,6,1,1)
        self.TabSimuVarLineEd.setFixedWidth(100)
        self.TabSimuVarLineEd.setValidator(QtGui.QIntValidator(0,1000000))
        self.TabSimuVarLbl.setToolTip("No more than 1000000")
        simupara=lambda: self.simuWrite(self.TabSimuVarLineEd,1,"vmx","ar","int")
        self.TabSimuVarLineEd.editingFinished.connect(simupara)
        self.TabSimuDefasLbl=QtGui.QLabel(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDefasLbl, 3, 9, 1, 1)
        self.TabSimuDefasLbl.setText("as:")
        self.TabSimuDefasLineEd=QtGui.QLineEdit(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDefasLineEd,3,10,1,1)
        self.TabSimuDefasLineEd.setFixedWidth(100)
        self.TabSimuDefasLineEd.setValidator(QtGui.QIntValidator(0,1000000))
        simupara=lambda: self.simuWrite(self.TabSimuDefasLineEd,1,"default","as","int")
        self.TabSimuDefasLineEd.editingFinished.connect(simupara)
        self.TabSimuDefarLbl=QtGui.QLabel(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDefarLbl, 3, 12, 1, 1)
        self.TabSimuDefarLbl.setText("ar:")
        self.TabSimuDefarLineEd=QtGui.QLineEdit(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDefarLineEd,3,13,1,1)
        self.TabSimuDefarLineEd.setFixedWidth(100)
        self.TabSimuDefarLineEd.setValidator(QtGui.QIntValidator(0,1000000))
        simupara=lambda: self.simuWrite(self.TabSimuDefarLineEd,1,"default","ar","int")
        self.TabSimuDefarLineEd.editingFinished.connect(simupara)
        self.TabSimuVaaLbl=QtGui.QLabel(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuVaaLbl,4,2,1,1)
        self.TabSimuVaaLbl.setText(_translate("FormSTADIC", "aa:", None))
        self.TabSimuVaaLineEd=QtGui.QLineEdit(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuVaaLineEd,4,3,1,1)
        self.TabSimuVaaLineEd.setFixedWidth(100)
        self.TabSimuVaaLineEd.setValidator(QtGui.QDoubleValidator(0,1,15))
        self.TabSimuVaaLbl.setToolTip("")
        simupara=lambda: self.simuWrite(self.TabSimuVaaLineEd,1,"vmx","aa","float")
        self.TabSimuVaaLineEd.editingFinished.connect(simupara)
        self.TabSimuVlrLbl=QtGui.QLabel(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuVlrLbl,4,5,1,1)
        self.TabSimuVlrLbl.setText(_translate("FormSTADIC", "lr:", None))
        self.TabSimuVlrLineEd=QtGui.QLineEdit(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuVlrLineEd,4,6,1,1)
        self.TabSimuVlrLineEd.setFixedWidth(100)
        self.TabSimuVlrLineEd.setValidator(QtGui.QIntValidator(0,100000))
        self.TabSimuVlrLbl.setToolTip("")
        simupara=lambda: self.simuWrite(self.TabSimuVlrLineEd,1,"vmx","lr","int")
        self.TabSimuVlrLineEd.editingFinished.connect(simupara)
        self.TabSimuDefaaLbl=QtGui.QLabel(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDefaaLbl, 4, 9, 1, 1)
        self.TabSimuDefaaLbl.setText("aa:")
        self.TabSimuDefaaLineEd=QtGui.QLineEdit(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDefaaLineEd,4,10,1,1)
        self.TabSimuDefaaLineEd.setFixedWidth(100)
        self.TabSimuDefaaLineEd.setValidator(QtGui.QDoubleValidator(0,1,15))
        simupara=lambda: self.simuWrite(self.TabSimuDefaaLineEd,1,"default","aa","float")
        self.TabSimuDefaaLineEd.editingFinished.connect(simupara)
        self.TabSimuDeflrLbl=QtGui.QLabel(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDeflrLbl, 4, 12, 1, 1)
        self.TabSimuDeflrLbl.setText("lr:")
        self.TabSimuDeflrLineEd=QtGui.QLineEdit(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDeflrLineEd,4,13,1,1)
        self.TabSimuDeflrLineEd.setFixedWidth(100)
        self.TabSimuDeflrLineEd.setValidator(QtGui.QIntValidator(0,1000000))
        simupara=lambda: self.simuWrite(self.TabSimuDeflrLineEd,1,"default","lr","int")
        self.TabSimuDeflrLineEd.editingFinished.connect(simupara)
        self.TabSimuVstLbl=QtGui.QLabel(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuVstLbl,5,2,1,1)
        self.TabSimuVstLbl.setText(_translate("FormSTADIC", "st:", None))
        self.TabSimuVstLineEd=QtGui.QLineEdit(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuVstLineEd,5,3,1,1)
        self.TabSimuVstLineEd.setFixedWidth(100)
        self.TabSimuVstLineEd.setValidator(QtGui.QDoubleValidator(0,1,15))
        self.TabSimuVstLbl.setToolTip("")
        simupara=lambda: self.simuWrite(self.TabSimuVstLineEd,1,"vmx","st","float")
        self.TabSimuVstLineEd.editingFinished.connect(simupara)
        self.TabSimuVsjLbl=QtGui.QLabel(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuVsjLbl,5,5,1,1)
        self.TabSimuVsjLbl.setText(_translate("FormSTADIC", "sj:", None))
        self.TabSimuVsjLineEd=QtGui.QLineEdit(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuVsjLineEd,5,6,1,1)
        self.TabSimuVsjLineEd.setFixedWidth(100)
        self.TabSimuVsjLineEd.setValidator(QtGui.QDoubleValidator(0,5,15))
        self.TabSimuVsjLbl.setToolTip("")
        simupara=lambda: self.simuWrite(self.TabSimuVsjLineEd,1,"vmx","sj","float")
        self.TabSimuVsjLineEd.editingFinished.connect(simupara)
        self.TabSimuDefstLbl=QtGui.QLabel(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDefstLbl, 5, 9, 1, 1)
        self.TabSimuDefstLbl.setText("st:")
        self.TabSimuDefstLineEd=QtGui.QLineEdit(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDefstLineEd,5,10,1,1)
        self.TabSimuDefstLineEd.setFixedWidth(100)
        self.TabSimuDefstLineEd.setValidator(QtGui.QDoubleValidator(0,1,15))
        simupara=lambda: self.simuWrite(self.TabSimuDefstLineEd,1,"default","st","float")
        self.TabSimuDefstLineEd.editingFinished.connect(simupara)
        self.TabSimuDefsjLbl=QtGui.QLabel(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDefsjLbl, 5, 12, 1, 1)
        self.TabSimuDefsjLbl.setText("sj:")
        self.TabSimuDefsjLineEd=QtGui.QLineEdit(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDefsjLineEd,5,13,1,1)
        self.TabSimuDefsjLineEd.setFixedWidth(100)
        self.TabSimuDefsjLineEd.setValidator(QtGui.QDoubleValidator(0,5,15))
        simupara=lambda: self.simuWrite(self.TabSimuDefsjLineEd,1,"default","sj","float")
        self.TabSimuDefsjLineEd.editingFinished.connect(simupara)
        self.TabSimuVlwLbl=QtGui.QLabel(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuVlwLbl,6,2,1,1)
        self.TabSimuVlwLbl.setText(_translate("FormSTADIC", "lw:", None))
        self.TabSimuVlwLineEd=QtGui.QLineEdit(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuVlwLineEd,6,3,1,1)
        self.TabSimuVlwLineEd.setFixedWidth(100)
        self.TabSimuVlwLineEd.setValidator(QtGui.QDoubleValidator(0,1,15))
        self.TabSimuVlwLbl.setToolTip("")
        simupara=lambda: self.simuWrite(self.TabSimuVlwLineEd,1,"vmx","lw","float")
        self.TabSimuVlwLineEd.editingFinished.connect(simupara)
        self.TabSimuVdjLbl=QtGui.QLabel(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuVdjLbl,6,5,1,1)
        self.TabSimuVdjLbl.setText(_translate("FormSTADIC", "dj:", None))
        self.TabSimuVdjLineEd=QtGui.QLineEdit(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuVdjLineEd,6,6,1,1)
        self.TabSimuVdjLineEd.setFixedWidth(100)
        self.TabSimuVdjLineEd.setValidator(QtGui.QDoubleValidator(0,5,15))
        self.TabSimuVdjLbl.setToolTip("")
        simupara=lambda: self.simuWrite(self.TabSimuVdjLineEd,1,"vmx","dj","float")
        self.TabSimuVdjLineEd.editingFinished.connect(simupara)
        self.TabSimuDeflwLbl=QtGui.QLabel(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDeflwLbl, 6, 9, 1, 1)
        self.TabSimuDeflwLbl.setText("lw:")
        self.TabSimuDeflwLineEd=QtGui.QLineEdit(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDeflwLineEd, 6,10,1,1)
        self.TabSimuDeflwLineEd.setFixedWidth(100)
        self.TabSimuDeflwLineEd.setValidator(QtGui.QDoubleValidator(0,1,15))
        simupara=lambda: self.simuWrite(self.TabSimuDeflwLineEd,1,"default","lw","float")
        self.TabSimuDeflwLineEd.editingFinished.connect(simupara)
        self.TabSimuDefdjLbl=QtGui.QLabel(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDefdjLbl, 6, 12, 1, 1)
        self.TabSimuDefdjLbl.setText("dj:")
        self.TabSimuDefdjLineEd=QtGui.QLineEdit(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDefdjLineEd,6,13,1,1)
        self.TabSimuDefdjLineEd.setFixedWidth(100)
        self.TabSimuDefdjLineEd.setValidator(QtGui.QDoubleValidator(0,5,15))
        simupara=lambda: self.simuWrite(self.TabSimuDefdjLineEd,1,"default","dj","float")
        self.TabSimuDefdjLineEd.editingFinished.connect(simupara)
        self.TabSimuVdsLbl=QtGui.QLabel(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuVdsLbl,7,2,1,1)
        self.TabSimuVdsLbl.setText(_translate("FormSTADIC", "ds:", None))
        self.TabSimuVdsLineEd=QtGui.QLineEdit(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuVdsLineEd,7,3,1,1)
        self.TabSimuVdsLineEd.setFixedWidth(100)
        self.TabSimuVdsLineEd.setValidator(QtGui.QDoubleValidator(0,1,15))
        self.TabSimuVdsLbl.setToolTip("")
        simupara=lambda: self.simuWrite(self.TabSimuVdsLineEd,1,"vmx","ds","float")
        self.TabSimuVdsLineEd.editingFinished.connect(simupara)
        self.TabSimuVdrLbl=QtGui.QLabel(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuVdrLbl,7,5,1,1)
        self.TabSimuVdrLbl.setText(_translate("FormSTADIC", "dr:", None))
        self.TabSimuVdrLineEd=QtGui.QLineEdit(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuVdrLineEd,7,6,1,1)
        self.TabSimuVdrLineEd.setFixedWidth(100)
        self.TabSimuVdrLineEd.setValidator(QtGui.QIntValidator(0,1000000))
        self.TabSimuVdrLbl.setToolTip("")
        simupara=lambda: self.simuWrite(self.TabSimuVdrLineEd,1,"vmx","dr","int")
        self.TabSimuVdrLineEd.editingFinished.connect(simupara)
        self.TabSimuDefdsLbl=QtGui.QLabel(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDefdsLbl, 7, 9, 1, 1)
        self.TabSimuDefdsLbl.setText("ds:")
        self.TabSimuDefdsLineEd=QtGui.QLineEdit(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDefdsLineEd,7,10,1,1)
        self.TabSimuDefdsLineEd.setFixedWidth(100)
        self.TabSimuDefdsLineEd.setValidator(QtGui.QDoubleValidator(0,1,15))
        simupara=lambda: self.simuWrite(self.TabSimuDefdsLineEd,1,"default","ds","float")
        self.TabSimuDefdsLineEd.editingFinished.connect(simupara)
        self.TabSimuDefdrLbl=QtGui.QLabel(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDefdrLbl, 7, 12, 1, 1)
        self.TabSimuDefdrLbl.setText("dr:")
        self.TabSimuDefdrLineEd=QtGui.QLineEdit(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDefdrLineEd,7,13,1,1)
        self.TabSimuDefdrLineEd.setFixedWidth(100)
        self.TabSimuDefdrLineEd.setValidator(QtGui.QIntValidator(0,100000))
        simupara=lambda: self.simuWrite(self.TabSimuDefdrLineEd,1,"default","dr","int")
        self.TabSimuDefdrLineEd.editingFinished.connect(simupara)
        self.TabSimuVdpLbl=QtGui.QLabel(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuVdpLbl,8,2,1,1)
        self.TabSimuVdpLbl.setText(_translate("FormSTADIC", "dp:", None))
        self.TabSimuVdpLineEd=QtGui.QLineEdit(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuVdpLineEd,8,3,1,1)
        self.TabSimuVdpLineEd.setFixedWidth(100)
        self.TabSimuVdpLineEd.setValidator(QtGui.QDoubleValidator(0,5,15))
        self.TabSimuVdpLbl.setToolTip("")
        simupara=lambda: self.simuWrite(self.TabSimuVdpLineEd,1,"vmx","dp","float")
        self.TabSimuVdpLineEd.editingFinished.connect(simupara)
        self.TabSimuVdcLbl=QtGui.QLabel(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuVdcLbl,8,5,1,1)
        self.TabSimuVdcLbl.setText(_translate("FormSTADIC", "dc:", None))
        self.TabSimuVdcLineEd=QtGui.QLineEdit(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuVdcLineEd,8,6,1,1)
        self.TabSimuVdcLineEd.setFixedWidth(100)
        self.TabSimuVdcLineEd.setValidator(QtGui.QDoubleValidator(0,5,15))
        self.TabSimuVdcLbl.setToolTip("")
        simupara=lambda: self.simuWrite(self.TabSimuVdcLineEd,1,"vmx","dc","float")
        self.TabSimuVdcLineEd.editingFinished.connect(simupara)
        self.TabSimuDefdpLbl=QtGui.QLabel(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDefdpLbl, 8, 9, 1, 1)
        self.TabSimuDefdpLbl.setText("dp:")
        self.TabSimuDefdpLineEd=QtGui.QLineEdit(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDefdpLineEd,8,10,1,1)
        self.TabSimuDefdpLineEd.setFixedWidth(100)
        self.TabSimuDefdpLineEd.setValidator(QtGui.QDoubleValidator(0,5,15))
        simupara=lambda: self.simuWrite(self.TabSimuDefdpLineEd,1,"default","dp","float")
        self.TabSimuDefdpLineEd.editingFinished.connect(simupara)
        self.TabSimuDefdcLbl=QtGui.QLabel(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDefdcLbl, 8, 12, 1, 1)
        self.TabSimuDefdcLbl.setText("dc:")
        self.TabSimuDefdcLineEd=QtGui.QLineEdit(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDefdcLineEd,8,13,1,1)
        self.TabSimuDefdcLineEd.setFixedWidth(100)
        self.TabSimuDefdcLineEd.setValidator(QtGui.QDoubleValidator(0,5,15))
        simupara=lambda: self.simuWrite(self.TabSimuDefdcLineEd,1,"default","dc","float")
        self.TabSimuDefdcLineEd.editingFinished.connect(simupara)
        self.TabSimuVdtLbl=QtGui.QLabel(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuVdtLbl,9,2,1,1)
        self.TabSimuVdtLbl.setText(_translate("FormSTADIC", "dt:", None))
        self.TabSimuVdtLineEd=QtGui.QLineEdit(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuVdtLineEd,9,3,1,1)
        self.TabSimuVdtLineEd.setFixedWidth(100)
        self.TabSimuVdtLineEd.setValidator(QtGui.QDoubleValidator(0,1,15))
        self.TabSimuVdtLbl.setToolTip("")
        simupara=lambda: self.simuWrite(self.TabSimuVdtLineEd,1,"vmx","dt","float")
        self.TabSimuVdtLineEd.editingFinished.connect(simupara)
        self.TabSimuDefdtLbl=QtGui.QLabel(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDefdtLbl, 9, 9, 1, 1)
        self.TabSimuDefdtLbl.setText("dt:")
        self.TabSimuDefdtLineEd=QtGui.QLineEdit(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDefdtLineEd,9,10,1,1)
        self.TabSimuDefdtLineEd.setFixedWidth(100)
        self.TabSimuDefdtLineEd.setValidator(QtGui.QDoubleValidator(0,1,15))
        simupara=lambda: self.simuWrite(self.TabSimuDefdtLineEd,1,"default","dt","float")
        self.TabSimuDefdtLineEd.editingFinished.connect(simupara)
        spacerItem = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Minimum)
        self.TabSimu2Grid.addItem(spacerItem, 10, 0, 1, 1)
        self.TabSimuDLbl=QtGui.QLabel(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDLbl,11,1,1,1)
        self.TabSimuDLbl.setText(_translate("FormSTADIC", "DMX:", None))
        self.TabSimuDabLbl=QtGui.QLabel(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDabLbl,11,2,1,1)
        self.TabSimuDabLbl.setText(_translate("FormSTADIC", "ab:", None))
        self.TabSimuDabLineEd=QtGui.QLineEdit(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDabLineEd,11,3,1,1)
        self.TabSimuDabLineEd.setFixedWidth(100)
        self.TabSimuDabLineEd.setValidator(QtGui.QIntValidator(0,1000000))
        self.TabSimuDabLbl.setToolTip("")
        simupara=lambda: self.simuWrite(self.TabSimuDabLineEd,1,"dmx","ab","int")
        self.TabSimuDabLineEd.editingFinished.connect(simupara)
        self.TabSimuDadLbl=QtGui.QLabel(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDadLbl,11,5,1,1)
        self.TabSimuDadLbl.setText(_translate("FormSTADIC", "ad:", None))
        self.TabSimuDadLineEd=QtGui.QLineEdit(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDadLineEd,11,6,1,1)
        self.TabSimuDadLineEd.setFixedWidth(100)
        self.TabSimuDadLineEd.setValidator(QtGui.QIntValidator(0,1000000000))
        self.TabSimuDadLbl.setToolTip("")
        simupara=lambda: self.simuWrite(self.TabSimuDadLineEd,1,"dmx","ad","int")
        self.TabSimuDadLineEd.editingFinished.connect(simupara)
        self.TabSimuDasLbl=QtGui.QLabel(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDasLbl,12,2,1,1)
        self.TabSimuDasLbl.setText(_translate("FormSTADIC", "as:", None))
        self.TabSimuDasLineEd=QtGui.QLineEdit(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDasLineEd,12,3,1,1)
        self.TabSimuDasLineEd.setFixedWidth(100)
        self.TabSimuDasLineEd.setValidator(QtGui.QIntValidator(0,1000000))
        self.TabSimuDasLbl.setToolTip("")
        simupara=lambda: self.simuWrite(self.TabSimuDasLineEd,1,"dmx","as","int")
        self.TabSimuDasLineEd.editingFinished.connect(simupara)
        self.TabSimuDarLbl=QtGui.QLabel(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDarLbl,12,5,1,1)
        self.TabSimuDarLbl.setText(_translate("FormSTADIC", "ar:", None))
        self.TabSimuDarLineEd=QtGui.QLineEdit(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDarLineEd,12,6,1,1)
        self.TabSimuDarLineEd.setFixedWidth(100)
        self.TabSimuDarLineEd.setValidator(QtGui.QIntValidator(0,1000000))
        self.TabSimuDarLbl.setToolTip("")
        simupara=lambda: self.simuWrite(self.TabSimuDarLineEd,1,"dmx","ar","int")
        self.TabSimuDarLineEd.editingFinished.connect(simupara)
        self.TabSimuDaaLbl=QtGui.QLabel(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDaaLbl,13,2,1,1)
        self.TabSimuDaaLbl.setText(_translate("FormSTADIC", "aa:", None))
        self.TabSimuDaaLineEd=QtGui.QLineEdit(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDaaLineEd,13,3,1,1)
        self.TabSimuDaaLineEd.setFixedWidth(100)
        self.TabSimuDaaLineEd.setValidator(QtGui.QDoubleValidator(0,1,15))
        self.TabSimuDaaLbl.setToolTip("")
        simupara=lambda: self.simuWrite(self.TabSimuDaaLineEd,1,"dmx","aa","float")
        self.TabSimuDaaLineEd.editingFinished.connect(simupara)
        self.TabSimuDlrLbl=QtGui.QLabel(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDlrLbl,13,5,1,1)
        self.TabSimuDlrLbl.setText(_translate("FormSTADIC", "lr:", None))
        self.TabSimuDlrLineEd=QtGui.QLineEdit(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDlrLineEd,13,6,1,1)
        self.TabSimuDlrLineEd.setFixedWidth(100)
        self.TabSimuDlrLineEd.setValidator(QtGui.QIntValidator(0,1000000))
        self.TabSimuDlrLbl.setToolTip("")
        simupara=lambda: self.simuWrite(self.TabSimuDlrLineEd,1,"dmx","lr","int")
        self.TabSimuDlrLineEd.editingFinished.connect(simupara)
        self.TabSimuDstLbl=QtGui.QLabel(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDstLbl,14,2,1,1)
        self.TabSimuDstLbl.setText(_translate("FormSTADIC", "st:", None))
        self.TabSimuDstLineEd=QtGui.QLineEdit(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDstLineEd,14,3,1,1)
        self.TabSimuDstLineEd.setFixedWidth(100)
        self.TabSimuDstLineEd.setValidator(QtGui.QDoubleValidator(0,1,15))
        self.TabSimuDstLbl.setToolTip("")
        simupara=lambda: self.simuWrite(self.TabSimuDstLineEd,1,"dmx","st","float")
        self.TabSimuDstLineEd.editingFinished.connect(simupara)
        self.TabSimuDsjLbl=QtGui.QLabel(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDsjLbl,14,5,1,1)
        self.TabSimuDsjLbl.setText(_translate("FormSTADIC", "sj:", None))
        self.TabSimuDsjLineEd=QtGui.QLineEdit(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDsjLineEd,14,6,1,1)
        self.TabSimuDsjLineEd.setFixedWidth(100)
        self.TabSimuDsjLineEd.setValidator(QtGui.QDoubleValidator(0,5,15))
        self.TabSimuDsjLbl.setToolTip("")
        simupara=lambda: self.simuWrite(self.TabSimuDsjLineEd,1,"dmx","sj","float")
        self.TabSimuDsjLineEd.editingFinished.connect(simupara)
        self.TabSimuDlwLbl=QtGui.QLabel(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDlwLbl,15,2,1,1)
        self.TabSimuDlwLbl.setText(_translate("FormSTADIC", "lw:", None))
        self.TabSimuDlwLineEd=QtGui.QLineEdit(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDlwLineEd,15,3,1,1)
        self.TabSimuDlwLineEd.setFixedWidth(100)
        v=QtGui.QDoubleValidator()
        v.setRange(0.0,1.0,15)
        v.setNotation(QtGui.QDoubleValidator.StandardNotation)
        self.TabSimuDlwLineEd.setValidator(v)
        self.TabSimuDlwLbl.setToolTip("")
        simupara=lambda: self.simuWrite(self.TabSimuDlwLineEd,1,"dmx","lw","float")
        self.TabSimuDlwLineEd.editingFinished.connect(simupara)

        self.TabSimuDdjLbl=QtGui.QLabel(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDdjLbl,15,5,1,1)
        self.TabSimuDdjLbl.setText(_translate("FormSTADIC", "dj:", None))
        self.TabSimuDdjLineEd=QtGui.QLineEdit(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDdjLineEd,15,6,1,1)
        self.TabSimuDdjLineEd.setFixedWidth(100)
        self.TabSimuDdjLineEd.setValidator(QtGui.QDoubleValidator(0,5,15))
        self.TabSimuDdjLbl.setToolTip("")
        simupara=lambda: self.simuWrite(self.TabSimuDdjLineEd,1,"dmx","dj","float")
        self.TabSimuDdjLineEd.editingFinished.connect(simupara)
        self.TabSimuDdsLbl=QtGui.QLabel(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDdsLbl,16,2,1,1)
        self.TabSimuDdsLbl.setText(_translate("FormSTADIC", "ds:", None))
        self.TabSimuDdsLineEd=QtGui.QLineEdit(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDdsLineEd,16,3,1,1)
        self.TabSimuDdsLineEd.setFixedWidth(100)
        self.TabSimuDdsLineEd.setValidator(QtGui.QDoubleValidator(0,1,15))
        self.TabSimuDdsLbl.setToolTip("")
        simupara=lambda: self.simuWrite(self.TabSimuDdsLineEd,1,"dmx","ds","float")
        self.TabSimuDdsLineEd.editingFinished.connect(simupara)
        self.TabSimuDdrLbl=QtGui.QLabel(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDdrLbl,16,5,1,1)
        self.TabSimuDdrLbl.setText(_translate("FormSTADIC", "dr:", None))
        self.TabSimuDdrLineEd=QtGui.QLineEdit(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDdrLineEd,16,6,1,1)
        self.TabSimuDdrLineEd.setFixedWidth(100)
        self.TabSimuDdrLineEd.setValidator(QtGui.QIntValidator(0,100000))
        self.TabSimuDdrLbl.setToolTip("")
        simupara=lambda: self.simuWrite(self.TabSimuDdrLineEd,1,"dmx","dr","int")
        self.TabSimuDdrLineEd.editingFinished.connect(simupara)
        self.TabSimuDdpLbl=QtGui.QLabel(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDdpLbl,17,2,1,1)
        self.TabSimuDdpLbl.setText(_translate("FormSTADIC", "dp:", None))
        self.TabSimuDdpLineEd=QtGui.QLineEdit(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDdpLineEd,17,3,1,1)
        self.TabSimuDdpLineEd.setFixedWidth(100)
        self.TabSimuDdpLineEd.setValidator(QtGui.QDoubleValidator(0,5,15))
        self.TabSimuDdpLbl.setToolTip("")
        simupara=lambda: self.simuWrite(self.TabSimuDdpLineEd,1,"dmx","dp","float")
        self.TabSimuDdpLineEd.editingFinished.connect(simupara)
        self.TabSimuDdcLbl=QtGui.QLabel(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDdcLbl,17,5,1,1)
        self.TabSimuDdcLbl.setText(_translate("FormSTADIC", "dc:", None))
        self.TabSimuDdcLineEd=QtGui.QLineEdit(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDdcLineEd,17,6,1,1)
        self.TabSimuDdcLineEd.setFixedWidth(100)
        self.TabSimuDdcLineEd.setValidator(QtGui.QDoubleValidator(0,5,15))
        self.TabSimuDdcLbl.setToolTip("")
        simupara=lambda: self.simuWrite(self.TabSimuDdcLineEd,1,"dmx","dc","float")
        self.TabSimuDdcLineEd.editingFinished.connect(simupara)
        self.TabSimuDdtLbl=QtGui.QLabel(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDdtLbl,18,2,1,1)
        self.TabSimuDdtLbl.setText(_translate("FormSTADIC", "dt:", None))
        self.TabSimuDdtLineEd=QtGui.QLineEdit(self.TabSimu)
        self.TabSimu2Grid.addWidget(self.TabSimuDdtLineEd,18,3,1,1)
        self.TabSimuDdtLineEd.setFixedWidth(100)
        self.TabSimuDdtLineEd.setValidator(QtGui.QDoubleValidator(0,1,15))
        self.TabSimuDdtLbl.setToolTip("")
        simupara=lambda: self.simuWrite(self.TabSimuDdtLineEd,1,"dmx","dt","float")
        self.TabSimuDdtLineEd.editingFinished.connect(simupara)
        spacerItem = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Minimum)
        self.TabSimu2Grid.addItem(spacerItem,19,0,1,1)
        self.TabSimuStartBtn = QtGui.QPushButton(self.TabSimu)
        self.TabSimu1VLayout.addWidget(self.TabSimuStartBtn)
        self.TabSimuStartBtn.setText(_translate("FormSTADIC", "Start Simulation", None))
        spacerItem = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Expanding)
        self.TabSimu1VLayout.addItem(spacerItem)
        self.TabSimuStartBtn.clicked.connect(self.simurun)


        ##Tab10: Output
        self.TabOutput = QtGui.QWidget()
        self.StadicTab.addTab(self.TabOutput, _fromUtf8("OUTPUT"))
        self.StadicTab.setTabToolTip(self.StadicTab.indexOf(self.TabOutput),"Please find your output here!")
        self.TabOutputHLayout = QtGui.QHBoxLayout(self.TabOutput)
        self.TabOutput1VLayout = QtGui.QVBoxLayout()
        self.TabOutputHLayout.addLayout(self.TabOutput1VLayout)
        self.TabOutputWebV = QtWebKit.QWebView(self.TabOutput)
        self.TabOutputWebV.setUrl(QtCore.QUrl(_fromUtf8("file:///C:/Users/Ling%20Chen/Desktop/vis/html/ill.html")))
        self.TabOutput1VLayout.addWidget(self.TabOutputWebV)


        ##Tab Initialization
        self.StadicTab.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(FormSTADIC)


    ##Json File Creation and Initialization with some default parameters
    def JFCrtBtn(self):
        self.JFileName=QtGui.QFileDialog.getSaveFileName(self,"Create JSON File","C:/","JSON File (*.json)")
        if self.JFileName:
            self.setWindowTitle(_translate("FormSTADIC", "STADIC-"+self.JFileName, None))
            self.TabFileJFLineEd.setText(self.JFileName)
            self.JF=open(self.JFileName,"w")
            self.JFData={}
            self.JFData["general"]={}
            self.JFData["general"]["first_day"]=1
            self.JFData["general"]["radiance_parameters"]={}
            self.JFData["general"]["sun_divisions"]=3
            self.JFData["general"]["sky_divisions"]=4
            self.JFData["general"]["daylight_savings_time"]=False
            self.JFData["general"]["building_rotation"]=0
            self.JFData["general"]["project_directory"]=os.path.dirname(str(self.JFileName))+"/"
            self.TabFileDirLineEd.setText(self.JFData["general"]["project_directory"])
            para=["default","dmx","vmx"]
            for item in para:
                self.JFData["general"]["radiance_parameters"][item]={}
                self.JFData["general"]["radiance_parameters"][item]["aa"]=0.1
                self.JFData["general"]["radiance_parameters"][item]["ab"]=4
                self.JFData["general"]["radiance_parameters"][item]["dj"]=0.0
                self.JFData["general"]["radiance_parameters"][item]["ad"]=1024
                self.JFData["general"]["radiance_parameters"][item]["lw"]=0.004
                self.JFData["general"]["radiance_parameters"][item]["dc"]=1.0
                self.JFData["general"]["radiance_parameters"][item]["st"]=0.15
                self.JFData["general"]["radiance_parameters"][item]["sj"]=1.0
                self.JFData["general"]["radiance_parameters"][item]["as"]=256
                self.JFData["general"]["radiance_parameters"][item]["ar"]=150
                self.JFData["general"]["radiance_parameters"][item]["lr"]=6
                self.JFData["general"]["radiance_parameters"][item]["dt"]=0.5
                self.JFData["general"]["radiance_parameters"][item]["dr"]=2
                self.JFData["general"]["radiance_parameters"][item]["ds"]=0.2
                self.JFData["general"]["radiance_parameters"][item]["dp"]=1.0
            self.JFData["spaces"]=[]
            self.created=True
            self.Backup()
            self.SimuLoad()
            self.TabFileJFLineEd.setDisabled(1)
            self.TabFileJFBtn.setDisabled(1)
            self.TabFileJFCrtBtn.setDisabled(1)
            QtGui.QMessageBox.information(self,"Successful","File is successfully created")
            self.SaveAll()


    ##Create Backup File
    def Backup(self):
        self.tempdata=self.JFData
        self.JF.close()
        self.tpfname=self.JFileName+".bak"
        i=0
        while os.path.exists(self.tpfname):
            self.tpfname=self.JFileName+str(i)+".bak"
            i+=1
            if i>=100:
                QtGui.QMessageBox.warning(self,"Warning","Too many backup files! Backup File Named as %s" %self.tpfname)
                break
        self.WriteToFile()


    ##Write to Backup File
    def WriteToFile(self):
        self.tpfile=open(self.tpfname,"w")
        self.tpjson=json.dumps(self.tempdata,indent=4)
        self.tpfile.write(self.tpjson)
        self.tpfile.close()


    ##Save to Json File
    def SaveAll(self):
        try:
            self.JFData=self.tempdata
            self.JF=open(self.JFileName,"w")
            tpall=json.dumps(self.JFData,indent=4)
            self.JF.write(tpall)
            self.JF.close()
        except:
            pass


    def SaveAs(self):
        if self.created or self.imported:
            self.JFileName=QtGui.QFileDialog.getSaveFileName(self,"Save AS","","JSON File (*.json)",options=QtGui.QFileDialog.DontResolveSymlinks)
            if self.JFileName:
                self.JFData=self.tempdata
                self.JF=open(self.JFileName,"w")
                tpall=json.dumps(self.tempdata,indent=4)
                self.JF.write(tpall)
                self.JF.close()
                self.setWindowTitle(_translate("FormSTADIC", "STADIC-"+self.JFileName, None))


    def FileDir(self):
        if self.imported or self.created:
            dir2=QtGui.QFileDialog.getExistingDirectory(self, "Set Project Path Directory", "" , options=QtGui.QFileDialog.DontResolveSymlinks)
            if dir2:
                try:
                    dir1=self.tempdata["general"]["project_directory"]
                    self.SaveAll()
                    self.CopyFile(str(self.JFileName),str(dir2))
                    self.JFileName=str(dir2)+"/"+os.path.basename(str(self.JFileName))
                    self.TabFileJFLineEd.setText(str(self.JFileName))
                    self.setWindowTitle(_translate("FormSTADIC", "STADIC-"+self.JFileName, None))
                    dir1_folders = [dir for dir in os.listdir(dir1) if os.path.isdir(os.path.join(dir1, dir))]
                    for dir in dir1_folders:
                        shutil.copytree(os.path.join(dir1, dir), os.path.join(str(dir2), dir))
                except:
                   pass
                spd=os.path.normpath(str(dir2))
                spdlist=spd.split("\\")
                cleanspd=spdlist[0]
                try:
                    for item in spdlist[1:]:
                        cleanspd=cleanspd+"/"+item
                except:
                    pass
                self.tempdata["general"]["project_directory"]=cleanspd+"/"
                self.WriteToFile()
                self.SaveAll()
                self.JFImport()


    def JFBtn(self):
        self.JFileName= QtGui.QFileDialog.getOpenFileName(self,"Open JSON File","C:/","JSON File (*.json)")
        if self.JFileName:
            self.TabFileJFLineEd.setText(self.JFileName)
            self.imported=True
            self.JFImport()


    def prjpathChk(self):
        pdir=str(os.path.normpath(os.path.normcase(os.path.dirname(str(self.JFileName)))))
        try:
            sdir=str(os.path.normpath(os.path.normcase(os.path.dirname(self.tempdata["general"]["project_directory"]))))
            pdir=pdir.split("\\")
            sdir=sdir.split("\\")
            mark=0
            for i in range(len(sdir)):
                if sdir[i]!=pdir[i]:
                    mark=1
            if mark==1:
                QtGui.QMessageBox.warning(self,"warning", "Your JSON file is not in the same directory of your project!")
        except:
            pass


    ##Loading Tab File
    def JFImport(self):
        self.JF=open(self.JFileName,"r+")
        self.JFData=json.load(self.JF)
        self.Backup()
        self.TabFileJFLineEd.setDisabled(1)
        self.TabFileJFBtn.setDisabled(1)
        self.TabFileJFCrtBtn.setDisabled(1)
        self.setWindowTitle(_translate("FormSTADIC", "STADIC-"+self.JFileName, None))
        try:
            self.DUnits=self.tempdata["general"]["import_units"]
            self.TabFileDUnitComBox.setCurrentIndex(self.dunits(self.DUnits))
            self.DDUnits=self.tempdata["general"]["display_units"]
            self.TabFileDDUnitComBox.setCurrentIndex(self.dunits(self.DDUnits))
            self.LUnits=self.tempdata["general"]["illum_units"]
            self.TabFileLUnitsComBox.setCurrentIndex(self.lunits(self.LUnits))
        except:
            pass
        try:
            self.TabFileDirLineEd.setText(str(self.tempdata["general"]["project_directory"]))
        except:
            self.tempdata["general"]["project_directory"]=os.path.dirname(str(self.JFileName))+"/"
            self.TabFileDirLineEd.setText(str(self.tempdata["general"]["project_directory"]))
        self.prjpathChk()
        try:
            basep=self.tempdata["general"]["project_directory"]+"data/"
            self.TabSiteWeaLineEd.setText(os.path.normpath(os.path.join(basep,str(self.tempdata["general"]["epw_file"]))))
        except:
            pass
        try:
            if self.tempdata["general"]["daylight_savings_time"]==True:
                self.TabSiteDaySChk.setChecked(1)
            else:
                self.TabSiteDaySChk.setChecked(0)
        except:
            self.tempdata["general"]["daylight_savings_time"]=False
            self.TabSiteDaySChk.setChecked(0)
        try:
            self.TabSiteGrdReflLineEd.setText(self.tempdata["general"]["ground_reflectance"])
        except:
            self.tempdata["general"]["ground_reflectance"]=0.2
            self.TabSiteGrdReflLineEd.setText(str(self.tempdata["general"]["ground_reflectance"]))
        count=0
        for item in self.tempdata["spaces"]:
            self.TabSDataSPComBox.addItem(item["space_name"])
            self.TabAnaSPNComBox.addItem(item["space_name"])
            self.TabWinSPNComBox.addItem(item["space_name"])
            self.TabElecSPComBox.addItem(item["space_name"])
            self.TabCtrlSPNComBox.addItem(item["space_name"])
            self.TabDMtrSPNComBox.addItem(item["space_name"])
            count=count+1
        self.TabSDataSPComBox.setCurrentIndex(0)
        self.TabDMtrSPNComBox.setCurrentIndex(0)
        self.WriteToFile()
        self.SimuLoad()
        self.JFLoad(0)



    def JFLoad(self, spn):
        self.TabSDataLoad()
        if len(self.tempdata["spaces"])>1:
            self.TabSDataSPDelBtn.setEnabled(1)
        try:
            self.TabSiteBldgRotLineEd.setText(str(self.tempdata["general"]["building_rotation"]))
        except:
            self.TabSiteBldgRotLineEd.setText("0")
            self.tempdata["general"]["building_rotation"]=0
            self.WriteToFile()
        self.TabAnaLoad()
        self.TabWinGLoad()
        self.TabElecLoad()
        self.TabCtrlLoad()
        self.TabMtrLoad()


    def dunits(self,unit):
        if unit=="in":
            return 0
        elif unit=="ft":
            return 1
        elif unit=="m":
            return 2
        elif unit=="mm":
            return 3


    def lunits(self,unit):
        if unit=="lux":
            return 0
        elif unit=="fc":
            return 1


    def DUnitChange(self, object, unittype):
        index=object.currentIndex()
        if index==0:
            Unit="in"
        elif index==1:
            Unit="ft"
        elif index==2:
            Unit="m"
        elif index==3:
            Unit="mm"
        try:
            if self.imported or self.created:
                self.tempdata["general"][unittype]=Unit
                self.tempdata["general"][unittype]=Unit
                self.WriteToFile()

        except:
            pass

    def LUnitChange(self, index):
        if index==0:
            LUnit="lux"
        else:
            LUnit="fc"
        try:
            if self.imported or self.created:
                self.tempdata["general"]["illum_units"]=LUnit
                self.WriteToFile()
        except:
            pass


    def WeaFile(self):
        if self.imported or self.created:
            WeaFile= QtGui.QFileDialog.getOpenFileName(self,"Import EPW Weather File","C:/","Weather File (*.epw)")
            if WeaFile:
                WPath=self.tempdata["general"]["project_directory"]+"data/"
                WeaLine=self.CopyFile(WeaFile,WPath)
                self.TabSiteWeaLineEd.setText(WeaLine)
                self.JFData["general"]["epw_file"]="data/"+os.path.basename(str(WeaLine))
                self.WriteToFile()

    def DayS(self):
        if self.imported or self.created:
            if self.TabSiteDaySChk.isChecked():
                self.tempdata["general"]["daylight_savings_time"]=True
            else:
                self.tempdata["general"]["daylight_savings_time"]=False
            self.WriteToFile()


    def SiteData(self, object, key):
        if self.imported or self.created:
            if key=="building_rotation":
                self.tempdata["general"][key]=int(object.text())
            else:
                mark=0
                mark=self.floatChk(object, 0, 1)
                if mark==0:
                    self.tempdata["general"][key]=float(object.text())
                else:
                    object.setText("0.2")
                    object.setFocus()
                    self.tempdata["general"][key]=0.2
            self.WriteToFile()


    def CopyFile(self,fname,fnpath):
        if self.imported or self.created:
            try:
                os.stat(fnpath)
                mark=0
            except:
                try:
                    os.mkdir(fnpath)
                    mark=0
                except:
                    QtGui.QMessageBox.warning(self, "Error Creation of the File Path!")
                    mark=1
            if mark==0:
                base=os.path.basename(str(fname))
                fopath=os.path.dirname(str(fname))
                fnew=os.path.normpath(os.path.join(fnpath,base))
                if os.path.exists(fnew):
                    choice=QtGui.QMessageBox.question(self,"Overwrite","File already exists. Overwrite?", \
                                                      QtGui.QMessageBox.Yes |QtGui.QMessageBox.No)
                    if choice==QtGui.QMessageBox.Yes:
                        if os.stat(fname) == os.stat(fnew):
                            pass
                        else:
                            os.remove(fnew)
                            shutil.copy2(fname, fnew)
                else:
                    shutil.copy2(fname, fnew)
                return fnew


    def TabSDataLoad(self):
        try:
            index=self.TabSDataSPComBox.currentIndex()
            spname=self.tempdata["spaces"][index]
            self.dir=str(self.tempdata["general"]["project_directory"])
            self.FPCheck(self.dir)
            try:
                self.TabSDataMatLineEd.setText(os.path.normpath(os.path.join(self.dir,spname["geometry_directory"],spname["material_file"])))
            except:
                self.TabSDataMatLineEd.setText(" ")
            try:
                self.TabSDataGeoLineEd.setText(os.path.normpath(os.path.join(self.dir,spname["geometry_directory"],spname["geometry_file"])))
            except:
                self.TabSDataGeoLineEd.setText(" ")
            # try:
            #     self.TabSDataOccLineEd.setText(os.path.normpath(os.path.join(self.dir,spname["input_directory"],spname["occupancy_schedule"])))
            # except:
            #     self.TabSDataOccLineEd.setText(" ")
            try:
                self.TabSDataLSLineEd.setText(os.path.normpath(os.path.join(self.dir,spname["input_directory"],spname["lighting_schedule"])))
            except:
                self.TabSDataLSLineEd.setText(" ")
            try:
                self.TabSDataGeoBrwLineEd.setText(os.path.normpath(os.path.join(self.dir,spname["geometry_directory"])))
                path=os.path.normpath(os.path.join(self.dir,spname["geometry_directory"]))
                self.FPCheck(path)
            except:
                spname["geometry_directory"]="rad/"
                self.TabSDataGeoBrwLineEd.setText(os.path.normpath(os.path.join(self.dir,spname["geometry_directory"])))
                path=os.path.normpath(os.path.join(self.dir,spname["geometry_directory"]))
                self.FPCheck(path)
            try:
                self.TabSDataIESBrwLineEd.setText(os.path.normpath(os.path.join(self.dir,spname["ies_directory"])))
                path=os.path.normpath(os.path.join(self.dir,spname["ies_directory"]))
                self.FPCheck(path)
            except:
                spname["ies_directory"]="ies/"
                self.TabSDataIESBrwLineEd.setText(os.path.normpath(os.path.join(self.dir,spname["ies_directory"])))
                path=os.path.normpath(os.path.join(self.dir,spname["ies_directory"]))
                self.FPCheck(path)
            try:
                self.TabSDataInputLineEd.setText(os.path.normpath(os.path.join(self.dir,spname["input_directory"])))
                path=os.path.normpath(os.path.join(self.dir,spname["input_directory"]))
                self.FPCheck(path)
            except:
                spname["input_directory"]="data/"
                self.TabSDataInputLineEd.setText(os.path.normpath(os.path.join(self.dir,spname["input_directory"])))
                path=os.path.normpath(os.path.join(self.dir,spname["input_directory"]))
                self.FPCheck(path)
            try:
                self.TabSDataResLineEd.setText(os.path.normpath(os.path.join(self.dir,spname["results_directory"])))
                path=os.path.normpath(os.path.join(self.dir,spname["results_directory"]))
                self.FPCheck(path)
            except:
                spname["results_directory"]="res/"
                self.TabSDataResLineEd.setText(os.path.normpath(os.path.join(self.dir,spname["results_directory"])))
                path=os.path.normpath(os.path.join(self.dir,spname["results_directory"]))
                self.FPCheck(path)
        except:
            pass


    def FPCheck(self,fpath):
        if not os.path.exists(str(fpath)):
            try:
                os.mkdir(str(fpath))
            except:
                QtGui.QMessageBox.warning(self,"Warning!!!","Path Existed!")




    def SPAdd(self):
        if self.imported or self.created:
            name, ok=QtGui.QInputDialog.getText(self,"Add Space", "Space Name:", QtGui.QLineEdit.Normal)
            if ok and name !=" ":
                mark=0
                for item in self.tempdata["spaces"]:
                    if item["space_name"]!= name:
                        mark=0
                        continue
                    else:
                        mark=1
                        QtGui.QMessageBox.warning(self, "Warning!", \
                                                  "The name is the same as one of the other space")
                        break
                if mark==0:
                    self.tempdata["spaces"].append({})
                    self.tempdata["spaces"][len(self.tempdata["spaces"])-1]["space_name"]=str(name)
                    index=len(self.tempdata["spaces"])-1
                    self.tempdata["spaces"][index]["DA"]={}
                    self.tempdata["spaces"][index]["DA"]["calculate"]=False
                    self.tempdata["spaces"][index]["sDA"]={}
                    self.tempdata["spaces"][index]["sDA"]["calculate"]=False
                    self.tempdata["spaces"][index]["occupied_sDA"]={}
                    self.tempdata["spaces"][index]["occupied_sDA"]["calculate"]=False
                    self.tempdata["spaces"][index]["cDA"]={}
                    self.tempdata["spaces"][index]["cDA"]["calculate"]=False
                    self.tempdata["spaces"][index]["DF"]=False
                    self.tempdata["spaces"][index]["UDI"]={}
                    self.tempdata["spaces"][index]["UDI"]["calculate"]=False
                    self.TabSDataSPComBox.addItem(str(name))
                    self.TabAnaSPNComBox.addItem(str(name))
                    self.TabWinSPNComBox.addItem(str(name))
                    self.TabElecSPComBox.addItem(str(name))
                    self.TabCtrlSPNComBox.addItem(str(name))
                    self.TabDMtrSPNComBox.addItem(str(name))
                    self.TabSDataSPComBox.setCurrentIndex(len(self.tempdata["spaces"])-1)
                    self.TabAnaSPNComBox.setCurrentIndex(len(self.tempdata["spaces"])-1)
                    self.TabWinSPNComBox.setCurrentIndex(len(self.tempdata["spaces"])-1)
                    self.TabElecSPComBox.setCurrentIndex(len(self.tempdata["spaces"])-1)
                    self.TabCtrlSPNComBox.setCurrentIndex(len(self.tempdata["spaces"])-1)
                    self.TabDMtrSPNComBox.setCurrentIndex(len(self.tempdata["spaces"])-1)
                    self.WriteToFile()
                    self.TabAnaLoad()
                    self.TabWinGLoad()
                    self.TabElecLoad()
                    self.TabCtrlLoad()
                    self.TabMtrLoad()
                    self.TabSDataSPDelBtn.setEnabled(1)


    def SPDel(self):
        if len(self.tempdata["spaces"]) > 1:
            choice=QtGui.QMessageBox.question(self, "Warning", "Are you sure to delete the space?", \
                                              QtGui.QMessageBox.Yes |QtGui.QMessageBox.No)
            if choice==QtGui.QMessageBox.Yes:
                index=self.TabSDataSPComBox.currentIndex()
                del self.tempdata["spaces"][index]
                self.TabSDataSPComBox.removeItem(index)
                self.TabAnaSPNComBox.removeItem(index)
                self.TabWinSPNComBox.removeItem(index)
                self.TabElecSPComBox.removeItem(index)
                self.TabCtrlSPNComBox.removeItem(index)
                self.TabDMtrSPNComBox.removeItem(index)
                self.WriteToFile()
                self.JFLoad(0)
        else:
            QtGui.QMessageBox.warning(self,"No more spaces","Cannot delete the only space!")


    def view_edit(self, object):
        if self.imported or self.created:
            fpath=str(object.text())
            if os.path.exists(fpath):
                QtGui.QMessageBox.warning(self,"Warning!!!","Please click on \"Import\" if you did save as!")
                os.system(fpath)
            else:
                QtGui.QMessageBox.warning(self,"Warning!!!","No such file in directory!!!")


    def MatImport(self):
        if self.imported or self.created:
            MatFile= QtGui.QFileDialog.getOpenFileName(self,"Import Material File","C:/","Material Rad File (*.rad)")
            if MatFile:
                index=self.TabSDataSPComBox.currentIndex()
                MPath=os.path.join(self.dir,self.tempdata["spaces"][index]["geometry_directory"])
                MatLine=self.CopyFile(MatFile,MPath)
                self.TabSDataMatLineEd.setText(MatLine)
                self.tempdata["spaces"][index]["material_file"]=os.path.basename(str(MatLine))
                self.WriteToFile()

    def GeoImport(self):
        if self.imported or self.created:
            GeoFile= QtGui.QFileDialog.getOpenFileName(self,"Import Geometry File","C:/","Geometry Rad File (*.rad)")
            if GeoFile:
                index=self.TabSDataSPComBox.currentIndex()
                GPath=os.path.join(self.dir,self.tempdata["spaces"][index]["geometry_directory"])
                GeoLine=self.CopyFile(GeoFile,GPath)
                self.TabSDataGeoLineEd.setText(GeoLine)
                self.tempdata["spaces"][index]["geometry_file"]=os.path.basename(str(GeoLine))
                self.WriteToFile()

    # def OccImport(self):
    #     if self.imported or self.created:
    #         OccFile= QtGui.QFileDialog.getOpenFileName(self,"Import Occupancy Schedule","C:/","Occupancy File (*.csv)")
    #         if OccFile:
    #             index=self.TabSDataSPComBox.currentIndex()
    #             OPath=os.path.join(self.dir,self.tempdata["spaces"][index]["input_directory"])
    #             OLine=self.CopyFile(OccFile,OPath)
    #             self.TabSDataOccLineEd.setText(OLine)
    #             self.tempdata["spaces"][index]["occupancy_schedule"]=os.path.basename(str(OLine))
    #             self.WriteToFile()

    def LSImport(self):
        if self.imported or self.created:
            LSFile= QtGui.QFileDialog.getOpenFileName(self,"Import Lighting Schedule","C:/","Lighting Schedule File (*.csv)")
            if LSFile:
                index=self.TabSDataSPComBox.currentIndex()
                LPath=os.path.join(self.dir,self.tempdata["spaces"][index]["input_directory"])
                LLine=self.CopyFile(LSFile,LPath)
                self.TabSDataLSLineEd.setText(LLine)
                self.TabSDataLSLineEd.setText(LLine)
                self.tempdata["spaces"][index]["lighting_schedule"]=os.path.basename(str(LLine))
                self.WriteToFile()


    def sppath(self, object,fuc):
        if self.imported or self.created:
            index=self.TabSDataSPComBox.currentIndex()
            if fuc=="geometry_directory":
                fucs="Geometry"
            elif fuc=="ies_directory":
                fucs="IES"
            elif fuc=="input_directory":
                fucs="Input"
            else:
                fucs="Results"
            dir2=QtGui.QFileDialog.getExistingDirectory(self, "Set %s Path Directory"%fucs, self.tempdata["general"]["project_directory"], options=QtGui.QFileDialog.DontResolveSymlinks)
            if dir2:
                if dir2.contains(self.tempdata["general"]["project_directory"]):
                    try:
                        dir1=os.path.join(self.tempdata["general"]["project_directory"],self.tempdata["spaces"][index][fuc])
                        if fuc=="geometry_directory":
                            dir3=dir2+"/rad/"
                        elif fuc=="ies_directory":
                            dir3=dir2+"/ies/"
                        elif fuc=="input_directory":
                            dir3=dir2+"/data/"
                        else:
                            dir3=dir2+"/res/"
                        shutil.copytree(os.path.normpath(dir1),os.path.normpath(str(dir3)))
                    except:
                        pass
                    spd=str(dir2)
                    spd=spd.strip()

                    spdlist=spd.split("/")
                    cleanspd=""
                    pjd=self.tempdata["general"]["project_directory"].strip().split("/")
                    k=0
                    try:
                        for item in spdlist:
                            try:
                                if item==pjd[k]:
                                    pass
                                else:
                                    cleanspd=cleanspd+"/"+item
                            except:
                                cleanspd=cleanspd+"/"+item
                            k=k+1
                    except:
                        pass
                    if fuc=="geometry_directory":
                        self.tempdata["spaces"][index][fuc]=cleanspd[1:]+"/rad/"
                    elif fuc=="ies_directory":
                        self.tempdata["spaces"][index][fuc]=cleanspd[1:]+"/ies/"
                    elif fuc=="input_directory":
                        self.tempdata["spaces"][index][fuc]=cleanspd[1:]+"/data/"
                    else:
                        self.tempdata["spaces"][index][fuc]=cleanspd[1:]+"/res/"

                    object.setText(str(self.tempdata["spaces"][index][fuc]))
                    self.JFLoad(index)
                    self.WriteToFile()
                else:
                    index=self.TabSDataSPComBox.currentIndex()
                    if fuc=="geomtry_directory":
                        fucs="Geometry"
                    elif fuc=="ies_directory":
                        fucs="IES"
                    elif fuc=="input_directory":
                        fucs="Input"
                    else:
                        fucs="Results"
                    QtGui.QMessageBox.warning(self,"Error", "%s folder path should be the subfolder of your project folder!!" %fucs)



    def TabAnaLoad(self):
        if self.created or self.imported:
            try:
                index=self.TabAnaSPNComBox.currentIndex()
                spname=self.tempdata["spaces"][index]
                self.TabAnaMatNComBox.clear()
                self.TabAnaGPFLineEd.setStyleSheet("color: rgb(0, 0, 0);")
                try:
                    self.TabAnaGPFLineEd.setText(spname["analysis_points"]["files"][0])
                    pth=os.path.join(self.dir,spname["input_directory"],spname["analysis_points"]["files"][0])
                    if os.path.exists(pth):
                        self.TabAnaMatNComBox.setDisabled(1)
                        self.TabAnaMatAddBtn.setDisabled(1)
                        self.TabAnaMatDelBtn.setDisabled(1)
                        self.TabAnaOffXLineEd.setDisabled(1)
                        self.TabAnaOffYLineEd.setDisabled(1)
                        self.TabAnaOffZLineEd.setDisabled(1)
                        self.TabAnaSPXLineEd.setDisabled(1)
                        self.TabAnaSPYLineEd.setDisabled(1)
                    else:
                        self.TabAnaGPFLineEd.setStyleSheet("color: rgb(255, 0, 0);")
                        self.TabAnaMatNComBox.setEnabled(1)
                        self.TabAnaMatAddBtn.setEnabled(1)
                        self.TabAnaMatDelBtn.setEnabled(1)
                        self.TabAnaOffXLineEd.setEnabled(1)
                        self.TabAnaOffYLineEd.setEnabled(1)
                        self.TabAnaOffZLineEd.setEnabled(1)
                        self.TabAnaSPXLineEd.setEnabled(1)
                        self.TabAnaSPYLineEd.setEnabled(1)
                except:
                    self.TabAnaMatNComBox.setEnabled(1)
                    self.TabAnaMatAddBtn.setEnabled(1)
                    self.TabAnaMatDelBtn.setEnabled(1)
                    self.TabAnaOffXLineEd.setEnabled(1)
                    self.TabAnaOffYLineEd.setEnabled(1)
                    self.TabAnaOffZLineEd.setEnabled(1)
                    self.TabAnaSPXLineEd.setEnabled(1)
                    self.TabAnaSPYLineEd.setEnabled(1)
                    try:
                        self.TabAnaGPFLineEd.setText(spname["analysis_points"]["files"][0])
                    except:
                        try:
                            spname["analysis_points"]["files"][0]=spname["space_name"]+"_AutoGen.pts"
                            self.TabAnaGPFLineEd.setText(spname["analysis_points"]["files"][0])
                        except:
                            try:
                                spname["analysis_points"]["files"]=[]
                                spname["analysis_points"]["files"].append(spname["space_name"]+"_AutoGen.pts")
                                self.TabAnaGPFLineEd.setText(spname["analysis_points"]["files"][0])
                            except:
                                spname["analysis_points"]={}
                                spname["analysis_points"]["files"]=[]
                                spname["analysis_points"]["files"].append(spname["space_name"]+"_AutoGen.pts")
                                self.TabAnaGPFLineEd.setText(spname["analysis_points"]["files"][0])
                try:
                    self.TabAnaSPXLineEd.setText(str(spname["analysis_points"]["x_spacing"]))
                except:
                    self.TabAnaSPXLineEd.clear()
                try:
                    self.TabAnaSPYLineEd.setText(str(spname["analysis_points"]["y_spacing"]))
                except:
                    self.TabAnaSPYLineEd.clear()
                try:
                    self.TabAnaOffXLineEd.setText(str(spname["analysis_points"]["x_offset"]))
                except:
                    try:
                        self.TabAnaOffXLineEd.setText(str(spname["analysis_points"]["offset"]))
                    except:
                        self.TabAnaOffXLineEd.clear()
                try:
                    self.TabAnaOffYLineEd.setText(str(spname["analysis_points"]["y_offset"]))
                except:
                    try:
                        self.TabAnaOffYLineEd.setText(str(spname["analysis_points"]["offset"]))
                    except:
                        self.TabAnaOffYLineEd.clear()
                try:
                    self.TabAnaOffZLineEd.setText(str(spname["analysis_points"]["z_offset"]))
                except:
                    self.TabAnaOffZLineEd.clear()
                try:
                    for item in spname["analysis_points"]["modifier"]:
                        self.TabAnaMatNComBox.addItem(str(item))
                except:
                    pass
                self.WriteToFile()
            except:
                pass


    def AddPts(self):
        if self.imported or self.created:
            index=self.TabAnaSPNComBox.currentIndex()
            spname=self.tempdata["spaces"][index]
            try:
                ptsFile=QtGui.QFileDialog.getOpenFileName(self,"Import Points File","C:/","Analysis Grid Points File (*.pts)")
                if ptsFile:
                    self.TabAnaGPFLineEd.setStyleSheet("color: rgb(0, 0, 0);")
                    PPath=os.path.dirname(str(os.path.join(self.dir,spname["input_directory"])))
                    PLine=self.CopyFile(ptsFile,PPath)
                    self.TabAnaGPFLineEd.setText(os.path.basename(PLine))
                    try:
                        spname["analysis_points"]["files"][0]=str(os.path.basename(str(PLine)))
                    except:
                        spname["analysis_points"]={}
                        spname["analysis_points"]["files"]=[]
                        spname["analysis_points"]["files"].append(str(os.path.basename(str(PLine))))
                    self.WriteToFile()
                    self.TabAnaMatNComBox.clear()
                    self.TabAnaSPXLineEd.clear()
                    self.TabAnaSPYLineEd.clear()
                    self.TabAnaOffXLineEd.clear()
                    self.TabAnaOffYLineEd.clear()
                    self.TabAnaOffZLineEd.clear()
                    self.TabAnaMatAddBtn.setDisabled(1)
                    self.TabAnaMatNComBox.setDisabled(1)
                    self.TabAnaMatDelBtn.setDisabled(1)
                    self.TabAnaOffXLineEd.setDisabled(1)
                    self.TabAnaOffYLineEd.setDisabled(1)
                    self.TabAnaOffZLineEd.setDisabled(1)
                    self.TabAnaSPXLineEd.setDisabled(1)
                    self.TabAnaSPYLineEd.setDisabled(1)
            except:
                QtGui.QMessageBox.warning(self,"Warning","Space directory not setup yet!")



    def PtsRst(self):
        if self.imported or self.created:
            choice=QtGui.QMessageBox.question(self, "Warning", "Are you sure to RESET grid points?", \
                                              QtGui.QMessageBox.Yes |QtGui.QMessageBox.No)
            if choice==QtGui.QMessageBox.Yes:
                index=self.TabAnaSPNComBox.currentIndex()
                spname=self.tempdata["spaces"][index]
                name=self.tempdata["general"]["project_directory"]+self.tempdata["spaces"][index]["input_directory"]+ \
                     self.TabAnaGPFLineEd.text()
                os.remove(str(name))
                self.TabAnaGPFLineEd.clear()
                self.TabAnaMatNComBox.clear()
                self.TabAnaSPXLineEd.clear()
                self.TabAnaSPYLineEd.clear()
                self.TabAnaOffXLineEd.clear()
                self.TabAnaOffYLineEd.clear()
                self.TabAnaOffZLineEd.clear()
                self.TabAnaMatAddBtn.setEnabled(1)
                self.TabAnaMatNComBox.setEnabled(1)
                self.TabAnaMatDelBtn.setEnabled(1)
                self.TabAnaOffXLineEd.setEnabled(1)
                self.TabAnaOffYLineEd.setEnabled(1)
                self.TabAnaOffZLineEd.setEnabled(1)
                self.TabAnaSPXLineEd.setEnabled(1)
                self.TabAnaSPYLineEd.setEnabled(1)
                self.TabAnaGPFLineEd.setStyleSheet("color: rgb(0, 0, 0);")

                try:
                    spname["analysis_points"]["files"][0]=spname["space_name"]+"_AutoGen.pts"
                except:
                    spname["analysis_points"]={}
                    spname["analysis_points"]["files"]=[]
                    spname["analysis_points"]["files"].append(spname["space_name"]+"_AutoGen.pts")
                self.WriteToFile()
                self.TabAnaLoad()

    def PtsMatAdd(self):
        if self.imported or self.created:
            try:
                index=self.TabAnaSPNComBox.currentIndex()
                spname=self.tempdata["spaces"][index]
                try:
                    self.combo=Ui_Combo()
                    modifier=[]
                    try:
                        WGMatPath=os.path.normpath(os.path.join(self.dir,spname["geometry_directory"],spname["material_file"]))
                        WGMatFile=open(WGMatPath,"r").read().split()
                        count=0
                        for item in WGMatFile:
                            if item=="void":
                                modifier.append(WGMatFile[count+2])
                            count=count+1
                    except:
                        pass

                    try:
                        WGMatPath=os.path.normpath(os.path.join(self.dir,spname["geometry_directory"],spname["geometry_file"]))
                        WGMatFile=open(WGMatPath,"r").read().split()
                        count=0
                        for item in WGMatFile:
                            if item=="void":
                                modifier.append(WGMatFile[count+2])
                            count=count+1
                    except:
                        pass
                    for item in modifier:
                        self.combo.cbox.addItem(item)
                    self.combo.show()
                    self.combo.exec_()
                    mname=self.combo.mat
                    try:
                        mark=0
                        for item in spname["analysis_points"]["modifier"]:
                            t1=str(mname)
                            t2=str(item)
                            if t1==t2:
                                mark=1
                        if mark==0:
                            spname["analysis_points"]["modifier"].append(str(mname))
                            self.WriteToFile()
                            self.TabAnaLoad()
                        else:
                            QtGui.QMessageBox.warning(self, "Warning", "Material already existed!")
                    except:
                        spname["analysis_points"]={}
                        spname["analysis_points"]["modifier"]=[]
                        spname["analysis_points"]["modifier"].append(str(mname))
                        self.WriteToFile()
                        self.TabAnaLoad()
                except:
                    try:
                        WGMatPath=os.path.normpath(os.path.join(self.dir,spname["geometry_directory"],spname["material_file"]))
                        if not os.path.exists(WGMatPath):
                            QtGui.QMessageBox.warning(self, "warning", "Material file does not exist!")
                    except:
                        pass
            except:
                pass

    def PtsMatDel(self):
        if self.imported or self.created:
            index=self.TabAnaSPNComBox.currentIndex()
            spname=self.tempdata["spaces"][index]
            choice=QtGui.QMessageBox.question(self,"Warning", "Are you sure to delete?", QtGui.QMessageBox.Yes |QtGui.QMessageBox.No)
            if choice==QtGui.QMessageBox.Yes:
                try:
                    mindex=self.TabAnaMatNComBox.currentIndex()
                    self.TabAnaMatNComBox.removeItem(mindex)
                    del spname["analysis_points"]["modifier"][mindex]
                    self.WriteToFile()
                    self.TabAnaLoad()

                except:
                    pass


    def Ptsdata(self,object, key):
        index=self.TabAnaSPNComBox.currentIndex()
        spname=self.tempdata["spaces"][index]["analysis_points"]
        spname[key]=float(object.text())
        self.WriteToFile()

    def TabWinGLoad(self):
        if self.imported or self.created:
            self.TabWinWGComBox.clear()
            try:
                for cnt in reversed(range(self.TabWin2Grid3.count())):
                    widget = self.TabWin2Grid3.takeAt(cnt).widget()
                    if widget is not None:
                        widget.deleteLater()
            except:
                pass
            try:
                for cnt in reversed(range(self.TabWin2Grid4.count())):
                    widget = self.TabWin2Grid4.takeAt(cnt).widget()
                    if widget is not None:
                        widget.deleteLater()
            except:
                pass
            try:
                for cnt in reversed(range(self.TabWin2Grid5.count())):
                    widget = self.TabWin2Grid5.takeAt(cnt).widget()
                    if widget is not None:
                        widget.deleteLater()
            except:
                pass
            try:
                for cnt in reversed(range(self.TabWin2Grid6.count())):
                    widget = self.TabWin2Grid6.takeAt(cnt).widget()
                    if widget is not None:
                        widget.deleteLater()
            except:
                pass
            try:
                index=self.TabWinSPNComBox.currentIndex()
                spname=self.tempdata["spaces"][index]["window_groups"]

                try:
                    i=0
                    for item in spname:
                        try:
                            self.TabWinWGComBox.addItem(item["name"])
                        except:
                            QtGui.QMessageBox.warning(self, "Warning", "Empty Window Group! Deleted!")
                            del spname[i]
                        try:
                            for j in range(len(spname[i]["calculate_setting"])):
                                spname[i]["calculate_setting"][j]=True
                        except:
                            pass
                        i=i+1
                    self.WriteToFile()
                except:
                    pass
                self.TabWinWGComBox.setCurrentIndex(0)
                self.TabWinGCombo()
            except:
                self.TabWinGCombo()

    def TabWinGCombo(self):
        if self.imported or self.created:
            index=self.TabWinSPNComBox.currentIndex()
            WGIndex=self.TabWinWGComBox.currentIndex()

            try:
                spname=self.tempdata["spaces"][index]["window_groups"][WGIndex]
            except:
                pass
            self.TabWinWGMatComBox.clear()
            self.TabWinBSDFBMatComBox.clear()
            self.TabWinBSDFSetList.clear()
            self.TabWinShadeTbl.setRowCount(0)
            try:
                for item in spname["glazing_materials"]:
                    self.TabWinWGMatComBox.addItem(item)
            except:
                pass
            #BSDF disabled by now
            #try:
            #    bsdf=spname["BSDF"]
            #    self.TabWinBSDFChkB.setChecked(1)
            #    self.TabWinBSDFBMatComBox.setEnabled(1)
            #    self.TabWinBSDFSetList.setEnabled(1)
            #    self.TabWinBSDFBMatComBox.clear()

            #    for item in spname["bsdf_base_materials"]:
            #        self.TabWinBSDFBMatComBox.addItem(item)
            #    try:
            #        for item in spname["bsdf_setting_materials"][0]:
            #            self.TabWinBSDFSetList.addItem(item)
            #    except:
            #        spname["bsdf_setting_materials"]=[]
            #except:
            #    self.TabWinBSDFChkB.setChecked(0)
            #    self.TabWinBSDFBMatComBox.setDisabled(1)
            #    self.TabWinBSDFSetList.setDisabled(1)
            try:
                self.TabWinBGeoLineEd.setText(spname["base_geometry"])
            except:
                self.TabWinBGeoLineEd.setText("empty.rad")
                try:
                    self.tempdata["spaces"][index]["window_groups"][WGIndex]["base_geometry"]="empty.rad"
                except:
                    pass
            try:
                self.qbgroup=QtGui.QButtonGroup(self.TabWinShadeTbl) # Number group
                for i in range(len(spname["shade_settings"])):
                    self.TabWinShadeTbl.insertRow(self.TabWinShadeTbl.rowCount())
                    self.TabWinShadeTbl.setRowHeight(i, 40)
                    ShadeNBtn=QtGui.QPushButton(self.TabWin)
                    ShadeNBtn.setText(spname["shade_settings"][i])
                    self.TabWinShadeTbl.setCellWidget(i,0,ShadeNBtn)
                    ShadeNBtn.clicked.connect(self.WShadeVE)
                    ShadeEnCkB=QtGui.QRadioButton()
                    self.qbgroup.addButton(ShadeEnCkB)
                    sWg=QtGui.QWidget()
                    sWgL=QtGui.QHBoxLayout()
                    sWgL.addWidget(ShadeEnCkB)
                    sWgL.setAlignment(QtCore.Qt.AlignCenter)
                    sWg.setLayout(sWgL)
                    self.TabWinShadeTbl.setCellWidget(i,1, sWg)
                    ShadeEnCkB.clicked.connect(self.ShadeCkB)
                    ShadeDelBtn=QtGui.QPushButton(self.TabWin)
                    ShadeDelBtn.setText("Delete")
                    ShadeDelBtn.clicked.connect(self.WShadeDel)
                    self.TabWinShadeTbl.setCellWidget(i,2,ShadeDelBtn)

                try:
                    self.qbgroup.button(-self.tempdata["spaces"][index]["sDA"]["window_group_settings"][WGIndex]-1).setChecked(1)
                except:
                    pass
                try:
                    if spname["shade_control"]["method"]=="automated_signal":
                        self.TabWinMtdComBox.setCurrentIndex(0)
                        self.ShadeCtrlMtd()
                    elif spname["shade_control"]["method"]=="automated_profile_angle":
                        self.TabWinMtdComBox.setCurrentIndex(1)
                        self.ShadeCtrlMtd()
                    elif spname["shade_control"]["method"]=="automated_profile_signal_angle":
                        self.TabWinMtdComBox.setCurrentIndex(2)
                        self.ShadeCtrlMtd()
                except:
                    self.TabWinMtdComBox.setCurrentIndex(3)
                    self.ShadeCtrlMtd()
            except:
                self.TabWinMtdComBox.setCurrentIndex(3)
                self.ShadeCtrlMtd()
        self.WriteToFile()

    def WGAdd(self):
        if (self.imported or self.created) and (self.TabWinSPNComBox.count()>0):
            index=self.TabWinSPNComBox.currentIndex()
            name, ok=QtGui.QInputDialog.getText(self,"Add Window Group", "Group Name:", QtGui.QLineEdit.Normal)
            if ok and name !=" ":
                mark=0
                try:
                    for item in self.tempdata["spaces"][index]["window_groups"]:
                        try:
                            if item["name"]!= name:
                                mark=0
                                continue
                            else:
                                mark=1
                                QtGui.QMessageBox.warning(self, "Warning!", \
                                                          "The name is the same as one of the other window group name!")
                                break
                        except:
                            mark=0
                except:
                    pass
                if mark==0:
                    self.TabWinWGComBox.addItem(str(name))
                    WGIndex=self.TabWinWGComBox.count()-1
                    try:
                        self.tempdata["spaces"][index]["window_groups"].append({})
                    except:
                        self.tempdata["spaces"][index]["window_groups"]=[]
                        self.tempdata["spaces"][index]["window_groups"].append({})
                    self.tempdata["spaces"][index]["window_groups"][WGIndex]["name"]=str(name)
                    self.tempdata["spaces"][index]["window_groups"][WGIndex]["calculate_base"]=True
                    try:
                        self.tempdata["spaces"][index]["sDA"]["window_group_settings"].append(0)
                    except:
                        pass
                    self.WriteToFile()
                    self.TabWinWGComBox.setCurrentIndex(WGIndex)
                    self.TabWinMtdComBox.setCurrentIndex(3)
                    self.TabWinGCombo()

    def WGDel(self):
        if (self.imported or self.created) and (self.TabWinWGComBox.count()>1):
            index=self.TabWinSPNComBox.currentIndex()
            WGIndex=self.TabWinWGComBox.currentIndex()
            choice=QtGui.QMessageBox.question(self, "Warning", "Are you sure to DELETE the window group?", \
                                              QtGui.QMessageBox.Yes |QtGui.QMessageBox.No)
            if choice==QtGui.QMessageBox.Yes:
                del self.tempdata["spaces"][index]["window_groups"][WGIndex]
                try:
                    del self.tempdata["spaces"][index]["sDA"]["window_group_settings"][WGIndex]
                except:
                    pass
                self.TabWinWGComBox.removeItem(WGIndex)
                self.WriteToFile()
                self.TabWinGCombo()
        else:
            QtGui.QMessageBox.warning(self,"No more window groups","Cannot delete the only window group!")

    def WGMatAdd(self):
        if (self.imported or self.created) and (self.TabWinWGComBox.count()>0):
            index=self.TabWinSPNComBox.currentIndex()
            WGIndex=self.TabWinWGComBox.currentIndex()
            spname=self.tempdata["spaces"][index]
            self.combo=Ui_Combo()
            modifier=[]
            try:
                WGMatPath=os.path.normpath(os.path.join(self.dir,spname["geometry_directory"],spname["material_file"]))
                WGMatFile=open(WGMatPath,"r").read().split()
                count=0
                for item in WGMatFile:
                    if item=="void":
                        if WGMatFile[count+1]=="glass" or WGMatFile[count+1]=="trans":
                            modifier.append(WGMatFile[count+2])
                    count=count+1
            except:
                try:
                    WGMatPath=os.path.normpath(os.path.join(self.dir,spname["geometry_directory"],spname["material_file"]))
                    if os.path.exists(WGMatPath):
                        pass
                    else:
                        QtGui.QMessageBox.warning(self, "warning", "Material file does not exist!")
                except:
                    QtGui.QMessageBox.warning(self, "warning", "Material file does not exist!")
            try:
                WGMatPath3=os.path.normpath(os.path.join(self.dir,spname["geometry_directory"],spname["geometry_file"]))
                count=0
                if os.path.exists(WGMatPath3):
                    WGMatFile3=open(WGMatPath3,"r").read().split()
                    for item in WGMatFile3:
                        if item=="void":
                            if WGMatFile3[count+1]=="glass" or WGMatFile3[count+1]=="trans":
                                modifier.append(WGMatFile3[count+2])
                        count=count+1
            except:
                pass
            try:
                WGMatPath2=os.path.normpath(os.path.join(self.dir,spname["geometry_directory"],spname["window_groups"][WGIndex]["base_geometry"]))
                count=0
                if os.path.exists(WGMatPath2):
                    WGMatFile2=open(WGMatPath2,"r").read().split()
                    for item in WGMatFile2:
                        if item=="void":
                            if WGMatFile2[count+1]=="glass" or WGMatFile2[count+1]=="trans":
                                modifier.append(WGMatFile2[count+2])
                        count=count+1
                else:
                    QtGui.QMessageBox.warning(self, "warning", "Window Group Base File does not exist!")
            except:
                pass
            for item in modifier:
                self.combo.cbox.addItem(item)
            self.combo.show()
            self.combo.exec_()
            try:
                mname=self.combo.mat
            except:
                pass
            try:
                mark=0
                for item in spname["window_groups"][WGIndex]["glazing_materials"]:
                    t1=str(item)
                    t2=str(mname)
                    if t1==t2:
                        mark=1
                if mark==0:
                    spname["window_groups"][WGIndex]["glazing_materials"].append(str(mname))
                else:
                    QtGui.QMessageBox.warning(self,"Warning", "Material already existed!")
            except:
                spname["window_groups"][WGIndex]["glazing_materials"]=[]
                spname["window_groups"][WGIndex]["glazing_materials"].append(str(mname))
            self.WriteToFile()
            self.TabWinGCombo()


    def WGMatDel(self):
        if (self.imported or self.created) and (self.TabWinWGComBox.count()>0):
            index=self.TabWinSPNComBox.currentIndex()
            WGIndex=self.TabWinWGComBox.currentIndex()
            MIndex=self.TabWinWGMatComBox.currentIndex()
            choice=QtGui.QMessageBox.question(self,"Warning", "Are you sure to delete?", \
                                                      QtGui.QMessageBox.Yes |QtGui.QMessageBox.No)
            if choice==QtGui.QMessageBox.Yes:
                try:
                    del self.tempdata["spaces"][index]["window_groups"][WGIndex]["glazing_materials"][MIndex]
                    self.TabWinWGMatComBox.removeItem(MIndex)
                    self.WriteToFile()
                except:
                    pass

    def WinG(self):
        if (self.imported or self.created) and (self.TabWinWGComBox.count()>0):
            GeoFile= QtGui.QFileDialog.getOpenFileName(self,"Import Geometry File","C:/","Geometry Rad File (*.rad)")
            if GeoFile:
                index=self.TabWinSPNComBox.currentIndex()
                WGIndex=self.TabWinWGComBox.currentIndex()
                GPath=os.path.join(self.dir,self.tempdata["spaces"][index]["geometry_directory"])
                GeoLine=self.CopyFile(GeoFile,GPath)
                self.TabWinBGeoLineEd.setText(os.path.basename(str(GeoLine)))
                self.tempdata["spaces"][index]["window_groups"][WGIndex]["base_geometry"]=os.path.basename(str(GeoLine))
                self.WriteToFile()

    def WShadeVE(self):
        button = self.sender()
        index=self.TabWinSPNComBox.currentIndex()
        bindex = self.TabWinShadeTbl.indexAt(button.pos())
        WGIndex=self.TabWinWGComBox.currentIndex()
        sindex=bindex.row()
        widget=self.TabWinShadeTbl.cellWidget(bindex.row(),bindex.column())

        fpath=str(os.path.join(self.dir, self.tempdata["spaces"][index]["geometry_directory"], \
                                   self.tempdata["spaces"][index]["window_groups"][WGIndex]["shade_settings"][sindex]))
        if os.path.exists(fpath):
            QtGui.QMessageBox.warning(self,"Warning!!!","Please replace the file if you did save as!")
            os.system(fpath)
        else:
            QtGui.QMessageBox.warning(self,"Warning!!!","No such file in directory!!!")

    def WShadeAdd(self):
        if (self.imported or self.created) and (self.TabWinWGComBox.count()>0):
            SFile= QtGui.QFileDialog.getOpenFileName(self,"Import Shade File","C:/","Shade Rad File (*.rad)")
            if SFile:
                index=self.TabWinSPNComBox.currentIndex()
                WGIndex=self.TabWinWGComBox.currentIndex()
                SPath=os.path.join(self.dir,self.tempdata["spaces"][index]["geometry_directory"])
                SLine=self.CopyFile(SFile,SPath)
                self.TabWinShadeTbl.insertRow(self.TabWinShadeTbl.rowCount())
                i=self.TabWinShadeTbl.rowCount()-1
                self.TabWinShadeTbl.setRowHeight(i,40)
                ShadeNBtn=QtGui.QPushButton(self.TabWin)
                ShadeNBtn.setText(os.path.basename(str(SLine)))
                self.TabWinShadeTbl.setCellWidget(i,0,ShadeNBtn)
                ShadeNBtn.clicked.connect(self.WShadeVE)
                ShadeEnCkB=QtGui.QRadioButton()
                self.qbgroup.addButton(ShadeEnCkB)
                sWg=QtGui.QWidget()
                sWgL=QtGui.QHBoxLayout()
                sWgL.addWidget(ShadeEnCkB)
                sWgL.setAlignment(QtCore.Qt.AlignCenter)
                sWg.setLayout(sWgL)
                self.TabWinShadeTbl.setCellWidget(i,1, sWg)
                ShadeEnCkB.clicked.connect(self.ShadeCkB)
                ShadeDelBtn=QtGui.QPushButton(self.TabWin)
                ShadeDelBtn.setText("Delete")
                ShadeDelBtn.clicked.connect(self.WGDel)
                self.TabWinShadeTbl.setCellWidget(i,2,ShadeDelBtn)
                try:
                    self.tempdata["spaces"][index]["window_groups"][WGIndex]["shade_settings"].append(os.path.basename(str(SLine)))
                    self.tempdata["spaces"][index]["window_groups"][WGIndex]["calculate_setting"].append(True)

                except:
                    self.tempdata["spaces"][index]["window_groups"][WGIndex]["shade_settings"]=[]
                    self.tempdata["spaces"][index]["window_groups"][WGIndex]["shade_settings"].append(os.path.basename(str(SLine)))
                    self.tempdata["spaces"][index]["window_groups"][WGIndex]["calculate_setting"]=[]
                    self.tempdata["spaces"][index]["window_groups"][WGIndex]["calculate_setting"].append(True)
                    self.tempdata["spaces"][index]["window_groups"][WGIndex]["shade_control"]={}
                try:
                    self.tempdata["spaces"][index]["sDA"]["window_group_settings"].append(0)
                except:
                    self.tempdata["spaces"][index]["sDA"]["window_group_settings"]=[]
                    self.tempdata["spaces"][index]["sDA"]["window_group_settings"].append(0)
                self.WriteToFile()
                self.ShadeCtrlMtd()

    def WShadeDel(self):
        if (self.imported or self.created):
            btn=self.sender()
            bindex = self.TabWinShadeTbl.indexAt(btn.pos())
            index=self.TabWinSPNComBox.currentIndex()
            WGIndex=self.TabWinWGComBox.currentIndex()
            sname=self.tempdata["spaces"][index]["window_groups"][WGIndex]["shade_settings"][bindex.row()]
            choice=QtGui.QMessageBox.question(self,"Warning", "Are you sure to delete the shade: %s?" %sname, QtGui.QMessageBox.Yes |QtGui.QMessageBox.No)
            if choice==QtGui.QMessageBox.Yes:
                sname=self.tempdata["spaces"][index]["window_groups"][WGIndex]["shade_settings"][bindex.row()]
                del self.tempdata["spaces"][index]["window_groups"][WGIndex]["shade_settings"][bindex.row()]
                del self.tempdata["spaces"][index]["window_groups"][WGIndex]["calculate_setting"][bindex.row()]
                self.TabWinShadeTbl.removeRow(bindex.row())
                try:
                    spname=self.tempdata["spaces"][index]["window_groups"][WGIndex]["shade_control"]
                    del spname["angle_settings"][bindex.row()]
                except:
                    pass
                try:
                    spname=self.tempdata["spaces"][index]["window_groups"][WGIndex]["shade_control"]
                    del spname["signal_settings"][bindex.row()]
                except:
                    pass
                if len(self.tempdata["spaces"][index]["window_groups"][WGIndex]["shade_settings"])==0:
                    del self.tempdata["spaces"][index]["window_groups"][WGIndex]["shade_settings"]
                    del self.tempdata["spaces"][index]["window_groups"][WGIndex]["calculate_setting"]
                    self.TabWinMtdComBox.setCurrentIndex(3)
                self.WriteToFile()
                self.ShadeCtrlMtd()


    def ShadeCkB(self):
        cbx=self.sender()
        bindex = self.TabWinShadeTbl.indexAt(cbx.pos())
        index=self.TabWinSPNComBox.currentIndex()
        WGIndex=self.TabWinWGComBox.currentIndex()
        count=self.TabWinWGComBox.count()
        item=self.TabWinShadeTbl.cellWidget(bindex.row(),1)
        try:
            self.tempdata["spaces"][index]["sDA"]["window_group_settings"][WGIndex]=-1-self.qbgroup.checkedId()
        except:
            try:
                for i in range(count):
                    try:
                        self.tempdata["spaces"][index]["sDA"]["window_group_settings"][i]
                    except:
                        self.tempdata["spaces"][index]["sDA"]["window_group_settings"].append(0)
                self.tempdata["spaces"][index]["sDA"]["window_group_settings"][WGIndex]=-1-self.qbgroup.checkedId()
            except:
                self.tempdata["spaces"][index]["sDA"]["window_group_settings"]=[]
                for i in range(count):
                    self.tempdata["spaces"][index]["sDA"]["window_group_settings"].append(0)
                self.tempdata["spaces"][index]["sDA"]["window_group_settings"][WGIndex]=-1-self.qbgroup.checkedId()
        self.WriteToFile()

    def ShadeCtrlMtd(self):
        try:
            if (self.imported or self.created) and (self.TabWinWGComBox.count()>0):
                index=self.TabWinSPNComBox.currentIndex()
                WGIndex=self.TabWinWGComBox.currentIndex()
                try:
                    spname=self.tempdata["spaces"][index]["window_groups"][WGIndex]["shade_control"]
                except:
                    self.tempdata["spaces"][index]["window_groups"][WGIndex]["shade_control"]={}
                    spname=self.tempdata["spaces"][index]["window_groups"][WGIndex]["shade_control"]
                MIndex=self.TabWinMtdComBox.currentIndex()
                try:
                    for cnt in reversed(range(self.TabWin2Grid3.count())):
                        widget = self.TabWin2Grid3.takeAt(cnt).widget()
                        if widget is not None:
                            widget.deleteLater()
                except:
                    pass
                try:
                    for cnt in reversed(range(self.TabWin2Grid4.count())):
                        widget = self.TabWin2Grid4.takeAt(cnt).widget()
                        if widget is not None:
                            widget.deleteLater()
                except:
                    pass
                try:
                    for cnt in reversed(range(self.TabWin2Grid5.count())):
                        widget = self.TabWin2Grid5.takeAt(cnt).widget()
                        if widget is not None:
                            widget.deleteLater()
                except:
                    pass
                try:
                    for cnt in reversed(range(self.TabWin2Grid6.count())):
                        widget = self.TabWin2Grid6.takeAt(cnt).widget()
                        if widget is not None:
                            widget.deleteLater()
                except:
                    pass

                if MIndex==0:
                    spname["method"]="automated_signal"
                    self.SCtrlSig()
                    try:
                        del spname["angle_settings"], spname["elevation_azimuth"]
                    except:
                        pass
                elif MIndex==1:
                    self.SCtrlAng()
                    spname["method"]="automated_profile_angle"
                    try:
                        del spname["signal_settings"], spname["sensor"]
                    except:
                        pass
                elif MIndex==2:
                    self.SCtrlBoth()
                    spname["method"]="automated_profile_angle_signal"
                else:
                    self.SCtrlNone()
                self.WriteToFile()
        except:
            pass



    def SCtrlAng(self):
        if (self.imported or self.created) and (self.TabWinWGComBox.count()>0):
            self.TabWin2Grid3=QtGui.QGridLayout()
            self.TabWin1Grid.addLayout(self.TabWin2Grid3, 3,1,1,1)
            spacerItem = QtGui.QSpacerItem(20, 60, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Minimum)
            self.TabWin2Grid3.addItem(spacerItem, 0, 0, 1, 1)
            number=self.TabWinShadeTbl.rowCount()
            index=self.TabWinSPNComBox.currentIndex()
            WGIndex=self.TabWinWGComBox.currentIndex()
            spname=self.tempdata["spaces"][index]["window_groups"][WGIndex]["shade_control"]
            spname["method"]="automated_profile_angle"
            try:
                if self.sdeleteang!=-1:
                    del spname["angle_settings"][self.sdeleteang]
                    self.sdeleteang=-1
                self.WriteToFile()
            except:
                pass
            self.TabWinAngCLbl=QtGui.QLabel(self.TabWin)
            self.TabWin2Grid3.addWidget(self.TabWinAngCLbl, 1,0,1,1)
            self.TabWinAngCLbl.setText("Angle Control:")
            self.TabWinSElvLbl=QtGui.QLabel(self.TabWin)
            self.TabWin2Grid3.addWidget(self.TabWinSElvLbl, 2,1,1,1)
            self.TabWinSElvLbl.setText("Elevation Az:")
            self.TabWinSElvLbl.setFixedWidth(125)
            self.TabWinSElvLineEd=QtGui.QLineEdit(self.TabWin)
            self.TabWinSElvLineEd.setFixedWidth(100)
            self.TabWin2Grid3.addWidget(self.TabWinSElvLineEd,2,2,1,1)
            self.TabWinSElvLineEd.editingFinished.connect(self.elev)
            try:
                self.TabWinSElvLineEd.setText(str(spname["elevation_azimuth"]))
            except:
                pass
            self.TabWinSSetLbl=QtGui.QLabel(self.TabWin)
            self.TabWin2Grid3.addWidget(self.TabWinSSetLbl, 3,1,1,1)
            self.TabWinSSetLbl.setText("Settings:")
            self.TabWinSSetLbl.setAlignment(QtCore.Qt.AlignTop)
            self.TabWinAngTbl=QtGui.QTableWidget(self.TabWin)
            self.TabWin2Grid3.addWidget(self.TabWinAngTbl, 3,2,1,1)
            self.TabWinAngTbl.setFixedHeight(80)
            self.TabWinAngTbl.setColumnCount(number)
            self.TabWinAngTbl.setRowCount(1)
            for i in range(number):
                item = QtGui.QTableWidgetItem()
                self.TabWinAngTbl.setHorizontalHeaderItem(i,item)
                text="Angle "+str(i+1)
                item.setText(text)
                try:
                    angle=str(spname["angle_settings"][i])
                    item=self.tableitem(angle)
                    self.TabWinAngTbl.setItem(0,i,item)
                except:
                    pass
            spacerItem = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
            self.TabWin2Grid3.addItem(spacerItem, 4 ,3, 1, 1)
            self.TabWinAngTbl.cellChanged.connect(self.CtrlAngTbl)
            self.WriteToFile()

    def elev(self):
        index=self.TabWinSPNComBox.currentIndex()
        WGIndex=self.TabWinWGComBox.currentIndex()
        mark=0
        mark=self.intChk(self.TabWinSElvLineEd, -180, 180)
        if mark!=0:
            self.TabWinSElvLineEd.setText("0")
            self.TabWinSElvLineEd.setFocus()
        try:
            spname=self.tempdata["spaces"][index]["window_groups"][WGIndex]["shade_control"]
            spname["elevation_azimuth"]=int(self.TabWinSElvLineEd.text())
        except:
            spname=self.tempdata["spaces"][index]["window_groups"][WGIndex]["shade_control"]={}
            spname["elevation_azimuth"]=int(self.TabWinSElvLineEd.text())
        self.WriteToFile()

    def CtrlAngTbl(self):
        col = self.TabWinAngTbl.currentColumn()
        item=self.TabWinAngTbl.item(0,col)
        index=self.TabWinSPNComBox.currentIndex()
        WGIndex=self.TabWinWGComBox.currentIndex()
        try:
            spname=self.tempdata["spaces"][index]["window_groups"][WGIndex]["shade_control"]["angle_settings"]
        except:
            self.tempdata["spaces"][index]["window_groups"][WGIndex]["shade_control"]["angle_settings"]=[]
            spname=self.tempdata["spaces"][index]["window_groups"][WGIndex]["shade_control"]["angle_settings"]
        if self.TabWinAngTbl.isItemSelected(item):
            mark=0
            mark=self.intChk(item, 0,90)
            if mark!=0:
                item.setText("0")
                item.setFocus()
            try:
                spname[col]=int(item.text())
            except:
                for i in range(len(spname), col+1):
                    spname.append(0)
                spname[col]=int(item.text())
            item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.WriteToFile()


    def SCtrlSig(self):
        if (self.imported or self.created) and (self.TabWinWGComBox.count()>0):
            self.TabWin2Grid4=QtGui.QGridLayout()
            self.TabWin1Grid.addLayout(self.TabWin2Grid4, 4, 1,1,1)
            self.TabWinPSenLbl=QtGui.QLabel(self.TabWin)
            self.TabWin2Grid4.addWidget(self.TabWinPSenLbl, 0, 0, 1, 1)
            self.TabWinPSenLbl.setText("Photosensor:")
            self.TabWinSenTPLbl=QtGui.QLabel(self.TabWin)
            self.TabWin2Grid4.addWidget(self.TabWinSenTPLbl, 1, 1, 1, 1)
            self.TabWinSenTPLbl.setText("Sensor Type:")
            self.TabWinSenTPComBox=QtGui.QComboBox(self.TabWin)
            self.TabWin2Grid4.addWidget(self.TabWinSenTPComBox, 1, 2, 1, 1)
            self.TabWinSenTPComBox.addItem("Sensitivity File")
            self.TabWinSenTPComBox.addItem("Cosine")
            spacerItem = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
            self.TabWin2Grid4.addItem(spacerItem, 1, 4, 1, 1)
            self.TabWinSenFLbl=QtGui.QLabel(self.TabWin)
            self.TabWin2Grid4.addWidget(self.TabWinSenFLbl, 2, 1, 1, 1)
            self.TabWinSenFLbl.setText("Sensitivity File:")
            self.TabWinSenFLineEd=QtGui.QLineEdit(self.TabWin)
            self.TabWin2Grid4.addWidget(self.TabWinSenFLineEd, 2, 2, 1, 1)
            self.TabWinSenFBrwBtn=QtGui.QPushButton(self.TabWin)
            self.TabWin2Grid4.addWidget(self.TabWinSenFBrwBtn, 2, 3, 1, 1)
            self.TabWinSenFBrwBtn.setText("Browse")
            spacerItem = QtGui.QSpacerItem(20, 20, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Minimum)
            self.TabWin2Grid4.addItem(spacerItem, 3, 1, 1, 1)
            self.TabWinSenTPComBox.currentIndexChanged.connect(self.SenType)
            self.SenType()


    def SenType(self):
        self.TabWin2Grid5=QtGui.QGridLayout()
        self.TabWin1Grid.addLayout(self.TabWin2Grid5, 5, 1, 1, 1)
        spacerItem = QtGui.QSpacerItem(250, 20, QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Minimum)
        self.TabWin2Grid5.addItem(spacerItem, 0, 0, 1, 1)
        self.TabWinSenXLbl=QtGui.QLabel(self.TabWin)
        self.TabWin2Grid5.addWidget(self.TabWinSenXLbl, 0, 1, 1, 1)
        self.TabWinSenXLbl.setText("X:")
        self.TabWinSenXLineEd=QtGui.QLineEdit(self.TabWin)
        self.TabWin2Grid5.addWidget(self.TabWinSenXLineEd, 0, 2, 1, 1)
        self.TabWinSenXLineEd.setFixedWidth(50)
        self.TabWinSenYLbl=QtGui.QLabel(self.TabWin)
        self.TabWin2Grid5.addWidget(self.TabWinSenYLbl, 0, 3, 1, 1)
        self.TabWinSenYLbl.setText("Y:")
        self.TabWinSenYLineEd=QtGui.QLineEdit(self.TabWin)
        self.TabWin2Grid5.addWidget(self.TabWinSenYLineEd, 0, 4, 1, 1)
        self.TabWinSenYLineEd.setFixedWidth(50)
        self.TabWinSenZLbl=QtGui.QLabel(self.TabWin)
        self.TabWin2Grid5.addWidget(self.TabWinSenZLbl, 0, 5, 1, 1)
        self.TabWinSenZLbl.setText("Z:")
        self.TabWinSenZLineEd=QtGui.QLineEdit(self.TabWin)
        self.TabWin2Grid5.addWidget(self.TabWinSenZLineEd, 0, 6, 1, 1)
        self.TabWinSenZLineEd.setFixedWidth(50)
        spacerItem = QtGui.QSpacerItem(150, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        self.TabWin2Grid5.addItem(spacerItem, 0, 7, 1, 1)
        self.TabWinSenXDirLbl=QtGui.QLabel(self.TabWin)
        self.TabWin2Grid5.addWidget(self.TabWinSenXDirLbl, 1, 1, 1, 1)
        self.TabWinSenXDirLbl.setText("X Dir:")
        self.TabWinSenXDirLineEd=QtGui.QLineEdit(self.TabWin)
        self.TabWin2Grid5.addWidget(self.TabWinSenXDirLineEd, 1, 2, 1, 1)
        self.TabWinSenXDirLineEd.setFixedWidth(50)
        self.TabWinSenYDirLbl=QtGui.QLabel(self.TabWin)
        self.TabWin2Grid5.addWidget(self.TabWinSenYDirLbl, 1, 3, 1, 1)
        self.TabWinSenYDirLbl.setText("Y Dir:")
        self.TabWinSenYDirLineEd=QtGui.QLineEdit(self.TabWin)
        self.TabWin2Grid5.addWidget(self.TabWinSenYDirLineEd, 1, 4, 1, 1)
        self.TabWinSenYDirLineEd.setFixedWidth(50)
        self.TabWinSenZDirLbl=QtGui.QLabel(self.TabWin)
        self.TabWin2Grid5.addWidget(self.TabWinSenZDirLbl, 1, 5, 1, 1)
        self.TabWinSenZDirLbl.setText("Z Dir:")
        self.TabWinSenZDirLineEd=QtGui.QLineEdit(self.TabWin)
        self.TabWin2Grid5.addWidget(self.TabWinSenZDirLineEd, 1, 6, 1, 1)
        self.TabWinSenZDirLineEd.setFixedWidth(50)
        self.TabWinSenSpinLbl=QtGui.QLabel(self.TabWin)
        self.TabWin2Grid5.addWidget(self.TabWinSenSpinLbl, 2, 1, 1, 1)
        self.TabWinSenSpinLbl.setText("Spin:")
        self.TabWinSenSpinLineEd=QtGui.QLineEdit(self.TabWin)
        self.TabWinSenSpinLineEd.setFixedWidth(50)
        self.TabWin2Grid5.addWidget(self.TabWinSenSpinLineEd, 2, 2, 1, 1)
        number=self.TabWinShadeTbl.rowCount()
        index=self.TabWinSPNComBox.currentIndex()
        WGIndex=self.TabWinWGComBox.currentIndex()
        spname=self.tempdata["spaces"][index]["window_groups"][WGIndex]["shade_control"]
        self.TabWin2Grid6=QtGui.QGridLayout()
        self.TabWin1Grid.addLayout(self.TabWin2Grid6, 6, 1, 1, 1)
        spacerItem = QtGui.QSpacerItem(150, 20, QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Minimum)
        self.TabWin2Grid6.addItem(spacerItem, 0, 0, 1, 1)
        self.TabWinSigCLbl=QtGui.QLabel()
        self.TabWin2Grid6.addWidget(self.TabWinSigCLbl, 1,1,1,1)
        self.TabWinSigCLbl.setText("Settings:")
        self.TabWinSigTbl=QtGui.QTableWidget(self.TabWin)
        self.TabWin2Grid6.addWidget(self.TabWinSigTbl, 1,2,1,1)
        self.TabWinSigTbl.setFixedHeight(80)
        self.TabWinSigTbl.setColumnCount(number)
        self.TabWinSigTbl.setRowCount(1)
        for i in range(number):
            item = QtGui.QTableWidgetItem()
            self.TabWinSigTbl.setHorizontalHeaderItem(i,item)
            text="Signal "+str(i+1)
            item.setText(text)
            try:
                signal=str(spname["signal_settings"][i])
                item=self.tableitem(signal)
                self.TabWinSigTbl.setItem(0,i,item)
            except:
                pass
        spacerItem = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        self.TabWin2Grid6.addItem(spacerItem, 1 ,3, 1, 1)
        self.TabWinSigCLbl.setAlignment(QtCore.Qt.AlignTop)
        SenL=lambda: self.sctrldata(self.TabWinSenXLineEd,"x")
        self.TabWinSenXLineEd.editingFinished.connect(SenL)
        SenL=lambda: self.sctrldata(self.TabWinSenYLineEd,"y")
        self.TabWinSenYLineEd.editingFinished.connect(SenL)
        SenL=lambda: self.sctrldata(self.TabWinSenZLineEd,"z")
        self.TabWinSenZLineEd.editingFinished.connect(SenL)
        SenL=lambda: self.sctrldata(self.TabWinSenXDirLineEd,"xd")
        self.TabWinSenXDirLineEd.editingFinished.connect(SenL)
        SenL=lambda: self.sctrldata(self.TabWinSenYDirLineEd,"yd")
        self.TabWinSenYDirLineEd.editingFinished.connect(SenL)
        SenL=lambda: self.sctrldata(self.TabWinSenZDirLineEd,"zd")
        self.TabWinSenZDirLineEd.editingFinished.connect(SenL)
        SenL=lambda: self.sctrldata(self.TabWinSenSpinLineEd,"spin_ccw")
        self.TabWinSenSpinLineEd.editingFinished.connect(SenL)

        try:
            spname["sensor"]["location"]
        except:
            spname["sensor"]={}
            spname["sensor"]["location"]={}
        try:
            self.TabWinSenXLineEd.setText(str(spname["sensor"]["location"]["x"]))
        except:
            pass
        try:
            self.TabWinSenYLineEd.setText(str(spname["sensor"]["location"]["y"]))
        except:
            pass
        try:
            self.TabWinSenZLineEd.setText(str(spname["sensor"]["location"]["z"]))
        except:
            pass
        try:
            self.TabWinSenXDirLineEd.setText(str(spname["sensor"]["location"]["xd"]))
        except:
            pass
        try:
            self.TabWinSenYDirLineEd.setText(str(spname["sensor"]["location"]["yd"]))
        except:
            pass
        try:
            self.TabWinSenZDirLineEd.setText(str(spname["sensor"]["location"]["zd"]))
        except:
            pass
        try:
            self.TabWinSenSpinLineEd.setText(str(spname["sensor"]["location"]["spin_ccw"]))
        except:
            pass
        self.TabWinSigTbl.cellChanged.connect(self.CtrlSigTbl)
        self.TabWinSenFBrwBtn.clicked.connect(self.SFImport)


        if self.TabWinSenTPComBox.currentIndex()==0:
            self.TabWinSenFLineEd.setEnabled(1)
            self.TabWinSenFBrwBtn.setEnabled(1)
            self.TabWinSenFLineEd.setReadOnly(1)
            try:
                self.TabWinSenFLineEd.setText(str(spname["sensor"]["sensor_file"]))
            except:
                pass
        else:
            self.TabWinSenFLineEd.setDisabled(1)
            self.TabWinSenFLineEd.clear()
            self.TabWinSenFBrwBtn.setDisabled(1)
            index=self.TabWinSPNComBox.currentIndex()
            WGIndex=self.TabWinWGComBox.currentIndex()
            self.tempdata["spaces"][index]["window_groups"][WGIndex]["shade_control"]["sensor"]["sensor_type"]="cosine"
            try:
                del self.tempdata["spaces"][index]["window_groups"][WGIndex]["shade_control"]["sensor"]["sensor_file"]
            except:
                pass
        self.WriteToFile()


    def SFImport(self):
        if self.imported or self.created:
            SFile= QtGui.QFileDialog.getOpenFileName(self,"Import Sensor File","C:/","Sensor File (*.sen)")
            if SFile:
                index=self.TabWinSPNComBox.currentIndex()
                WGIndex=self.TabWinWGComBox.currentIndex()
                try:
                    spname=self.tempdata["spaces"][index]["window_groups"][WGIndex]["shade_control"]["sensor"]
                except:
                    self.tempdata["spaces"][index]["window_groups"][WGIndex]["shade_control"]["sensor"]={}
                    spname=self.tempdata["spaces"][index]["window_groups"][WGIndex]["shade_control"]["sensor"]

                spname["sensor_type"]="sensitivity_file"
                SPath=os.path.join(self.dir,self.tempdata["spaces"][index]["input_directory"])
                SLine=self.CopyFile(SFile,SPath)
                SPath=os.path.join(self.dir)
                SSLine=self.CopyFile(SFile,SPath)
                self.TabWinSenFLineEd.setText(os.path.basename(SLine))
                spname["sensor_file"]=os.path.basename(str(SLine))
                self.WriteToFile()

    def CtrlSigTbl(self):
        col = self.TabWinSigTbl.currentColumn()
        item=self.TabWinSigTbl.item(0,col)
        index=self.TabWinSPNComBox.currentIndex()
        WGIndex=self.TabWinWGComBox.currentIndex()
        try:
            spname=self.tempdata["spaces"][index]["window_groups"][WGIndex]["shade_control"]["signal_settings"]
        except:
            self.tempdata["spaces"][index]["window_groups"][WGIndex]["shade_control"]["signal_settings"]=[]
            spname=self.tempdata["spaces"][index]["window_groups"][WGIndex]["shade_control"]["signal_settings"]
        if self.TabWinSigTbl.isItemSelected(item):
            try:
                spname[col]=int(item.text())
                item.setTextAlignment(QtCore.Qt.AlignCenter)
                self.WriteToFile()
            except:
                try:
                    for i in range(col+1):
                        try:
                            spname[i]
                        except:
                            spname.append(0)
                    spname[col]=int(item.text())
                    item.setTextAlignment(QtCore.Qt.AlignCenter)
                    self.WriteToFile()
                except:
                    QtGui.QMessageBox.warning(self,"Error","Error! Wrong Entry!")
                    item.setText("0")


    def SCtrlBoth(self):
        self.SCtrlAng()
        self.SCtrlSig()

    def SCtrlNone(self):
        if (self.imported or self.created) and (self.TabWinWGComBox.count()>0):
            index=self.TabWinSPNComBox.currentIndex()
            WGIndex=self.TabWinWGComBox.currentIndex()
            del self.tempdata["spaces"][index]["window_groups"][WGIndex]["shade_control"]

    def sctrldata(self, object, key):

        mark=0
        index=self.TabWinSPNComBox.currentIndex()
        WGIndex=self.TabWinWGComBox.currentIndex()
        try:
            spname=self.tempdata["spaces"][index]["window_groups"][WGIndex]["shade_control"]["sensor"]
            mark=self.floatChk(object)
            if mark!=0:
                object.setText("0")
                object.setFocus()
            try:
                spname["location"][key]=float(object.text())
            except:
                spname["location"]={}
                spname["location"][key]=float(object.text())
            self.WriteToFile()
        except:
            pass

    def TabElecLoad(self):
        if self.imported or self.created:
            try:
                index=self.TabElecSPComBox.currentIndex()
                self.TabElecLayerCbx.clear()
                try:
                    spname=self.tempdata["spaces"][index]
                except:
                    pass
                self.layer=[]
                try:
                    WGMatPath=os.path.normpath(os.path.join(self.dir,spname["geometry_directory"],spname["material_file"]))
                    WGMatFile=open(WGMatPath,"r").read().split()
                    count=0
                    for item in WGMatFile:
                        if item=="void":
                            self.layer.append(WGMatFile[count+2])
                        count=count+1

                except:
                    pass

                try:
                    WGMatPath=os.path.normpath(os.path.join(self.dir,spname["geometry_directory"],spname["geometry_file"]))
                    WGMatFile=open(WGMatPath,"r").read().split()
                    count=0
                    for item in WGMatFile:
                        if item=="void":
                            self.layer.append(WGMatFile[count+2])
                        count=count+1
                except:
                    pass

                try:
                    for item in self.layer:
                        self.TabElecLayerCbx.addItem(item)
                except:
                    pass




                spname=self.tempdata["spaces"][index]["control_zones"]
                self.TabElecInfoTable.setRowCount(0)
                self.TabElecZoneCombox.clear()
                for i in range(len(spname)):
                    self.TabElecInfoTable.insertRow(self.TabElecInfoTable.rowCount())
                    self.TabElecInfoTable.setRowHeight(i,40)
                    self.ies=QtGui.QPushButton(self.TabElec)
                    self.TabElecInfoTable.setCellWidget(i,1,self.ies)
                    self.ies.clicked.connect(self.elecies)
                    ctrlTP=QtGui.QComboBox(self.TabElec)
                    ctrlTP.addItem("linear dimming")
                    ctrlTP.addItem("non dimming")
                    self.TabElecInfoTable.setCellWidget(i,8,ctrlTP)
                    ctrlTP.currentIndexChanged.connect(self.ctrltype)
                    try:
                        self.TabElecZoneCombox.addItem(spname[i]["name"])
                        zoneName=spname[i]["name"]
                        item=self.tableitem(zoneName)
                        self.TabElecInfoTable.setItem(i,0,item)
                        iesFile=spname[i]["luminaire_information"]["ies_file"]
                        self.ies.setText(str(iesFile))
                        lampLumens=spname[i]["luminaire_information"]["lamp_lumens"]
                        item=self.tableitem(lampLumens)
                        self.TabElecInfoTable.setItem(i,2,item)
                        LLF=spname[i]["luminaire_information"]["LLF"]
                        item=self.tableitem(LLF)
                        self.TabElecInfoTable.setItem(i,3,item)
                        controlType=spname[i]["ballast_driver_information"]["ballast_type"]
                        if controlType=="linear_dimming":
                            ctrlTP.setCurrentIndex(0)
                            bfmin=spname[i]["ballast_driver_information"]["bf_min"]
                            item=self.tableitem(bfmin)
                            self.TabElecInfoTable.setItem(i,4,item)
                            bfmax=spname[i]["ballast_driver_information"]["bf_max"]
                            item=self.tableitem(bfmax)
                            self.TabElecInfoTable.setItem(i,5,item)
                            pwmin=spname[i]["ballast_driver_information"]["watts_min"]
                            item=self.tableitem(pwmin)
                            self.TabElecInfoTable.setItem(i,6,item)
                            pwmax=spname[i]["ballast_driver_information"]["watts_max"]
                            item=self.tableitem(pwmax)
                            self.TabElecInfoTable.setItem(i,7,item)
                        else:
                            ctrlTP.setCurrentIndex(1)
                            bf=spname[i]["ballast_driver_information"]["ballast_factor"]
                            item=self.tableitem(bf)
                            self.TabElecInfoTable.setItem(i,5,item)
                            pw=spname[i]["ballast_driver_information"]["watts"]
                            item=self.tableitem(pw)
                            self.TabElecInfoTable.setItem(i,7,item)
                    except:
                        pass
                    ZoneDeleteBtn = QtGui.QPushButton()
                    ZoneDeleteBtn.setText("Delete")
                    ZoneDeleteBtn.clicked.connect(self.ElecZDel)
                    self.TabElecInfoTable.setCellWidget(i,9,ZoneDeleteBtn)
                self.TabElecZoneCombox.setCurrentIndex(0)
            except:
                self.TabElecInfoTable.setRowCount(0)
                self.TabElecZoneCombox.clear()


    def ElecLOLoad(self):
        if self.imported or self.created:
            index=self.TabElecSPComBox.currentIndex()
            zindex=self.TabElecZoneCombox.currentIndex()
            try:
                spname=self.tempdata["spaces"][index]["control_zones"][zindex]
            except:
                pass
            self.TabElecLayoutTable.setRowCount(0)
            try:
                for luminaire in spname["luminaire_layout"]:
                    self.TabElecLayoutTable.insertRow(self.TabElecLayoutTable.rowCount())
                    count=self.TabElecLayoutTable.rowCount()-1
                    self.TabElecLayoutTable.setRowHeight(count,40)
                    try:
                        ZN=QtGui.QComboBox()
                        for j in range(len(self.tempdata["spaces"][index]["control_zones"])):
                            try:
                                ZN.addItem(str(self.tempdata["spaces"][index]["control_zones"][j]["name"]))
                            except:
                                pass
                        self.TabElecLayoutTable.setCellWidget(count,0,ZN)
                        ZN.setCurrentIndex(zindex)
                        ZN.currentIndexChanged.connect(self.LOZNCombo)
                        lumx=luminaire["x"]
                        item=self.tableitem(lumx)
                        self.TabElecLayoutTable.setItem(count,1, item)
                        lumy=luminaire["y"]
                        item=self.tableitem(lumy)
                        self.TabElecLayoutTable.setItem(count,2, item)
                        lumz=luminaire["z"]
                        item=self.tableitem(lumz)
                        self.TabElecLayoutTable.setItem(count,3, item)
                    except:
                        pass
                    try:
                        lumrot=luminaire["rotation"]
                        item=self.tableitem(lumrot)
                        self.TabElecLayoutTable.setItem(count,4, item)
                    except:
                        pass
                    try:
                        lumspin=luminaire["spin_ccw"]
                        item=self.tableitem(lumspin)
                        self.TabElecLayoutTable.setItem(count,5, item)
                    except:
                        pass
                    try:
                        lumtilt=luminaire["tilt"]
                        item=self.tableitem(lumtilt)
                        self.TabElecLayoutTable.setItem(count,6, item)
                    except:
                        pass
                    LumDeleteBtn = QtGui.QPushButton()
                    LumDeleteBtn.setText("Delete")
                    LumDeleteBtn.clicked.connect(self.LumDel)
                    self.TabElecLayoutTable.setCellWidget(count,7,LumDeleteBtn)
            except:
                pass

    def InfoChange(self):
        col = self.TabElecInfoTable.currentColumn()
        row = self.TabElecInfoTable.currentRow()
        item=self.TabElecInfoTable.item(row,col)
        index=self.TabElecSPComBox.currentIndex()
        spname=self.tempdata["spaces"][index]["control_zones"]

        if self.TabElecInfoTable.isItemSelected(item):
            if col==0:
                spname[row]["name"]=str(item.text())
                self.WriteToFile()
                self.TabElecLoad()
                self.TabCtrlLoad()
            elif col==2:
                mark=0
                mark=self.intChk(item, 0,10000000000000000)
                if mark==0:
                    try:
                        spname[row]["luminaire_information"]["lamp_lumens"]=int(item.text())
                    except:
                        spname[row]["luminaire_information"]={}
                        spname[row]["luminaire_information"]["lamp_lumens"]=int(item.text())
                else:
                    item.setText("0")
                    item.setFocus()
                item.setTextAlignment(QtCore.Qt.AlignCenter)
            elif col==3:
                mark=0
                mark=self.floatChk(item, 0,1)
                if mark==0:
                    try:
                        spname[row]["luminaire_information"]["LLF"]=float(item.text())
                    except:
                        spname[row]["luminaire_information"]={}
                        spname[row]["luminaire_information"]["LLF"]=float(item.text())
                else:
                    item.setText("1")
                    item.setFocus()
                item.setTextAlignment(QtCore.Qt.AlignCenter)
            elif col==4:
                mark=0
                try:
                    wdg=self.TabElecInfoTable.cellWidget(row,8)
                    if wdg.currentIndex()==0:
                        mark=self.floatChk(item, 0,1)
                        if mark==0:
                            spname[row]["ballast_driver_information"]["bf_min"]=float(item.text())
                        else:
                            item.setText("0")
                            item.setFocus()
                    else:
                        item.setText("")
                except:
                    wdg=self.TabElecInfoTable.cellWidget(row,8)
                    if wdg.currentIndex()==0:
                        mark=self.floatChk(item, 0,1)
                        if mark==0:
                            spname[row]["ballast_driver_information"]={}
                            spname[row]["ballast_driver_information"]["bf_min"]=float(item.text())
                        else:
                            item.setText("0")
                            item.setFocus()
                    else:
                        item.setText(" ")
                item.setTextAlignment(QtCore.Qt.AlignCenter)
            elif col==5:
                mark=0
                try:
                    wdg=self.TabElecInfoTable.cellWidget(row,8)
                    mark=0
                    if wdg.currentIndex()==0:
                        mark=self.floatChk(item, 0,1)
                        if mark==0:
                            spname[row]["ballast_driver_information"]["bf_max"]=float(item.text())
                        else:
                            item.setText("0")
                            item.setFocus()
                    else:
                        mark=self.floatChk(item, 0,1)
                        if mark==0:
                            spname[row]["ballast_driver_information"]["ballast_factor"]=float(item.text())
                        else:
                            item.setText("0")
                            item.setFocus()
                except:
                    if wdg.currentIndex()==0:
                        mark=self.floatChk(item, 0,1)
                        if mark==0:
                            spname[row]["ballast_driver_information"]={}
                            spname[row]["ballast_driver_information"]["bf_max"]=float(item.text())
                        else:
                            item.setText("0")
                            item.setFocus()
                    else:
                        mark=self.floatChk(item, 0,1)
                        if mark==0:
                            spname[row]["ballast_driver_information"]={}
                            spname[row]["ballast_driver_information"]["ballast_factor"]=float(item.text())
                        else:
                            item.setText("0")
                            item.setFocus()
                item.setTextAlignment(QtCore.Qt.AlignCenter)
            elif col==6:
                mark=0

                try:
                    wdg=self.TabElecInfoTable.cellWidget(row,8)
                    if wdg.currentIndex()==0:
                        mark=self.intChk(item, 0,100000000000000)
                        if mark==0:
                            spname[row]["ballast_driver_information"]["watts_min"]=int(item.text())
                        else:
                            item.setText("0")
                            item.setFocus()
                    else:
                        item.setText(" ")
                except:
                    wdg=self.TabElecInfoTable.cellWidget(row,8)
                    if wdg.currentIndex()==0:
                        mark=self.intChk(item, 0,100000000000000)
                        if mark==0:
                            spname[row]["ballast_driver_information"]={}
                            spname[row]["ballast_driver_information"]["watts_min"]=int(item.text())
                        else:
                            item.setText("0")
                            item.setFocus()
                    else:
                        item.setText(" ")
                item.setTextAlignment(QtCore.Qt.AlignCenter)
            elif col==7:
                mark=0
                try:
                    wdg=self.TabElecInfoTable.cellWidget(row,8)
                    if wdg.currentIndex()==0:
                        mark=self.intChk(item, 0,100000000000000)
                        if mark==0:
                            spname[row]["ballast_driver_information"]["watts_max"]=int(item.text())
                        else:
                            item.setText("0")
                    else:
                        mark=self.intChk(item, 0,100000000000000)
                        if mark==0:
                            spname[row]["ballast_driver_information"]["watts"]=int(item.text())
                        else:
                            item.setText("0")
                            item.setFocus()
                except:
                    wdg=self.TabElecInfoTable.cellWidget(row,8)
                    if wdg.currentIndex()==0:
                        mark=self.intChk(item, 0,100000000000000)
                        if mark==0:
                            spname[row]["ballast_driver_information"]={}
                            spname[row]["ballast_driver_information"]["watts_max"]=int(item.text())
                        else:
                            item.setText("0")
                            item.setFocus()
                    else:
                        mark=self.intChk(item, 0,100000000000000)
                        if mark==0:
                            spname[row]["ballast_driver_information"]={}
                            spname[row]["ballast_driver_information"]["watts"]=int(item.text())
                        else:
                            item.setText("0")
                            item.setFocus()
                item.setTextAlignment(QtCore.Qt.AlignCenter)
            self.WriteToFile()

    def elecies(self):
        button = self.sender()
        item = self.TabElecInfoTable.itemAt(button.pos())
        index=self.TabElecSPComBox.currentIndex()
        bindex = self.TabElecInfoTable.indexAt(button.pos())
        widget=self.TabElecInfoTable.cellWidget(bindex.row(),bindex.column())
        iesFile=QtGui.QFileDialog.getOpenFileName(self,"Import IES File","C:/","IES File (*.ies)")
        if iesFile:
            IESPath=os.path.join(self.dir,self.tempdata["spaces"][index]["ies_directory"])
            IESLine=self.CopyFile(iesFile,IESPath)
            widget.setText(str(os.path.basename(IESLine)))
            spname=self.tempdata["spaces"][index]["control_zones"][bindex.row()]
            spname["luminaire_information"]["ies_file"]=str(os.path.basename(IESLine))
        self.WriteToFile()

    def ctrltype(self):
        button = self.sender()
        item = self.TabElecInfoTable.itemAt(button.pos())
        index=self.TabElecSPComBox.currentIndex()
        bindex = self.TabElecInfoTable.indexAt(button.pos())
        widget=self.TabElecInfoTable.cellWidget(bindex.row(),bindex.column())
        cindex=widget.currentIndex()
        spname=self.tempdata["spaces"][index]["control_zones"][bindex.row()]
        if cindex==0:
            spname["ballast_driver_information"]["ballast_type"]="linear_dimming"
            try:
                spname["ballast_driver_information"]["bf_max"]=spname["ballast_driver_information"]["ballast_factor"]
                del spname["ballast_driver_information"]["ballast_factor"]
            except:
                pass
            try:
                spname["ballast_driver_information"]["watts_max"]=spname["ballast_driver_information"]["watts"]
                del spname["ballast_driver_information"]["watts"]
            except:
                pass

        elif cindex==1:
            spname["ballast_driver_information"]["ballast_type"]="non_dimming"
            try:
                del spname["ballast_driver_information"]["bf_min"]
            except:
                pass
            try:
                spname["ballast_driver_information"]["ballast_factor"]=spname["ballast_driver_information"]["bf_max"]
                del spname["ballast_driver_information"]["bf_max"]
            except:
                pass
            try:
                del spname["ballast_driver_information"]["watts_min"]
            except:
                pass
            try:
                spname["ballast_driver_information"]["watts"]=spname["ballast_driver_information"]["watts_max"]
                del spname["ballast_driver_information"]["watts_max"]
            except:
                pass
            try:
                self.TabElecInfoTable.item(bindex.row(),4).setText(" ")
                self.TabElecInfoTable.item(bindex.row(),6).setText(" ")
            except:
                pass
        self.WriteToFile()


    def ElecZDel(self):
        button = self.sender()
        item = self.TabElecInfoTable.itemAt(button.pos())
        index=self.TabElecSPComBox.currentIndex()
        bindex = self.TabElecInfoTable.indexAt(button.pos())
        widget=self.TabElecInfoTable.cellWidget(bindex.row(),bindex.column())
        choice=QtGui.QMessageBox.question(self,"Warning", "Are you sure to delete the whole zone? \n"
                                                             "You can move luminaires to other zones before deleting.", \
                                              QtGui.QMessageBox.Yes |QtGui.QMessageBox.No)
        if choice==QtGui.QMessageBox.Yes:
            del self.tempdata["spaces"][index]["control_zones"][bindex.row()]
            self.WriteToFile()
            self.TabElecLoad()
            self.TabCtrlLoad()


    def ElecInfoAdd(self):
        if self.imported or self.created:
            count=self.TabElecInfoTable.rowCount()
            self.TabElecInfoTable.setRowCount(count+1)
            self.TabElecInfoTable.setRowHeight(count,40)
            ZoneDeleteBtn = QtGui.QPushButton()
            ZoneDeleteBtn.setText("Delete")
            ZoneDeleteBtn.clicked.connect(self.ElecZDel)
            self.TabElecInfoTable.setCellWidget(count,9,ZoneDeleteBtn)
            index=self.TabElecSPComBox.currentIndex()
            try:
                spname=self.tempdata["spaces"][index]["control_zones"]
                spname.append({})
            except:
                self.tempdata["spaces"][index]["control_zones"]=[]
                spname=self.tempdata["spaces"][index]["control_zones"]
                spname.append({})
            cindex=len(spname)-1
            spname[cindex]["luminaire_information"]={}
            spname[cindex]["ballast_driver_information"]={}
            spname[cindex]["ballast_driver_information"]["ballast_type"]="linear_dimming"
            spname[cindex]["luminaire_layout"]=[]
            self.WriteToFile()
            self.TabElecLoad()
            self.TabElecInfoTable.scrollToBottom()

    def ElecZoneCopy(self):
        if (self.imported or self.created):
            try:
                Dupcombo=DupUi_Combo()
                for item in self.tempdata["spaces"]:
                    Dupcombo.cboxsp.addItem(item["space_name"])
                Dupcombo.show()
                Dupcombo.exec_()
                index=self.TabElecSPComBox.currentIndex()
                cindex, zindex=Dupcombo.id
                try:
                    self.tempdata["spaces"][index]["control_zones"].append({})
                except:
                    self.tempdata["spaces"][index]["control_zones"]=[]
                    self.tempdata["spaces"][index]["control_zones"].append({})
                lenc=len(self.tempdata["spaces"][index]["control_zones"])
                self.tempdata["spaces"][index]["control_zones"][lenc-1]["name"]=self.tempdata["spaces"][cindex]["control_zones"][zindex]["name"]
                self.tempdata["spaces"][index]["control_zones"][lenc-1]["luminaire_information"]=self.tempdata["spaces"][cindex]["control_zones"][zindex]["luminaire_information"]
                self.tempdata["spaces"][index]["control_zones"][lenc-1]["ballast_driver_information"]=self.tempdata["spaces"][cindex]["control_zones"][zindex]["ballast_driver_information"]
                self.tempdata["spaces"][index]["control_zones"][lenc-1]["luminaire_layout"]=[]
                QtGui.QMessageBox.information(self,"Successful", "Luminaire information is copied to %s successfully" %self.tempdata["spaces"][cindex]["space_name"])
                self.WriteToFile()
                self.TabElecLoad()
            except:
                pass

    def LOChange(self):
        col = self.TabElecLayoutTable.currentColumn()
        row = self.TabElecLayoutTable.currentRow()
        item=self.TabElecLayoutTable.item(row,col)
        index=self.TabElecSPComBox.currentIndex()
        zindex=self.TabElecZoneCombox.currentIndex()
        if self.TabElecLayoutTable.isItemSelected(item):
            try:
                spname=self.tempdata["spaces"][index]["control_zones"][zindex]["luminaire_layout"][row]
            except:
                self.tempdata["spaces"][index]["control_zones"][zindex]["luminaire_layout"].append({})
                spname=self.tempdata["spaces"][index]["control_zones"][zindex]["luminaire_layout"][row]
            if col==1:
                mark=0
                mark=self.floatChk(item)
                if mark==0:
                    spname["x"]=float(item.text())
                else:
                    item.setText("0")
                    item.setFocus()
            elif col==2:
                mark=0
                mark=self.floatChk(item)
                if mark==0:
                    spname["y"]=float(item.text())
                else:
                    item.setText("0")
                    item.setFocus()
            elif col==3:
                mark=0
                mark=self.floatChk(item)
                if mark==0:
                    spname["z"]=float(item.text())
                else:
                    item.setText("0")
                    item.setFocus()
            elif col==4:
                mark=0
                mark=self.intChk(item)
                if mark==0:
                    spname["rotation"]=int(item.text())
                else:
                    item.setText("0")
                    item.setFocus()
            elif col==5:
                mark=0
                mark=self.intChk(item)
                if mark==0:
                    spname["tilt"]=int(item.text())
                else:
                    item.setText("0")
                    item.setFocus()
            elif col==6:
                mark=0
                mark=self.intChk(item)
                if mark==0:
                    spname["spin_ccw"]=int(item.text())
                else:
                    item.setText("0")
                    item.setFocus()
            self.WriteToFile()

    def LOZNCombo(self):
        button = self.sender()
        item = self.TabElecLayoutTable.itemAt(button.pos())
        index=self.TabElecSPComBox.currentIndex()
        zindex=self.TabElecZoneCombox.currentIndex()
        bindex = self.TabElecLayoutTable.indexAt(button.pos())
        widget=self.TabElecLayoutTable.cellWidget(bindex.row(),bindex.column())
        cindex=widget.currentIndex()
        spname=self.tempdata["spaces"][index]["control_zones"]
        temp=spname[zindex]["luminaire_layout"][bindex.row()]
        del spname[zindex]["luminaire_layout"][bindex.row()]
        try:
            spname[cindex]["luminaire_layout"].append(temp)
        except:
            spname[cindex]["luminaire_layout"]=[]
            spname[cindex]["luminaire_layout"].append(temp)
        self.WriteToFile()
        self.ElecLOLoad()


    def ElecLOAdd(self):
        if (self.imported or self.created) and self.TabElecInfoTable.rowCount()>0:
            count=self.TabElecLayoutTable.rowCount()
            index=self.TabElecSPComBox.currentIndex()
            spname=self.tempdata["spaces"][index]["control_zones"]
            zindex=self.TabElecZoneCombox.currentIndex()
            try:
                spname[zindex]["luminaire_layout"].append({})
            except:
                spname[zindex]["luminaire_layout"]=[]
                spname[zindex]["luminaire_layout"].append({})
            lum=len(spname[zindex]["luminaire_layout"])-1
            spname[zindex]["luminaire_layout"][lum]["x"]=0
            spname[zindex]["luminaire_layout"][lum]["y"]=0
            spname[zindex]["luminaire_layout"][lum]["z"]=0
            spname[zindex]["luminaire_layout"][lum]["rotation"]=0
            spname[zindex]["luminaire_layout"][lum]["spin_ccw"]=0
            spname[zindex]["luminaire_layout"][lum]["tilt"]=0
            self.ElecLOLoad()
            self.TabElecLayoutTable.scrollToBottom()
            self.WriteToFile()


    def LumDel(self):
        button = self.sender()
        item = self.TabElecLayoutTable.itemAt(button.pos())
        index=self.TabElecSPComBox.currentIndex()
        bindex = self.TabElecLayoutTable.indexAt(button.pos())
        widget=self.TabElecLayoutTable.cellWidget(bindex.row(),bindex.column())
        zindex=self.TabElecZoneCombox.currentIndex()
        choice=QtGui.QMessageBox.question(self,"Warning", "Are you sure to delete the luminaire?", \
                                              QtGui.QMessageBox.Yes |QtGui.QMessageBox.No)
        if choice==QtGui.QMessageBox.Yes:
            del self.tempdata["spaces"][index]["control_zones"][zindex]["luminaire_layout"][bindex.row()]
            self.WriteToFile()
            self.ElecLOLoad()

    def LumDpLayer(self):
        if self.imported or self.created:
            self.dplayer=self.TabElecLayerCbx.currentText()

    def TabCtrlLoad(self):
        if self.imported or self.created:
            try:
                index=self.TabCtrlSPNComBox.currentIndex()
                spname=self.tempdata["spaces"][index]["control_zones"]
                self.TabCtrlCtrlZComBox.clear()
                try:
                    self.TabCtrlTgtIllLineEd.setText(str(self.tempdata["spaces"][index]["target_illuminance"]))
                except:
                    self.TabCtrlTgtIllLineEd.setText("")
                for i in range(len(spname)):
                    try:
                        self.TabCtrlCtrlZComBox.addItem(spname[i]["name"])
                    except:
                        pass
                self.TabCtrlCtrlZComBox.setCurrentIndex(0)
            except:
                self.TabCtrlCtrlZComBox.clear()
                self.TabCtrlOptCComBox.setDisabled(1)
                self.TabCtrlTgtPctgLineEd.clear()
                self.TabCtrlTgtPctgLineEd.setDisabled(1)
                self.TabCtrlCPMtdComBox.setDisabled(1)
                self.TabCtrlQtyComBox.setDisabled(1)
                self.TabCtrlEPtsLineEd.setDisabled(1)
                self.ElecCtrlAlg()



    def ElecCtrlZ(self):
        index=self.TabCtrlSPNComBox.currentIndex()
        zindex=self.TabCtrlCtrlZComBox.currentIndex()
        try:
            spname=self.tempdata["spaces"][index]["control_zones"][zindex]
        except:
            pass
        try:
            if spname["ballast_driver_information"]["ballast_type"]=="non_dimming":
                self.TabCtrlOptCComBox.setCurrentIndex(1)
                self.TabCtrlOptCComBox.setDisabled(1)
            else:
                self.TabCtrlOptCComBox.setEnabled(1)
        except:
            pass
        try:
            self.TabCtrlTgtPctgLineEd.setText(str(spname["target_percentage"]))
        except:
            self.TabCtrlTgtPctgLineEd.setText("0")
            try:
                spname["target_percentage"]=0
            except:
                pass
            self.WriteToFile()
        try:
            if spname["cp_method"]=="auto":
                self.TabCtrlCPMtdComBox.setCurrentIndex(0)
            elif spname["cp_method"]=="manual":
                self.TabCtrlCPMtdComBox.setCurrentIndex(1)
        except:
            self.TabCtrlCPMtdComBox.setCurrentIndex(0)
            try:
                spname["cp_method"]="auto"
            except:
                pass
            self.WriteToFile()
        try:
            for j in range(5):
                if j+1==spname["quantity"]:
                    self.TabCtrlQtyComBox.setCurrentIndex(j)
        except:
            self.TabCtrlQtyComBox.setCurrentIndex(1)
            try:
                spname["quantity"]=2
            except:
                pass
            self.WriteToFile()
        try:
            self.TabCtrlEPtsLineEd.setText(spname["excluded_points"])
        except:
            try:
                spname["excluded_points"]="null"
            except:
                pass
            self.WriteToFile()
            self.TabCtrlEPtsLineEd.setText("null")
        try:
            if spname["optimum_control"]=="dim_to_min":
                self.TabCtrlOptCComBox.setCurrentIndex(0)
            elif spname["optimum_control"]=="on":
                self.TabCtrlOptCComBox.setCurrentIndex(1)
        except:
            self.TabCtrlOptCComBox.setCurrentIndex(1)
            try:
                spname["optimum_control"]="on"
            except:
                pass

    def Tgt(self):
         if self.imported or self.created:
            try:
                index=self.TabCtrlSPNComBox.currentIndex()
                self.tempdata["spaces"][index]["target_illuminance"]=int(self.TabCtrlTgtIllLineEd.text())
                self.WriteToFile()
            except:
                pass

    def TgtPctg(self):
        if self.imported or self.created:
            index=self.TabCtrlSPNComBox.currentIndex()
            i=self.TabCtrlCtrlZComBox.currentIndex()
            mark=0
            mark=self.floatChk(self.TabCtrlTgtPctgLineEd, 0,1)
            if mark==0:
                spname=self.tempdata["spaces"][index]["control_zones"][i]
                spname["target_percentage"]=float(self.TabCtrlTgtPctgLineEd.text())
            else:
                self.TabCtrlTgtPctgLineEd.setText("0.1")
                self.TabCtrlTgtPctgLineEd.setFocus()
            self.WriteToFile()

    def CPMtd(self):
        if self.imported or self.created:
            try:
                index=self.TabCtrlSPNComBox.currentIndex()
                i=self.TabCtrlCtrlZComBox.currentIndex()
                spname=self.tempdata["spaces"][index]["control_zones"][i]
                if self.TabCtrlCPMtdComBox.currentIndex()==0:
                    spname["cp_method"]="auto"
                self.WriteToFile()
            except:
                pass

    def CPExclude(self):
        if self.imported or self.created:
            SFile= QtGui.QFileDialog.getOpenFileName(self,"Import Points File","C:/","Points File (*.pts)")
            if SFile:
                index=self.TabCtrlSPNComBox.currentIndex()
                CIndex=self.TabCtrlCtrlZComBox.currentIndex()
                spname=self.tempdata["spaces"][index]["control_zones"][CIndex]
                SPath=os.path.join(self.dir,self.tempdata["spaces"][index]["input_directory"])
                SLine=self.CopyFile(SFile,SPath)
                self.TabCtrlEPtsLineEd.setText(os.path.basename(SLine))
                spname["excluded_points"]=os.path.basename(str(SLine))
                self.WriteToFile()

    def CPQty(self):
        if self.imported or self.created:
            try:
                index=self.TabCtrlSPNComBox.currentIndex()
                spname=self.tempdata["spaces"][index]["control_zones"]
                qindex=self.TabCtrlQtyComBox.currentIndex()
                i=self.TabCtrlCtrlZComBox.currentIndex()
                if qindex!=5:
                    spname[i]["quantity"]=qindex+1
                self.WriteToFile()
            except:
                pass


    def ElecCtrlAlg(self):
        if self.imported or self.created:
            try:
                index=self.TabCtrlSPNComBox.currentIndex()
                zindex=self.TabCtrlCtrlZComBox.currentIndex()
                spname=self.tempdata["spaces"][index]["control_zones"][zindex]
                try:
                    for cnt in reversed(range(self.TabCtrl2Grid2.count())):
                        widget = self.TabCtrl2Grid2.takeAt(cnt).widget()
                        if widget is not None:
                            widget.deleteLater()
                except:
                    pass
                try:
                    for cnt in reversed(range(self.TabCtrl3Grid.count())):
                        widget = self.TabCtrl3Grid.takeAt(cnt).widget()
                        if widget is not None:
                            widget.deleteLater()
                except:
                    pass
                try:
                    for cnt in reversed(range(self.TabCtrl3Grid1.count())):
                        widget = self.TabCtrl3Grid1.takeAt(cnt).widget()
                        if widget is not None:
                            widget.deleteLater()
                except:
                    pass
                try:
                    if spname["ballast_driver_information"]["ballast_type"]=="non_dimming":
                        self.TabCtrlOptCComBox.setCurrentIndex(1)
                        self.TabCtrlOptCComBox.setDisabled(1)
                    else:
                        self.TabCtrlOptCComBox.setEnabled(1)
                except:
                    pass
                if self.TabCtrlOptCComBox.currentIndex()==0:
                    spname["optimum_control"]="dim_to_min"
                    self.TabCtrlTgtPctgLineEd.setEnabled(1)
                    self.TabCtrlCPMtdComBox.setEnabled(1)
                    self.TabCtrlQtyComBox.setEnabled(1)
                    self.TabCtrlEPtsLineEd.setEnabled(1)
                    self.TabCtrlEPtsBtn.setEnabled(1)
                    self.TabCtrl2Grid2=QtGui.QGridLayout()
                    self.TabCtrl1Grid.addLayout(self.TabCtrl2Grid2, 8, 2, 1, 1)
                    spacerItem = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Minimum)
                    self.TabCtrl2Grid2.addItem(spacerItem, 0, 0, 1, 1)
                    self.TabCtrlSenLbl = QtGui.QLabel(self.TabCtrl)
                    self.TabCtrl2Grid2.addWidget(self.TabCtrlSenLbl, 1, 0, 1, 1)
                    self.TabCtrlSenLbl.setText( "Sensor:")
                    self.TabCtrlSenLbl.setFixedWidth(80)
                    self.TabCtrlSenTPLbl = QtGui.QLabel(self.TabCtrl)
                    self.TabCtrl2Grid2.addWidget(self.TabCtrlSenTPLbl, 2, 1, 1, 1)
                    self.TabCtrlSenTPLbl.setText("Sensor Type:")
                    self.TabCtrlSenTPLbl.setFixedWidth(110)
                    self.TabCtrlSenTPComBox = QtGui.QComboBox(self.TabCtrl)
                    self.TabCtrl2Grid2.addWidget(self.TabCtrlSenTPComBox, 2, 2, 1, 1)
                    self.TabCtrlSenTPComBox.addItem("sensitivity file")
                    self.TabCtrlSenTPComBox.addItem("cosine")
                    self.TabCtrlSenTPComBox.setFixedWidth(300)
                    self.TabCtrlSenFLbl = QtGui.QLabel(self.TabCtrl)
                    self.TabCtrl2Grid2.addWidget(self.TabCtrlSenFLbl, 3, 1, 1, 1)
                    self.TabCtrlSenFLbl.setText("File: ")
                    self.TabCtrlSenFLineEd = QtGui.QLineEdit(self.TabCtrl)
                    self.TabCtrl2Grid2.addWidget(self.TabCtrlSenFLineEd, 3, 2, 1, 1)
                    self.TabCtrlSenFLineEd.setFixedWidth(300)
                    self.TabCtrlSenFBtn = QtGui.QPushButton(self.TabCtrl)
                    self.TabCtrl2Grid2.addWidget(self.TabCtrlSenFBtn, 3, 3, 1, 1)
                    self.TabCtrlSenFBtn.setText("Browse")
                    spacerItem = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
                    self.TabCtrl2Grid2.addItem(spacerItem, 3, 4, 1, 1)
                    self.TabCtrlSenTPComBox.currentIndexChanged.connect(self.ElecSenTP)
                    self.TabCtrlCalcLbl=QtGui.QLabel(self.TabCtrl)
                    self.TabCtrl2Grid2.addWidget(self.TabCtrlCalcLbl, 5, 1, 1, 1)
                    self.TabCtrlCalcLbl.setText("Calculated:")
                    self.TabCtrlCalcCbx=QtGui.QCheckBox(self.TabCtrl)
                    self.TabCtrl2Grid2.addWidget(self.TabCtrlCalcCbx, 5, 2, 1, 1)
                    self.TabCtrlCalcCbx.stateChanged.connect(self.ElecClbr)
                    self.TabCtrlSenTPComBox.setCurrentIndex(-1)
                    try:
                        if spname["sensor"]["sensor_type"]=="sensitivity_file":
                            self.TabCtrlSenTPComBox.setCurrentIndex(0)
                            self.ElecSenTP()
                        elif spname["sensor"]["sensor_type"]=="cosine":
                            self.TabCtrlSenTPComBox.setCurrentIndex(1)
                            self.ElecSenTP()
                        else:
                            self.TabCtrlSenTPComBox.setCurrentIndex(-1)
                    except:
                        spname["sensor"]={}
                        self.TabCtrlSenTPComBox.setCurrentIndex(-1)
                        self.TabCtrlSenFLineEd.setDisabled(1)
                        self.TabCtrlSenFBtn.setDisabled(1)
                else:
                    spname["optimum_control"]="on"
                    self.TabCtrlTgtPctgLineEd.setDisabled(1)
                    self.TabCtrlTgtPctgLineEd.setText("")
                    self.TabCtrlCPMtdComBox.setDisabled(1)
                    self.TabCtrlCPMtdComBox.setCurrentIndex(-1)
                    self.TabCtrlQtyComBox.setCurrentIndex(-1)
                    self.TabCtrlQtyComBox.setDisabled(1)
                    self.TabCtrlEPtsLineEd.setDisabled(1)
                    self.TabCtrlEPtsLineEd.setText("")
                    self.TabCtrlEPtsBtn.setDisabled(1)
                    try:
                        del spname["sensor"]
                    except:
                        pass
                    try:
                        del spname["open_dimming"]
                    except:
                        pass
                    try:
                        del spname["excluded_points"]
                    except:
                        pass
                    try:
                        del spname["target_percentage"]
                    except:
                        pass
                    try:
                        del spname["cp_method"]
                    except:
                        pass
                    try:
                        del spname["quantity"]
                    except:
                        pass
                self.WriteToFile()
            except:
                try:
                    for cnt in reversed(range(self.TabCtrl2Grid2.count())):
                        widget = self.TabCtrl2Grid2.takeAt(cnt).widget()
                        if widget is not None:
                            widget.deleteLater()
                except:
                    pass
                try:
                    for cnt in reversed(range(self.TabCtrl3Grid.count())):
                        widget = self.TabCtrl3Grid.takeAt(cnt).widget()
                        if widget is not None:
                            widget.deleteLater()
                except:
                    pass
                try:
                    for cnt in reversed(range(self.TabCtrl3Grid1.count())):
                        widget = self.TabCtrl3Grid1.takeAt(cnt).widget()
                        if widget is not None:
                            widget.deleteLater()
                except:
                    pass


    def ElecSenTP(self):
        if self.imported or self.created:
            index=self.TabCtrlSPNComBox.currentIndex()
            zindex=self.TabCtrlCtrlZComBox.currentIndex()
            spname=self.tempdata["spaces"][index]["control_zones"][zindex]
            if self.TabCtrlSenTPComBox.currentIndex()==0:
                spname["sensor"]["sensor_type"]="sensitivity_file"
                self.TabCtrlSenFLineEd.setEnabled(1)
                self.TabCtrlSenFLineEd.setReadOnly(1)
                self.TabCtrlSenFBtn.setEnabled(1)
            elif self.TabCtrlSenTPComBox.currentIndex()==1:
                self.TabCtrlSenFLineEd.setDisabled(1)
                self.TabCtrlSenFLineEd.setText("")
                self.TabCtrlSenFBtn.setDisabled(1)
                spname["sensor"]["sensor_type"]="cosine"
                try:
                    del spname["sensor"]["sensor_file"]
                except:
                    pass


            else:
                try:
                    del spname["sensor"]
                    self.WriteToFile()
                except:
                    pass

            try:
                for cnt in reversed(range(self.TabCtrl3Grid.count())):
                    widget = self.TabCtrl3Grid.takeAt(cnt).widget()
                    if widget is not None:
                        widget.deleteLater()
            except:
                pass
            try:
                for cnt in reversed(range(self.TabCtrl3Grid.count())):
                    widget = self.TabCtrl3Grid1.takeAt(cnt).widget()
                    if widget is not None:
                        widget.deleteLater()
            except:
                pass
            self.TabCtrl2Grid2.update()
            self.TabCtrl3Grid=QtGui.QGridLayout()
            self.TabCtrl2Grid2.addLayout(self.TabCtrl3Grid, 4, 2, 1, 1)
            self.TabCtrlSenLLbl = QtGui.QLabel(self.TabCtrl)
            self.TabCtrl3Grid.addWidget(self.TabCtrlSenLLbl, 0, 0, 1, 1)
            self.TabCtrlSenLLbl.setText("Location:")
            self.TabCtrlSenLLbl.setFixedWidth(70)
            self.TabCtrlSenLXLbl = QtGui.QLabel(self.TabCtrl)
            self.TabCtrl3Grid.addWidget(self.TabCtrlSenLXLbl, 1, 0, 1, 1)
            self.TabCtrlSenLXLbl.setText("X:")
            self.TabCtrlSenLXLbl.setFixedWidth(70)
            self.TabCtrlSenLXLineEd = QtGui.QLineEdit(self.TabCtrl)
            self.TabCtrl3Grid.addWidget(self.TabCtrlSenLXLineEd, 1, 1, 1, 1)
            self.TabCtrlSenLXLineEd.setFixedWidth(70)
            self.TabCtrlSenLXDirLbl = QtGui.QLabel(self.TabCtrl)
            self.TabCtrl3Grid.addWidget(self.TabCtrlSenLXDirLbl, 1, 2, 1, 1)
            self.TabCtrlSenLXDirLbl.setText("X Dir:")
            self.TabCtrlSenLXDirLbl.setFixedWidth(70)
            self.TabCtrlSenLXDirLineEd = QtGui.QLineEdit(self.TabCtrl)
            self.TabCtrl3Grid.addWidget(self.TabCtrlSenLXDirLineEd, 1, 3, 1, 1)
            self.TabCtrlSenLXDirLineEd.setFixedWidth(70)
            self.TabCtrlSenLYLbl = QtGui.QLabel(self.TabCtrl)
            self.TabCtrl3Grid.addWidget(self.TabCtrlSenLYLbl, 2, 0, 1, 1)
            self.TabCtrlSenLYLbl.setText("Y:")
            self.TabCtrlSenLYLbl.setFixedWidth(70)
            self.TabCtrlSenLYLineEd = QtGui.QLineEdit(self.TabCtrl)
            self.TabCtrl3Grid.addWidget(self.TabCtrlSenLYLineEd, 2, 1, 1, 1)
            self.TabCtrlSenLYLineEd.setFixedWidth(70)
            self.TabCtrlSenLYDirLbl = QtGui.QLabel(self.TabCtrl)
            self.TabCtrl3Grid.addWidget(self.TabCtrlSenLYDirLbl, 2, 2, 1, 1)
            self.TabCtrlSenLYDirLbl.setText("Y Dir:")
            self.TabCtrlSenLYDirLbl.setFixedWidth(70)
            self.TabCtrlSenLYDirLineEd = QtGui.QLineEdit(self.TabCtrl)
            self.TabCtrl3Grid.addWidget(self.TabCtrlSenLYDirLineEd, 2, 3, 1, 1)
            self.TabCtrlSenLYDirLineEd.setFixedWidth(70)
            self.TabCtrlSenLZLbl = QtGui.QLabel(self.TabCtrl)
            self.TabCtrl3Grid.addWidget(self.TabCtrlSenLZLbl, 3, 0, 1, 1)
            self.TabCtrlSenLZLbl.setText("Z:")
            self.TabCtrlSenLZLbl.setFixedWidth(70)
            self.TabCtrlSenLZLineEd = QtGui.QLineEdit(self.TabCtrl)
            self.TabCtrl3Grid.addWidget(self.TabCtrlSenLZLineEd, 3, 1, 1, 1)
            self.TabCtrlSenLZLineEd.setFixedWidth(70)
            self.TabCtrlSenLZDirLbl = QtGui.QLabel(self.TabCtrl)
            self.TabCtrl3Grid.addWidget(self.TabCtrlSenLZDirLbl, 3, 2, 1, 1)
            self.TabCtrlSenLZDirLbl.setText("Z Dir:")
            self.TabCtrlSenLZDirLbl.setFixedWidth(70)
            self.TabCtrlSenLZDirLineEd = QtGui.QLineEdit(self.TabCtrl)
            self.TabCtrl3Grid.addWidget(self.TabCtrlSenLZDirLineEd, 3, 3, 1, 1)
            self.TabCtrlSenLZDirLineEd.setFixedWidth(70)
            self.TabCtrlSenLSpinLbl = QtGui.QLabel(self.TabCtrl)
            self.TabCtrl3Grid.addWidget(self.TabCtrlSenLSpinLbl, 4, 0, 1, 1)
            self.TabCtrlSenLSpinLbl.setText("Spin:")
            self.TabCtrlSenLSpinLbl.setFixedWidth(70)
            self.TabCtrlSenLSpinLineEd = QtGui.QLineEdit(self.TabCtrl)
            self.TabCtrl3Grid.addWidget(self.TabCtrlSenLSpinLineEd, 4, 1, 1, 1)
            self.TabCtrlSenLSpinLineEd.setFixedWidth(70)
            self.TabCtrlSenFBtn.clicked.connect(self.ElecSenF)
            SenL=lambda: self.elecctrldata(self.TabCtrlSenLXLineEd,"x")
            self.TabCtrlSenLXLineEd.editingFinished.connect(SenL)
            SenL=lambda: self.elecctrldata(self.TabCtrlSenLYLineEd,"y")
            self.TabCtrlSenLYLineEd.editingFinished.connect(SenL)
            SenL=lambda: self.elecctrldata(self.TabCtrlSenLZLineEd,"z")
            self.TabCtrlSenLZLineEd.editingFinished.connect(SenL)
            SenL=lambda: self.elecctrldata(self.TabCtrlSenLXDirLineEd,"xd")
            self.TabCtrlSenLXDirLineEd.editingFinished.connect(SenL)
            SenL=lambda: self.elecctrldata(self.TabCtrlSenLYDirLineEd,"yd")
            self.TabCtrlSenLYDirLineEd.editingFinished.connect(SenL)
            SenL=lambda: self.elecctrldata(self.TabCtrlSenLZDirLineEd,"zd")
            self.TabCtrlSenLZDirLineEd.editingFinished.connect(SenL)
            SenL=lambda: self.elecctrldata(self.TabCtrlSenLSpinLineEd,"spin_ccw")
            self.TabCtrlSenLSpinLineEd.editingFinished.connect(SenL)
            try:
                self.TabCtrlSenFLineEd.setText(spname["sensor"]["sensor_file"])
            except:
                self.TabCtrlSenFLineEd.setText("")
            try:
                self.TabCtrlSenLXLineEd.setText(str(spname["sensor"]["location"]["x"]))
                self.TabCtrlSenLYLineEd.setText(str(spname["sensor"]["location"]["y"]))
                self.TabCtrlSenLZLineEd.setText(str(spname["sensor"]["location"]["z"]))
                self.TabCtrlSenLXDirLineEd.setText(str(spname["sensor"]["location"]["xd"]))
                self.TabCtrlSenLYDirLineEd.setText(str(spname["sensor"]["location"]["yd"]))
                self.TabCtrlSenLZDirLineEd.setText(str(spname["sensor"]["location"]["zd"]))
            except:
                pass
            try:
                self.TabCtrlSenLSpinLineEd.setText(str(spname["sensor"]["location"]["spin_ccw"]))
            except:
                pass



    def ElecSenF(self):
        SFile= QtGui.QFileDialog.getOpenFileName(self,"Import Sensor File","C:/","Sensor File (*.sen)")
        if SFile:
            index=self.TabCtrlSPNComBox.currentIndex()
            CIndex=self.TabCtrlCtrlZComBox.currentIndex()
            spname=self.tempdata["spaces"][index]["control_zones"][CIndex]["sensor"]
            SPath=os.path.join(self.dir,self.tempdata["spaces"][index]["input_directory"])
            SLine=self.CopyFile(SFile,SPath)
            self.TabCtrlSenFLineEd.setText(os.path.basename(SLine))
            spname["sensor_file"]=os.path.basename(str(SLine))
            self.WriteToFile()

    def elecctrldata(self, object, key):
        index=self.TabCtrlSPNComBox.currentIndex()
        CIndex=self.TabCtrlCtrlZComBox.currentIndex()
        spname=self.tempdata["spaces"][index]["control_zones"][CIndex]["sensor"]
        mark=0
        mark=self.floatChk(object)
        if mark==0:
            try:
                spname["location"][key]=float(object.text())
            except:
                spname["location"]={}
                spname["location"][key]=float(object.text())
        else:
            object.setText("0")
            object.setFocus()
        self.WriteToFile()

    def ElecClbr(self):
        if self.TabCtrlCalcCbx.checkState():
            index=self.TabCtrlSPNComBox.currentIndex()
            zindex=self.TabCtrlCtrlZComBox.currentIndex()
            spname=self.tempdata["spaces"][index]["control_zones"][zindex]
            try:
                for cnt in reversed(range(self.TabCtrl3Grid.count())):
                    widget = self.TabCtrl3Grid1.takeAt(cnt).widget()
                    if widget is not None:
                        widget.deleteLater()
            except:
                pass
            self.TabCtrl3Grid1=QtGui.QGridLayout()
            self.TabCtrl2Grid2.addLayout(self.TabCtrl3Grid1, 6, 2, 1, 1)
            self.TabCtrlClbrLbl = QtGui.QLabel(self.TabCtrl)
            self.TabCtrl3Grid1.addWidget(self.TabCtrlClbrLbl, 0, 0, 1, 1)
            self.TabCtrlClbrLbl.setFixedWidth(150)
            self.TabCtrlClbrLbl.setText("Calibration:")
            self.TabCtrlOffLbl = QtGui.QLabel(self.TabCtrl)
            self.TabCtrl3Grid1.addWidget(self.TabCtrlOffLbl, 1, 0, 1, 1)
            self.TabCtrlOffLbl.setFixedWidth(150)
            self.TabCtrlOffLbl.setText("Off Signal:")
            self.TabCtrlOffLineEd = QtGui.QLineEdit(self.TabCtrl)
            self.TabCtrl3Grid1.addWidget(self.TabCtrlOffLineEd, 1, 1, 1, 1)
            self.TabCtrlOffLineEd.setFixedWidth(80)
            self.TabCtrlNTSLbl = QtGui.QLabel(self.TabCtrl)
            self.TabCtrl3Grid1.addWidget(self.TabCtrlNTSLbl, 2, 0, 1, 1)
            self.TabCtrlNTSLbl.setFixedWidth(150)
            self.TabCtrlNTSLbl.setText("Night Time Signal:")
            self.TabCtrlNTSLineEd = QtGui.QLineEdit(self.TabCtrl)
            self.TabCtrl3Grid1.addWidget(self.TabCtrlNTSLineEd, 2, 1, 1, 1)
            self.TabCtrlNTSLineEd.setFixedWidth(80)
            self.TabCtrlDTSLbl = QtGui.QLabel(self.TabCtrl)
            self.TabCtrl3Grid1.addWidget(self.TabCtrlDTSLbl, 3, 0, 1, 1)
            self.TabCtrlDTSLbl.setFixedWidth(150)
            self.TabCtrlDTSLbl.setText("Day Time Signal")
            self.TabCtrlDTSLineEd = QtGui.QLineEdit(self.TabCtrl)
            self.TabCtrl3Grid1.addWidget(self.TabCtrlDTSLineEd, 3, 1, 1, 1)
            self.TabCtrlDTSLineEd.setFixedWidth(80)
            Clbr=lambda: self.clbrdata(self.TabCtrlOffLineEd,"off_signal")
            self.TabCtrlOffLineEd.editingFinished.connect(Clbr)
            Clbr=lambda: self.clbrdata(self.TabCtrlNTSLineEd,"minimum_bf_signal")
            self.TabCtrlNTSLineEd.editingFinished.connect(Clbr)
            Clbr=lambda: self.clbrdata(self.TabCtrlDTSLineEd,"maximum_bf_signal")
            self.TabCtrlDTSLineEd.editingFinished.connect(Clbr)
            try:
                self.TabCtrlOffLineEd.setText(str(spname["open_dimming"]["off_signal"]))
                self.TabCtrlNTSLineEd.setText(str(spname["open_dimming"]["minimum_bf_signal"]))
                self.TabCtrlDTSLineEd.setText(str(spname["open_dimming"]["maximum_bf_signal"]))
            except:
                spname["open_dimming"]={}
            self.WriteToFile()
        else:
            index=self.TabCtrlSPNComBox.currentIndex()
            zindex=self.TabCtrlCtrlZComBox.currentIndex()
            spname=self.tempdata["spaces"][index]["control_zones"][zindex]
            try:
                for cnt in reversed(range(self.TabCtrl3Grid1.count())):
                    widget = self.TabCtrl3Grid1.takeAt(cnt).widget()
                    if widget is not None:
                        widget.deleteLater()
            except:
                pass
            try:
                del spname["open_dimming"]
                # self.TabCtrlOffLineEd.setText("")
                # self.TabCtrlNTSLineEd.setText("")
                # self.TabCtrlDTSLineEd.setText("")
            except:
                pass
            self.WriteToFile()


    def clbrdata(self, object, key):
        index=self.TabCtrlSPNComBox.currentIndex()
        CIndex=self.TabCtrlCtrlZComBox.currentIndex()
        spname=self.tempdata["spaces"][index]["control_zones"][CIndex]["open_dimming"]
        mark=0
        mark=self.intChk(object, 0, 100000000000000)
        if mark==0:
            spname[key]=int(object.text())
        else:
            object.setText("0")
            item.setFocus()
        self.WriteToFile()


    def CheckState(self,object,para):
        if not self.TabDMtrGCbx.isChecked():
            index=self.TabDMtrSPNComBox.currentIndex()
            spname=self.tempdata["spaces"][index]
            if object.checkState():
                if para=="DF":
                    spname[para]=True
                elif para=="BSDF":
                    WGIndex=self.TabWinWGComBox.currentIndex()
                    spname["window_groups"][WGIndex]["BSDF"]=True
                    ###Subject to change
                    self.TabWinBSDFSetList.setEnabled(1)
                    self.TabWinBSDFBMatComBox.setEnabled(1)
                    try:
                        self.TabWinBSDFSetList.addItem(spname["window_groups"][WGIndex]["bsdf_setting_materials"][0][0])
                        self.TabWinBSDFBMatComBox.addItem(spname["window_groups"][WGIndex]["bsdf_base_materials"][0])
                    except:
                        pass
                else:
                    try:
                        spname[para]["calculate"]=True
                    except:
                        spname[para]={}
                        spname[para]["calculate"]=True
                    if para=="sDA":
                        try:
                            for j in range(len(spname["window_groups"])):
                                try:
                                    junk=spname["sDA"]["window_group_settings"][j]
                                except:
                                    try:
                                        spname["sDA"]["window_group_settings"].append(0)
                                    except:
                                        spname["sDA"]["window_group_settings"]=[]
                                        spname["sDA"]["window_group_settings"].append(0)
                        except:
                            QtGui.QMessageBox.warning(self, "Warning", "No window groups in space: %s" %spname["space_name"])
                            try:
                                del spname[para]
                            except:
                                pass
                            object.setChecked(0)
            else:
                if para=="DF":
                    spname[para]=False
                elif para=="BSDF":
                    WGIndex=self.TabWinWGComBox.currentIndex()
                    ###Subject to change
                    self.TabWinBSDFSetList.clear()
                    self.TabWinBSDFBMatComBox.clear()
                else:
                    try:
                        spname[para]["calculate"]=False
                    except:
                        spname[para]={}
                        spname[para]["calculate"]=False
                    if para=="sDA":
                        try:
                            for i in range(len(self.tempdata["spaces"])):
                                for j in range(len(self.tempdata["spaces"][i]["window_groups"])):
                                    try:
                                        junk=self.tempdata["spaces"][i]["sDA"]["window_group_settings"][j]
                                    except:
                                        try:
                                            self.tempdata["spaces"][i]["sDA"]["window_group_settings"].append(0)
                                        except:
                                            self.tempdata["spaces"][i]["sDA"]["window_group_settings"]=[]
                                            self.tempdata["spaces"][i]["sDA"]["window_group_settings"].append(0)
                        except:
                            try:
                                del spname[para]
                            except:
                                pass
                            object.setChecked(0)

            self.TabMtrLoad()
        else:
            spname=self.tempdata["general"]
            if object.isChecked():
                if para=="DF":
                    spname[para]=True
                else:
                    try:
                        spname[para]["calculate"]=True
                    except:
                        spname[para]={}
                        spname[para]["calculate"]=True
            else:
                if para=="DF":
                    spname[para]=False
                else:
                    try:
                        spname[para]["calculate"]=False
                    except:
                        spname[para]={}
                        spname[para]["calculate"]=False
                    if para=="sDA":
                        try:
                            if len(spname["window_groups"])==0:
                                try:
                                    del spname[para]
                                except:
                                    pass
                        except:
                            try:
                                del spname[para]
                            except:
                                pass
            self.mtrGeneral()

        self.WriteToFile()
        self.TabMtrLoad()

    def MtrValue(self,object,mtr, value):
        if self.created or self.imported:
            if self.TabDMtrGCbx.isChecked():
                spname=self.tempdata["general"]
            else:
                index=self.TabDMtrSPNComBox.currentIndex()
                spname=self.tempdata["spaces"][index]
            if value!="DA_fraction":
                spname[mtr][value]=int(object.text())
            else:
                mark=0
                mark=self.floatChk(object,0,1)
                if mark==0:
                    spname[mtr][value]=float(object.text())
                else:
                    object.setText("0.5")
                    object.setFocus()
            self.WriteToFile()

    def mtrGeneral(self):
        if self.imported or self.created:
            spname=self.tempdata["general"]
            if self.TabDMtrGCbx.checkState():
                self.TabDMtrSPNComBox.setDisabled(1)
                try:
                    if spname["DA"]["calculate"]:
                        self.TabDMtrDAChkB.setChecked(1)
                        try:
                            self.TabDMtrDATgtLineEd.setText(str(spname["DA"]["illuminance"]))
                        except:
                            self.TabDMtrDATgtLineEd.setText(str(300))
                            spname["DA"]["illuminance"]=300
                        self.WriteToFile()
                        self.TabDMtrDATgtLineEd.setEnabled(1)
                    else:
                        try:
                            junk=spname["DA"]["illuminance"]
                        except:
                            spname["DA"]["illuminance"]=300
                            self.WriteToFile()
                        self.TabDMtrDAChkB.setChecked(0)
                        self.TabDMtrDATgtLineEd.setText(" ")
                        self.TabDMtrDATgtLineEd.setDisabled(1)
                except:
                    spname["DA"]={}
                    spname["DA"]["calculate"]=False
                    self.WriteToFile()
                    self.mtrGeneral()
                try:
                    if spname["sDA"]["calculate"]:
                        for i in range(len(self.tempdata["spaces"])):
                            try:
                                self.tempdata["spaces"][i]["sDA"]["calculate"]=True
                            except:
                                self.tempdata["spaces"][i]["sDA"]={}
                                self.tempdata["spaces"][i]["sDA"]["calculate"]=True
                            try:
                                for j in range(len(self.tempdata["spaces"][i]["window_groups"])):
                                    try:
                                        junk=self.tempdata["spaces"][i]["sDA"]["window_group_settings"][j]
                                    except:
                                        try:
                                            self.tempdata["spaces"][i]["sDA"]["window_group_settings"].append(0)
                                        except:
                                            self.tempdata["spaces"][i]["sDA"]["window_group_settings"]=[]
                                            self.tempdata["spaces"][i]["sDA"]["window_group_settings"].append(0)
                                self.TabDMtrsDAChkB.setChecked(1)
                                self.tempdata["spaces"][i]["sDA"]["calculate"]=True
                            except:
                                del spname["sDA"]
                                QtGui.QMessageBox.warning(self, "Warning", "No Window Groups found in space: %s!" %self.tempdata["spaces"][i]["space_name"])
                                self.WriteToFile()
                                self.mtrGeneral()
                        try:
                            self.TabDMtrsDATgtLineEd.setText(str(spname["sDA"]["illuminance"]))
                        except:
                            try:
                                self.TabDMtrsDATgtLineEd.setText(str(300))
                                spname["sDA"]["illuminance"]=300
                            except:
                                pass
                            self.WriteToFile()
                        try:
                            self.TabDMtrsDAFrcLineEd.setText(str(spname["sDA"]["DA_fraction"]))
                        except:
                            try:
                                self.TabDMtrsDAFrcLineEd.setText(str(0.5))
                                spname["sDA"]["DA_fraction"]=0.5
                            except:
                                pass
                            self.WriteToFile()
                        try:
                            self.TabDMtrsDASTmLineEd.setText(str(spname["sDA"]["start_time"]))
                        except:
                            try:
                                self.TabDMtrsDASTmLineEd.setText(str(8))
                                spname["sDA"]["start_time"]=8
                            except:
                                pass
                            self.WriteToFile()
                        try:
                            if spname["sDA"]["end_time"]<=spname["sDA"]["start_time"]:
                                spname["sDA"]["end_time"]=spname["sDA"]["start_time"]+1
                                self.WriteToFile()
                            self.TabDMtrsDAETmLineEd.setText(str(spname["sDA"]["end_time"]))
                        except:
                            try:
                                self.TabDMtrsDAETmLineEd.setText(str(18))
                                spname["sDA"]["end_time"]=18
                            except:
                                pass
                            self.WriteToFile()
                        self.TabDMtrsDATgtLineEd.setEnabled(1)
                        self.TabDMtrsDAFrcLineEd.setEnabled(1)
                        self.TabDMtrsDASTmLineEd.setEnabled(1)
                        self.TabDMtrsDAETmLineEd.setEnabled(1)
                    else:
                        self.TabDMtrsDAChkB.setChecked(0)
                        self.TabDMtrsDATgtLineEd.setText("")
                        self.TabDMtrsDAFrcLineEd.setText("")
                        self.TabDMtrsDASTmLineEd.setText("")
                        self.TabDMtrsDAETmLineEd.setText("")
                        self.TabDMtrsDATgtLineEd.setDisabled(1)
                        self.TabDMtrsDAFrcLineEd.setDisabled(1)
                        self.TabDMtrsDASTmLineEd.setDisabled(1)
                        self.TabDMtrsDAETmLineEd.setDisabled(1)
                        try:
                            junk=spname["sDA"]["illuminance"]
                        except:
                            try:
                                spname["sDA"]["illuminance"]=300
                            except:
                                pass
                            self.WriteToFile()
                        try:
                            junk=spname["sDA"]["DA_fraction"]
                        except:
                            try:
                                spname["sDA"]["DA_fraction"]=0.5
                            except:
                                pass
                            self.WriteToFile()
                        try:
                            junk=spname["sDA"]["start_time"]
                        except:
                            try:
                                spname["sDA"]["start_time"]=8
                            except:
                                pass
                            self.WriteToFile()
                        try:
                            if spname["sDA"]["end_time"]<=spname["sDA"]["start_time"]:
                                spname["sDA"]["end_time"]=spname["sDA"]["start_time"]+1
                            self.WriteToFile()
                        except:
                            try:
                                spname["sDA"]["end_time"]=18
                            except:
                                pass
                            self.WriteToFile()

                        for i in range(len(self.tempdata["spaces"])):
                            try:
                                for j in range(len(self.tempdata["spaces"][i]["window_groups"])):
                                    try:
                                        junk=self.tempdata["spaces"][i]["sDA"]["window_group_settings"][j]
                                    except:
                                        try:
                                            self.tempdata["spaces"][i]["sDA"]["window_group_settings"].append(0)
                                        except:
                                            self.tempdata["spaces"][i]["sDA"]["window_group_settings"]=[]
                                            self.tempdata["spaces"][i]["sDA"]["window_group_settings"].append(0)
                            except:
                                del spname["sDA"]
                                QtGui.QMessageBox.warning(self, "Warning", "No Window Groups found in space: %s!" %self.tempdata["spaces"][i]["space_name"])
                                self.WriteToFile()
                                self.mtrGeneral()
                except:
                    self.TabDMtrsDAChkB.setChecked(0)
                    self.TabDMtrsDATgtLineEd.setText("")
                    self.TabDMtrsDAFrcLineEd.setText("")
                    self.TabDMtrsDASTmLineEd.setText("")
                    self.TabDMtrsDAETmLineEd.setText("")
                    self.TabDMtrsDATgtLineEd.setDisabled(1)
                    self.TabDMtrsDAFrcLineEd.setDisabled(1)
                    self.TabDMtrsDASTmLineEd.setDisabled(1)
                    self.TabDMtrsDAETmLineEd.setDisabled(1)
                    self.WriteToFile()

                try:
                    if spname["occupied_sDA"]["calculate"]:
                        self.TabDMtrOsDAChkB.setChecked(1)
                        try:
                            self.TabDMtrOsDATgtLineEd.setText(str(spname["occupied_sDA"]["illuminance"]))
                        except:
                            self.TabDMtrOsDATgtLineEd.setText(str(300))
                            spname["occupied_sDA"]["illuminance"]=300
                            self.WriteToFile()
                        try:
                            self.TabDMtrOsDAFrcLineEd.setText(str(spname["occupied_sDA"]["DA_fraction"]))
                        except:
                            spname["occupied_sDA"]["DA_fraction"]=0.5
                            self.TabDMtrOsDAFrcLineEd.setText(str(0.5))
                            self.WriteToFile()
                        self.TabDMtrOsDATgtLineEd.setEnabled(1)
                        self.TabDMtrOsDAFrcLineEd.setEnabled(1)
                    else:
                        try:
                            junk=spname["occupied_sDA"]["illuminance"]
                        except:
                            spname["occupied_sDA"]["illuminance"]=300
                            self.WriteToFile()
                        try:
                            junk=spname["occupied_sDA"]["DA_fraction"]
                        except:
                            spname["occupied_sDA"]["DA_fraction"]=0.5
                            self.WriteToFile()
                        self.TabDMtrOsDAChkB.setChecked(0)
                        self.TabDMtrOsDATgtLineEd.setText("")
                        self.TabDMtrOsDAFrcLineEd.setText("")
                        self.TabDMtrOsDATgtLineEd.setDisabled(1)
                        self.TabDMtrOsDAFrcLineEd.setDisabled(1)
                except:
                    spname["occupied_sDA"]={}
                    spname["occupied_sDA"]["calculate"]=False
                    self.WriteToFile()
                    self.mtrGeneral()
                try:
                    if spname["cDA"]["calculate"]:
                        self.TabDMtrcDAChkB.setChecked(1)
                        try:
                            self.TabDMtrcDATgtLineEd.setText(str(spname["cDA"]["illuminance"]))
                        except:
                            self.TabDMtrcDATgtLineEd.setText(str(300))
                            spname["cDA"]["illuminance"]=300
                            self.WriteToFile()
                        self.TabDMtrcDATgtLineEd.setEnabled(1)
                    else:
                        try:
                            junk=spname["cDA"]["illuminance"]
                        except:
                            spname["cDA"]["illuminance"]=300
                            self.WriteToFile()
                        self.TabDMtrcDAChkB.setChecked(0)
                        self.TabDMtrcDATgtLineEd.setText("")
                        self.TabDMtrcDATgtLineEd.setDisabled(1)
                except:
                    spname["cDA"]={}
                    spname["cDA"]["calculate"]=False
                    self.WriteToFile()
                    self.mtrGeneral()
                try:
                    if spname["DF"]:
                        self.TabDMtrDFChkB.setChecked(1)
                    else:
                        self.TabDMtrDFChkB.setChecked(0)
                except:
                    spname["DF"]=False
                    self.WriteToFile()
                    self.mtrGeneral()
                try:
                    if spname["UDI"]["calculate"]:
                        self.TabDMtrUDIChkB.setChecked(1)
                        try:
                            self.TabDMtrUDIMinLineEd.setText(str(spname["UDI"]["minimum"]))
                        except:
                            spname["UDI"]["minimum"]=100
                            self.TabDMtrUDIMinLineEd.setText(str(100))
                            self.WriteToFile()
                        try:
                            if spname["UDI"]["maximum"]<=spname["UDI"]["minimum"]:
                                spname["UDI"]["maximum"]=spname["UDI"]["minimum"]+1
                                self.WriteToFile()
                            self.TabDMtrUDIMaxLineEd.setText(str(spname["UDI"]["maximum"]))
                        except:
                            self.TabDMtrUDIMaxLineEd.setText(str(2500))
                            spname["UDI"]["maximum"]=2500
                            self.WriteToFile()
                        self.TabDMtrUDIMaxLineEd.setEnabled(1)
                        self.TabDMtrUDIMinLineEd.setEnabled(1)
                    else:
                        try:
                            junk=spname["UDI"]["minimum"]
                        except:
                            spname["UDI"]["minimum"]=100
                            self.WriteToFile()
                        try:
                            if spname["UDI"]["maximum"]<=spname["UDI"]["minimum"]:
                                spname["UDI"]["maximum"]=spname["UDI"]["minimum"]+1
                                self.WriteToFile()
                            junk=spname["UDI"]["maximum"]
                        except:
                            spname["UDI"]["maximum"]=2500
                            self.WriteToFile()
                        self.TabDMtrUDIChkB.setChecked(0)
                        self.TabDMtrUDIMaxLineEd.setText("")
                        self.TabDMtrUDIMinLineEd.setText("")
                        self.TabDMtrUDIMaxLineEd.setDisabled(1)
                        self.TabDMtrUDIMinLineEd.setDisabled(1)
                except:
                    spname["UDI"]={}
                    spname["UDI"]["calculate"]=False
                    self.WriteToFile()
                    self.mtrGeneral()
                try:
                    if spname["Energy"]["calculate"]:
                        self.TabDMtrEgyChkB.setChecked(1)
                    else:
                        self.TabDMtrEgyChkB.setChecked(0)
                except:
                    spname["Energy"]={}
                    spname["Energy"]["calculate"]=False
                    self.WriteToFile()
                    self.mtrGeneral()
            else:
                self.TabDMtrSPNComBox.setEnabled(1)
                self.TabMtrLoad()



    def TabMtrLoad(self):
        try:
            index=self.TabDMtrSPNComBox.currentIndex()
            spname=self.tempdata["spaces"][index]
            if self.TabDMtrGCbx.isChecked():
                self.mtrGeneral()
            else:
                if spname["DA"]["calculate"]:
                    self.TabDMtrDAChkB.setChecked(1)
                    try:
                        self.TabDMtrDATgtLineEd.setText(str(spname["DA"]["illuminance"]))
                    except:
                        self.TabDMtrDATgtLineEd.setText(str(300))
                        spname["DA"]["illuminance"]=300
                        self.WriteToFile()
                    self.TabDMtrDATgtLineEd.setEnabled(1)
                else:
                    self.TabDMtrDAChkB.setChecked(0)
                    self.TabDMtrDATgtLineEd.setText(" ")
                    self.TabDMtrDATgtLineEd.setDisabled(1)
                    try:
                        junk=spname["DA"]["illuminance"]
                    except:
                        spname["DA"]["illuminance"]=300
                        self.WriteToFile()
                try:
                    if spname["sDA"]["calculate"]:
                        try:
                            if len(spname["window_groups"])>0:
                                self.TabDMtrsDAChkB.setChecked(1)
                                try:
                                    self.TabDMtrsDATgtLineEd.setText(str(spname["sDA"]["illuminance"]))
                                except:
                                    self.TabDMtrsDATgtLineEd.setText(str(300))
                                    spname["sDA"]["illuminance"]=300
                                    self.WriteToFile()
                                try:
                                    self.TabDMtrsDAFrcLineEd.setText(str(spname["sDA"]["DA_fraction"]))
                                except:
                                    self.TabDMtrsDAFrcLineEd.setText(str(0.5))
                                    spname["sDA"]["DA_fraction"]=0.5
                                    self.WriteToFile()
                                try:
                                    self.TabDMtrsDASTmLineEd.setText(str(spname["sDA"]["start_time"]))
                                except:
                                    self.TabDMtrsDASTmLineEd.setText(str(8))
                                    spname["sDA"]["start_time"]=8
                                    self.WriteToFile()
                                try:
                                    if spname["sDA"]["end_time"]<=spname["sDA"]["start_time"]:
                                        spname["sDA"]["end_time"]=spname["sDA"]["start_time"]+1
                                        self.WriteToFile()
                                    self.TabDMtrsDAETmLineEd.setText(str(spname["sDA"]["end_time"]))
                                except:
                                    self.TabDMtrsDAETmLineEd.setText(str(18))
                                    spname["sDA"]["end_time"]=18
                                    self.WriteToFile()
                                self.TabDMtrsDATgtLineEd.setEnabled(1)
                                self.TabDMtrsDAFrcLineEd.setEnabled(1)
                                self.TabDMtrsDASTmLineEd.setEnabled(1)
                                self.TabDMtrsDAETmLineEd.setEnabled(1)
                            else:
                                spname["sDA"]["calculate"]=False
                                self.WriteToFile()
                                self.TabMtrLoad()
                        except:
                            del spname["sDA"]
                            self.WriteToFile()
                            self.TabMtrLoad()
                    else:
                        self.TabDMtrsDAChkB.setChecked(0)
                        self.TabDMtrsDATgtLineEd.setText("")
                        self.TabDMtrsDAFrcLineEd.setText("")
                        self.TabDMtrsDASTmLineEd.setText("")
                        self.TabDMtrsDAETmLineEd.setText("")
                        self.TabDMtrsDATgtLineEd.setDisabled(1)
                        self.TabDMtrsDAFrcLineEd.setDisabled(1)
                        self.TabDMtrsDASTmLineEd.setDisabled(1)
                        self.TabDMtrsDAETmLineEd.setDisabled(1)
                        try:
                            junk=(spname["sDA"]["illuminance"])
                        except:
                            spname["sDA"]["illuminance"]=300
                            self.WriteToFile()
                        try:
                            junk=(spname["sDA"]["DA_fraction"])
                        except:
                            spname["sDA"]["DA_fraction"]=0.5
                            self.WriteToFile()
                        try:
                            junk=spname["sDA"]["start_time"]
                        except:
                            spname["sDA"]["start_time"]=8
                            self.WriteToFile()
                        try:
                            junk=spname["sDA"]["end_time"]
                        except:
                            spname["sDA"]["end_time"]=18
                            self.WriteToFile()
                except:
                    self.TabDMtrsDAChkB.setChecked(0)
                    self.TabDMtrsDATgtLineEd.setText("")
                    self.TabDMtrsDAFrcLineEd.setText("")
                    self.TabDMtrsDASTmLineEd.setText("")
                    self.TabDMtrsDAETmLineEd.setText("")
                    self.TabDMtrsDATgtLineEd.setDisabled(1)
                    self.TabDMtrsDAFrcLineEd.setDisabled(1)
                    self.TabDMtrsDASTmLineEd.setDisabled(1)
                    self.TabDMtrsDAETmLineEd.setDisabled(1)
                if spname["occupied_sDA"]["calculate"]:
                    self.TabDMtrOsDAChkB.setChecked(1)
                    try:
                        self.TabDMtrOsDATgtLineEd.setText(str(spname["occupied_sDA"]["illuminance"]))
                    except:
                        self.TabDMtrOsDATgtLineEd.setText(str(300))
                        spname["occupied_sDA"]["illuminance"]=300
                        self.WriteToFile()
                    try:
                        self.TabDMtrOsDAFrcLineEd.setText(str(spname["occupied_sDA"]["DA_fraction"]))
                    except:
                        self.TabDMtrOsDAFrcLineEd.setText(str(0.5))
                        spname["occupied_sDA"]["DA_fraction"]=0.5
                        self.WriteToFile()
                    self.TabDMtrOsDATgtLineEd.setEnabled(1)
                    self.TabDMtrOsDAFrcLineEd.setEnabled(1)
                else:
                    self.TabDMtrOsDAChkB.setChecked(0)
                    self.TabDMtrOsDATgtLineEd.setText("")
                    self.TabDMtrOsDAFrcLineEd.setText("")
                    self.TabDMtrOsDATgtLineEd.setDisabled(1)
                    self.TabDMtrOsDAFrcLineEd.setDisabled(1)
                    try:
                       junk=str(spname["occupied_sDA"]["illuminance"])
                    except:
                        spname["occupied_sDA"]["illuminance"]=300
                        self.WriteToFile()
                    try:
                        junk=str(spname["occupied_sDA"]["DA_fraction"])
                    except:
                        spname["occupied_sDA"]["DA_fraction"]=0.5
                        self.WriteToFile()
                if spname["cDA"]["calculate"]:
                    self.TabDMtrcDAChkB.setChecked(1)
                    try:
                        self.TabDMtrcDATgtLineEd.setText(str(spname["cDA"]["illuminance"]))
                    except:
                        self.TabDMtrcDATgtLineEd.setText(str(300))
                        spname["cDA"]["illuminance"]=300
                        self.WriteToFile()
                    self.TabDMtrcDATgtLineEd.setEnabled(1)
                else:
                    self.TabDMtrcDAChkB.setChecked(0)
                    self.TabDMtrcDATgtLineEd.setText("")
                    self.TabDMtrcDATgtLineEd.setDisabled(1)
                    try:
                        junk=str(spname["cDA"]["illuminance"])
                    except:
                        spname["cDA"]["illuminance"]=300
                        self.WriteToFile()
                if spname["DF"]:
                    self.TabDMtrDFChkB.setChecked(1)
                else:
                    self.TabDMtrDFChkB.setChecked(0)
                try:
                    if spname["Energy"]["calculate"]:
                        self.TabDMtrEgyChkB.setChecked(1)
                    else:
                        self.TabDMtrEgyChkB.setChecked(0)
                except:
                    pass
                if spname["UDI"]["calculate"]:
                    self.TabDMtrUDIChkB.setChecked(1)
                    try:
                        if spname["UDI"]["maximum"]<=spname["UDI"]["minimum"]:
                            spname["UDI"]["maximum"]=spname["UDI"]["minimum"]+1
                            self.WriteToFile()
                        self.TabDMtrUDIMaxLineEd.setText(str(spname["UDI"]["maximum"]))
                        self.TabDMtrUDIMinLineEd.setText(str(spname["UDI"]["minimum"]))

                    except:
                        self.TabDMtrUDIMaxLineEd.setText(str(2500))
                        self.TabDMtrUDIMinLineEd.setText(str(100))
                        spname["UDI"]["minimum"]=100
                        spname["UDI"]["maximum"]=2500
                        self.WriteToFile()
                    self.TabDMtrUDIMaxLineEd.setEnabled(1)
                    self.TabDMtrUDIMinLineEd.setEnabled(1)

                else:
                    self.TabDMtrUDIChkB.setChecked(0)
                    self.TabDMtrUDIMaxLineEd.setText("")
                    self.TabDMtrUDIMinLineEd.setText("")
                    self.TabDMtrUDIMaxLineEd.setDisabled(1)
                    self.TabDMtrUDIMinLineEd.setDisabled(1)
                    try:
                        junk=spname["UDI"]["maximum"]
                    except:
                        spname["UDI"]["maximum"]=2500
                        self.WriteToFile()
                    try:
                        junk=spname["UDI"]["minimum"]
                    except:
                        spname["UDI"]["minimum"]=100
                        self.WriteToFile()
        except:
            pass

    def tableitem(self, text):
        item=QtGui.QTableWidgetItem()
        text=str(text)
        item.setText(text)
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        return item

    def SimuLoad(self):
        if self.imported or self.created:
            try:
                self.TabSimuSunDivLineEd.setText(str(self.tempdata["general"]["sun_divisions"]))
                self.TabSimuSkyDivLineEd.setText(str(self.tempdata["general"]["sky_divisions"]))
                self.TabSimuVabLineEd.setText(str(self.tempdata["general"]["radiance_parameters"]["vmx"]["ab"]))
                self.TabSimuVadLineEd.setText(str(self.tempdata["general"]["radiance_parameters"]["vmx"]["ad"]))
                self.TabSimuVasLineEd.setText(str(self.tempdata["general"]["radiance_parameters"]["vmx"]["as"]))
                self.TabSimuVarLineEd.setText(str(self.tempdata["general"]["radiance_parameters"]["vmx"]["ar"]))
                self.TabSimuVaaLineEd.setText(str(self.tempdata["general"]["radiance_parameters"]["vmx"]["aa"]))
                self.TabSimuVlrLineEd.setText(str(self.tempdata["general"]["radiance_parameters"]["vmx"]["lr"]))
                self.TabSimuVstLineEd.setText(str(self.tempdata["general"]["radiance_parameters"]["vmx"]["st"]))
                self.TabSimuVsjLineEd.setText(str(self.tempdata["general"]["radiance_parameters"]["vmx"]["sj"]))
                self.TabSimuVlwLineEd.setText(str(self.tempdata["general"]["radiance_parameters"]["vmx"]["lw"]))
                self.TabSimuVdjLineEd.setText(str(self.tempdata["general"]["radiance_parameters"]["vmx"]["dj"]))
                self.TabSimuVdsLineEd.setText(str(self.tempdata["general"]["radiance_parameters"]["vmx"]["ds"]))
                self.TabSimuVdrLineEd.setText(str(self.tempdata["general"]["radiance_parameters"]["vmx"]["dr"]))
                self.TabSimuVdpLineEd.setText(str(self.tempdata["general"]["radiance_parameters"]["vmx"]["dp"]))
                self.TabSimuVdcLineEd.setText(str(self.tempdata["general"]["radiance_parameters"]["vmx"]["dc"]))
                self.TabSimuVdtLineEd.setText(str(self.tempdata["general"]["radiance_parameters"]["vmx"]["dt"]))
                self.TabSimuDabLineEd.setText(str(self.tempdata["general"]["radiance_parameters"]["dmx"]["ab"]))
                self.TabSimuDadLineEd.setText(str(self.tempdata["general"]["radiance_parameters"]["dmx"]["ad"]))
                self.TabSimuDasLineEd.setText(str(self.tempdata["general"]["radiance_parameters"]["dmx"]["as"]))
                self.TabSimuDarLineEd.setText(str(self.tempdata["general"]["radiance_parameters"]["dmx"]["ar"]))
                self.TabSimuDaaLineEd.setText(str(self.tempdata["general"]["radiance_parameters"]["dmx"]["aa"]))
                self.TabSimuDlrLineEd.setText(str(self.tempdata["general"]["radiance_parameters"]["dmx"]["lr"]))
                self.TabSimuDstLineEd.setText(str(self.tempdata["general"]["radiance_parameters"]["dmx"]["st"]))
                self.TabSimuDsjLineEd.setText(str(self.tempdata["general"]["radiance_parameters"]["dmx"]["sj"]))
                self.TabSimuDlwLineEd.setText(str(self.tempdata["general"]["radiance_parameters"]["dmx"]["lw"]))
                self.TabSimuDdjLineEd.setText(str(self.tempdata["general"]["radiance_parameters"]["dmx"]["dj"]))
                self.TabSimuDdsLineEd.setText(str(self.tempdata["general"]["radiance_parameters"]["dmx"]["ds"]))
                self.TabSimuDdrLineEd.setText(str(self.tempdata["general"]["radiance_parameters"]["dmx"]["dr"]))
                self.TabSimuDdpLineEd.setText(str(self.tempdata["general"]["radiance_parameters"]["dmx"]["dp"]))
                self.TabSimuDdcLineEd.setText(str(self.tempdata["general"]["radiance_parameters"]["dmx"]["dc"]))
                self.TabSimuDdtLineEd.setText(str(self.tempdata["general"]["radiance_parameters"]["dmx"]["dt"]))
            except:
                pass
            self.TabSimuDefabLineEd.setText(str(self.tempdata["general"]["radiance_parameters"]["default"]["ab"]))
            self.TabSimuDefadLineEd.setText(str(self.tempdata["general"]["radiance_parameters"]["default"]["ad"]))
            self.TabSimuDefasLineEd.setText(str(self.tempdata["general"]["radiance_parameters"]["default"]["as"]))
            self.TabSimuDefarLineEd.setText(str(self.tempdata["general"]["radiance_parameters"]["default"]["ar"]))
            self.TabSimuDefaaLineEd.setText(str(self.tempdata["general"]["radiance_parameters"]["default"]["aa"]))
            self.TabSimuDeflrLineEd.setText(str(self.tempdata["general"]["radiance_parameters"]["default"]["lr"]))
            self.TabSimuDefstLineEd.setText(str(self.tempdata["general"]["radiance_parameters"]["default"]["st"]))
            self.TabSimuDefsjLineEd.setText(str(self.tempdata["general"]["radiance_parameters"]["default"]["sj"]))
            self.TabSimuDeflwLineEd.setText(str(self.tempdata["general"]["radiance_parameters"]["default"]["lw"]))
            self.TabSimuDefdjLineEd.setText(str(self.tempdata["general"]["radiance_parameters"]["default"]["dj"]))
            self.TabSimuDefdsLineEd.setText(str(self.tempdata["general"]["radiance_parameters"]["default"]["ds"]))
            self.TabSimuDefdrLineEd.setText(str(self.tempdata["general"]["radiance_parameters"]["default"]["dr"]))
            self.TabSimuDefdpLineEd.setText(str(self.tempdata["general"]["radiance_parameters"]["default"]["dp"]))
            self.TabSimuDefdcLineEd.setText(str(self.tempdata["general"]["radiance_parameters"]["default"]["dc"]))
            self.TabSimuDefdtLineEd.setText(str(self.tempdata["general"]["radiance_parameters"]["default"]["dt"]))


    def simuWrite(self, object, case, mx, para, paratp):
        if self.imported or self.created:
            if case==0:
                self.tempdata["general"][para]=int(object.text())
            elif case==1:
                if paratp=="int":
                    self.tempdata["general"]["radiance_parameters"][mx][para]=int(object.text())
                if paratp=="float":
                    self.tempdata["general"]["radiance_parameters"][mx][para]=float(object.text())
            self.WriteToFile()

    def floatChk(self, object, *args):
        if self.imported or self.created:
            try:
                if len(args)==2:
                    if float(object.text())<=float(args[1]) and float(object.text())>=float(args[0]):

                        return 0
                    else:
                        QtGui.QMessageBox.warning(self, "Error","Error! Wrong Entry! Range Error!")
                        return 1
                elif len(args)==0:
                    float(object.text())
                    return 0
            except:
                QtGui.QMessageBox.warning(self, "Error", "Error! Wrong Entry!")
                return 1

    def intChk(self, object, *args):
        if self.imported or self.created:
            try:
                if len(args)==2:
                    if int(object.text())<=args[1] and int(object.text())>=args[0]:
                        return 0
                    else:
                        QtGui.QMessageBox.warning(self, "Error!", "Wrong Entry! Range Error!")
                        return 1
                elif len(args)==0:
                    test=int(object.text())
                    return 0
            except:

                QtGui.QMessageBox.warning(self, "Error", "Error! Wrong Entry!")
                return 1


    ##Checking Missing Info
    def finalCheck(self):
        if self.imported or self.created:
            self.missing="Missing:"
            self.missing1=""
            try:
                junk=self.tempdata["general"]["illum_units"]
            except:
                self.missing= self.missing +" Lighting Units; "
            try:
                junk=self.tempdata["general"]["import_units"]
            except:
                self.missing= self.missing + "Import Units; "
            try:
                junk=self.tempdata["general"]["display_units"]
            except:
                self.missing=self.missing+"Display Units; "
            try:
                junk=self.tempdata["general"]["epw_file"]
            except:
                self.missing=self.missing+"Weather File; "



            for i in range(len(self.tempdata["spaces"])):
                try:
                    mname=self.tempdata["spaces"][i]["space_name"]
                except:
                    self.missing=self.missing+"Space: "+self.tempdata["spaces"][i]["space_name"]+" Space Name; "
                try:
                    junk=self.tempdata["spaces"][i]["lighting_schedule"]
                except:
                    self.missing=self.missing+"Space: "+self.tempdata["spaces"][i]["space_name"]+" Lighting Schedule; "
                try:
                    junk=self.tempdata["spaces"][i]["geometry_file"]
                except:
                    self.missing=self.missing+"Space: "+self.tempdata["spaces"][i]["space_name"]+" Geometry File; "
                try:
                    fname=os.path.join(self.dir, self.tempdata["spaces"][i]["geometry_directory"], \
                                           self.tempdata["spaces"][i]["material_file"])
                    if not os.path.exists(fname):
                        self.tempdata["spaces"][i]["material_file"]="empty.rad"
                        fname=os.path.join(self.dir, self.tempdata["spaces"][i]["geometry_directory"], \
                                           self.tempdata["spaces"][i]["material_file"])
                        if not os.path.exists(fname):
                            radf=open(fname,"w")
                            radf.close()
                        #     QtGui.QMessageBox.warning(self,"warning", "No existed material rad file found in space: %s directory, empty.rad is created!" %mname)
                        # else:
                        #     QtGui.QMessageBox.warning(self,"warning", "No existed material rad file found in space: %s directory, empty.rad is used!" %mname)
                except:
                    self.tempdata["spaces"][i]["material_file"]="empty.rad"
                    fname=self.dir+"rad/"+"/empty.rad"
                    fp=self.dir+"rad/"
                    if not os.stat(str(fp)):
                        os.mkdir(fp)
                    if not os.path.exists(fname):
                        radf=open(fname,"w")
                        radf.close()
                    #     QtGui.QMessageBox.warning(self,"warning", "No existed material rad file found in space: %s directory, empty.rad is created!" %mname)
                    # else:
                    #     QtGui.QMessageBox.warning(self,"warning", "No existed material rad file found in space: %s directory, empty.rad is used!" %mname)
                try:
                    junk=self.tempdata["spaces"][i]["analysis_points"]
                except:
                    try:
                        self.missing=self.missing+"Space: "+self.tempdata["spaces"][i]["space_name"]+" Analysis Grid Points; "
                    except:
                        self.missing=self.missing+" Analysis Grid Points; "


                try:
                    if not os.path.exists(str(self.tempdata["general"]["project_directory"]+self.tempdata["spaces"][i]["input_directory"]+ \
                                                  self.tempdata["spaces"][i]["analysis_points"]["files"][0])):
                        listp=["x_spacing", "y_spacing", "offset", "z_offset", "modifier"]
                        for item in listp:
                            try:
                                junk=self.tempdata["spaces"][i]["analysis_points"][item]
                            except:
                                self.missing=self.missing+"Space: "+self.tempdata["spaces"][i]["space_name"]+" Analysis Grid Points "+item+"; "
                except:
                    pass
                try:
                    junk=self.tempdata["spaces"][i]["window_groups"]
                except:
                    self.missing=self.missing+"Space: "+self.tempdata["spaces"][i]["space_name"]+" Window Groups; "
                try:
                    for j in range(len(self.tempdata["spaces"][i]["window_groups"])):
                        try:
                            junk=self.tempdata["spaces"][i]["window_groups"][j]["name"]
                        except:
                            self.missing=self.missing+"Space: "+self.tempdata["spaces"][i]["space_name"]+" Window Group Name; "
                        try:
                            junk=self.tempdata["spaces"][i]["window_groups"][j]["glazing_materials"]
                        except:
                            self.missing=self.missing+"Space: "+self.tempdata["spaces"][i]["space_name"]+ " Window Group: "+ \
                                         self.tempdata["spaces"][i]["window_groups"][j]["name"]+" Glazing Materials; "

                        try:
                            nshade=len(self.tempdata["spaces"][i]["window_groups"][j]["shade_settings"])
                        except:
                            self.missing1=self.missing1+"Space: "+self.tempdata["spaces"][i]["space_name"]+ " Window Group: "+ \
                                         self.tempdata["spaces"][i]["window_groups"][j]["name"]+" Shade; "
                        try:
                           junk=self.tempdata["spaces"][i]["window_groups"][j]["shade_control"]
                        except:
                           self.missing1=self.missing1+"Space: "+self.tempdata["spaces"][i]["space_name"]+ " Window Group: "+ \
                                         self.tempdata["spaces"][i]["window_groups"][j]["name"]+" Shade Control Info; "
                        try:
                            if self.tempdata["spaces"][i]["window_groups"][j]["shade_control"]["method"]=="automated_profile_angle":
                                try:
                                    junk=self.tempdata["spaces"][i]["window_groups"][j]["shade_control"]["elevation_azimuth"]
                                except:
                                    self.missing=self.missing+"Space: "+self.tempdata["spaces"][i]["space_name"]+ " Window Group: "+ \
                                         self.tempdata["spaces"][i]["window_groups"][j]["name"]+" Elevation Azimuth; "
                                try:
                                    for k in range(nshade):
                                        junk=self.tempdata["spaces"][i]["window_groups"][j]["shade_control"]["angle_settings"][k]
                                except:
                                    self.missing=self.missing+"Space: "+self.tempdata["spaces"][i]["space_name"]+ " Window Group: "+ \
                                         self.tempdata["spaces"][i]["window_groups"][j]["name"]+" Angle Settings; "
                            elif self.tempdata["spaces"][i]["window_groups"][j]["shade_control"]["method"]=="automated_signal":
                                try:
                                    junk=self.tempdata["spaces"][i]["window_groups"][j]["shade_control"]["sensor"]
                                except:
                                    self.missing=self.missing+"Space: "+self.tempdata["spaces"][i]["space_name"]+ " Window Group: "+ \
                                         self.tempdata["spaces"][i]["window_groups"][j]["name"]+" Sensor Settings; "
                                try:
                                    self.tempdata["spaces"][i]["window_groups"][j]["shade_control"]["sensor"]["sensor_type"]
                                except:
                                    self.missing=self.missing+"Space: "+self.tempdata["spaces"][i]["space_name"]+ " Window Group: "+ \
                                         self.tempdata["spaces"][i]["window_groups"][j]["name"]+" Sensor Type; "
                                try:
                                    self.tempdata["spaces"][i]["window_groups"][j]["shade_control"]["sensor"]["sensor_file"]
                                except:
                                    self.missing=self.missing+"Space: "+self.tempdata["spaces"][i]["space_name"]+ " Window Group: "+ \
                                         self.tempdata["spaces"][i]["window_groups"][j]["name"]+" Sensor File; "
                                try:
                                    self.tempdata["spaces"][i]["window_groups"][j]["shade_control"]["sensor"]["location"]
                                except:
                                    self.missing=self.missing+"Space: "+self.tempdata["spaces"][i]["space_name"]+ " Window Group: "+ \
                                         self.tempdata["spaces"][i]["window_groups"][j]["name"]+" Sensor Location; "
                                listp=["x", "y", "z", "xd", "yd", "zd", "spin_ccw"]
                                for item in listp:
                                    try:
                                        self.tempdata["spaces"][i]["window_groups"][j]["shade_control"]["sensor"]["location"][item]
                                    except:
                                        self.missing=self.missing+"Space: "+self.tempdata["spaces"][i]["space_name"]+ " Window Group: "+ \
                                         self.tempdata["spaces"][i]["window_groups"][j]["name"]+" Sensor Location "+item+"; "
                                try:
                                    for k in range(nshade):
                                        junk=self.tempdata["spaces"][i]["window_groups"][j]["shade_control"]["signal_settings"][k]
                                except:
                                    self.missing=self.missing+"Space: "+self.tempdata["spaces"][i]["space_name"]+ " Window Group: "+ \
                                         self.tempdata["spaces"][i]["window_groups"][j]["name"]+" Signal Settings; "
                            elif self.tempdata["spaces"][i]["window_groups"][j]["shade_control"]["method"]=="automated_profile_angle_signal":
                                try:
                                    junk=self.tempdata["spaces"][i]["window_groups"][j]["shade_control"]["elevation_azimuth"]
                                except:
                                    self.missing=self.missing+"Space: "+self.tempdata["spaces"][i]["space_name"]+ " Window Group: "+ \
                                         self.tempdata["spaces"][i]["window_groups"][j]["name"]+" Elevation Azimuth; "
                                try:
                                    for k in range(nshade):
                                        junk=self.tempdata["spaces"][i]["window_groups"][j]["shade_control"]["angle_settings"][k]
                                except:
                                    self.missing=self.missing+"Space: "+self.tempdata["spaces"][i]["space_name"]+ " Window Group: "+ \
                                         self.tempdata["spaces"][i]["window_groups"][j]["name"]+" Angle Settings; "
                                try:
                                    junk=self.tempdata["spaces"][i]["window_groups"][j]["shade_control"]["sensor"]
                                except:
                                    self.missing=self.missing+"Space: "+self.tempdata["spaces"][i]["space_name"]+ " Window Group: "+ \
                                         self.tempdata["spaces"][i]["window_groups"][j]["name"]+" Sensor Settings; "
                                try:
                                    self.tempdata["spaces"][i]["window_groups"][j]["shade_control"]["sensor"]["sensor_type"]
                                except:
                                    self.missing=self.missing+"Space: "+self.tempdata["spaces"][i]["space_name"]+ " Window Group: "+ \
                                         self.tempdata["spaces"][i]["window_groups"][j]["name"]+" Sensor Type; "
                                try:
                                    self.tempdata["spaces"][i]["window_groups"][j]["shade_control"]["sensor"]["sensor_file"]
                                except:
                                    self.missing=self.missing+"Space: "+self.tempdata["spaces"][i]["space_name"]+ " Window Group: "+ \
                                         self.tempdata["spaces"][i]["window_groups"][j]["name"]+" Sensor File; "
                                try:
                                    self.tempdata["spaces"][i]["window_groups"][j]["shade_control"]["sensor"]["location"]
                                except:
                                    self.missing=self.missing+"Space: "+self.tempdata["spaces"][i]["space_name"]+ " Window Group: "+ \
                                         self.tempdata["spaces"][i]["window_groups"][j]["name"]+" Sensor Location; "
                                listp=["x", "y", "z", "xd", "yd", "zd", "spin_ccw"]
                                for item in listp:
                                    try:
                                        self.tempdata["spaces"][i]["window_groups"][j]["shade_control"]["sensor"]["location"][item]
                                    except:
                                        self.missing=self.missing+"Space: "+self.tempdata["spaces"][i]["space_name"]+ " Window Group: "+ \
                                         self.tempdata["spaces"][i]["window_groups"][j]["name"]+" Sensor Location "+item+"; "
                                try:
                                    for k in range(nshade):
                                        junk=self.tempdata["spaces"][i]["window_groups"][j]["shade_control"]["signal_settings"][k]
                                except:
                                    self.missing=self.missing+"Space: "+self.tempdata["spaces"][i]["space_name"]+ " Window Group: "+ \
                                         self.tempdata["spaces"][i]["window_groups"][j]["name"]+" Signal Settings; "
                        except:
                            pass
                except:
                    self.missing=self.missing+"Space: "+self.tempdata["spaces"][i]["space_name"]+ " Window Group Info; "

            if self.missing!="Missing:":
                QtGui.QMessageBox.warning(self,"Missing Information", self.missing+self.missing1)

            for i in range(len(self.tempdata["spaces"])):
                mname=self.tempdata["spaces"][i]["space_name"]
                try:
                    for j in range(len(self.tempdata["spaces"][i]["window_groups"])):
                        if self.tempdata["spaces"][i]["window_groups"][j]["base_geometry"]=="empty.rad":
                            wgn=self.tempdata["spaces"][i]["window_groups"][j]["name"]
                            fname=self.dir+"rad/"+"/empty.rad"
                            fp=self.dir+"rad/"
                            if not os.stat(str(fp)):
                                os.mkdir(fp)
                            if not os.path.exists(fname):
                                radf=open(fname,"w")
                                radf.close()
                except:
                    try:
                        del self.tempdata["sDA"]
                        self.WriteToFile()
                    except:
                        pass
                        #     QtGui.QMessageBox.warning(self,"warning", "No existed window geometry rad file found in space: %s window group: %s, empty.rad is created!" %(mname,wgn) )
                        # else:
                        #     QtGui.QMessageBox.warning(self,"warning", "No existed window geometry rad file found in space: %s window group: %s, empty.rad is used!" %(mname, wgn))
            self.WriteToFile()

    def LumLayoutDisplay(self):
        if self.imported or self.created:
            self.WriteToFile()
            self.SaveAll()
            self.scene.clear()
            i=0
            try:
                index=self.TabElecSPComBox.currentIndex()
                createlumlayout(self.tpfname,index,self.dplayer, 2000)
                test=True
                while (test==True):
                    time.sleep(0.1)
                    try:
                        pth=self.tempdata["general"]["project_directory"]+"temp/room.bmp"
                        img=QtGui.QPixmap(pth)
                        w = img.width()
                        h=img.height()
                        # self.imgQ = img  # we need to hold reference to imgQ, or it will crash
                        # pixMap = QPixmap.fromImage(self.imgQ)
                        self.scene.addPixmap(img)
                        self.view.fitInView(QtCore.QRectF(0, 0, w, h), QtCore.Qt.KeepAspectRatio)
                        self.scene.update()
                        test=False
                    except:
                        test=True
                        # i=i+1
                        # if i>=100:
                        #     QtGui.QMessageBox.warning(self, "Error", "Error!")
                        #     test=False
            except:
                QtGui.QMessageBox.warning(self, "Error", "Error!")


    def simurun(self):
        if self.imported or self.created:
            self.finalCheck()
            if self.missing=="Missing:":
                try:
                    junk=self.tempdata["general"]["target_illuminance"]
                except:
                    self.tempdata["general"]["target_illuminance"]=300
                p1=self.dir+"data/"+self.tempdata["general"]["epw_file"]
                p2=os.path.dirname(str(self.JFileName))
                try:
                    base=os.path.basename(str(p1))
                    fopath=os.path.dirname(str(p1))
                    fnew=os.path.normpath(os.path.join(p2,base))
                    shutil.copy2(p1, fnew)
                except:
                    pass

                for i in range(len (self.tempdata["spaces"])):
                    self.tempdata["spaces"][i]["space_directory"]=self.tempdata["general"]["project_directory"]
                    try:
                        junk=self.tempdata["spaces"][i]["occupancy_schedule"]
                    except:
                        self.tempdata["spaces"][i]["occupancy_schedule"]=self.tempdata["spaces"][i]["lighting_schedule"]
                    try:
                        junk=self.tempdata["spaces"][i]["target_illuminance"]
                    except:
                        self.tempdata["spaces"][i]["target_illuminance"]=300
                    try:
                        for j in range(len(self.tempdata["spaces"][i]["control_zones"])):
                            try:
                                junk=self.tempdata["spaces"][i]["control_zones"][j]["cp_method"]
                                junk=self.tempdata["spaces"][i]["control_zones"][j]["quantity"]
                                junk=self.tempdata["spaces"][i]["control_zones"][j]["excluded_points"]
                                junk=self.tempdata["spaces"][i]["control_zones"][j]["target_percentage"]

                            except:
                                self.tempdata["spaces"][i]["control_zones"][j]["cp_method"]="auto"
                                self.tempdata["spaces"][i]["control_zones"][j]["quantity"]=2
                                self.tempdata["spaces"][i]["control_zones"][j]["excluded_points"]="null"
                                self.tempdata["spaces"][i]["control_zones"][j]["target_percentage"]=0

                            try:
                                junk=self.tempdata["spaces"][i]["control_zones"][j]["sensor"]["sensor_type"]
                            except:
                                try:
                                    del self.tempdata["spaces"][i]["control_zones"][j]["sensor"]
                                except:
                                    pass
                    except:
                        pass
                    try:
                        p1=self.dir+self.tempdata["spaces"][i]["input_directory"]+self.tempdata["spaces"][i]["lighting_schedule"]
                        base=os.path.basename(str(p1))
                        fopath=os.path.dirname(str(p1))
                        fnew=os.path.normpath(os.path.join(p2,base))
                        shutil.copy2(p1, fnew)
                    except:
                        pass


                self.WriteToFile()
                self.SaveAll()


                os.chdir("%s" %self.tempdata["general"]["project_directory"])
                parbat=open("var.bat", "w")
                parbat.write("set PATH=./;c:/radiance/bin.\nset RAYPATH=./;c:/radiance/lib.\n")
                parbat.write('dxdaylight %s\n' %self.JFileName)
                path=os.path.normpath(self.tempdata["general"]["project_directory"])
                parbat.write("copy %s\res\*.sig %s\*.sig\n" %(path, path))



                try:
                    for j in range(len(self.tempdata["spaces"][0]["window_groups"])):
                        try:
                            for k in range(len(self.tempdata["spaces"][0]["window_groups"][j]["shade_settings"])):
                                n1=os.path.normpath(os.path.join(self.tempdata["general"]["project_directory"],self.tempdata["spaces"][0]["results_directory"]))+"\\"+ \
                                   self.tempdata["spaces"][0]["space_name"]+"_"+self.tempdata["spaces"][0]["window_groups"][j]["name"]+ \
                                    "_set"+str(k+1)+".ill"

                                n2=os.path.normpath(os.path.join(self.tempdata["general"]["project_directory"],self.tempdata["spaces"][0]["results_directory"]))+"\\"+ \
                                   self.tempdata["spaces"][0]["space_name"]+"_"+self.tempdata["spaces"][0]["window_groups"][j]["name"]+ \
                                    "_set"+str(k)+".ill"
                                n3=os.path.normpath(os.path.join(self.tempdata["general"]["project_directory"],self.tempdata["spaces"][0]["results_directory"]))+"\\"+ \
                                   self.tempdata["spaces"][0]["space_name"]+"_"+self.tempdata["spaces"][0]["window_groups"][j]["name"]+ \
                                    "_set"+str(k+1)+"_direct.ill"
                                n4=os.path.normpath(os.path.join(self.tempdata["general"]["project_directory"],self.tempdata["spaces"][0]["results_directory"]))+"\\"+ \
                                   self.tempdata["spaces"][0]["space_name"]+"_"+self.tempdata["spaces"][0]["window_groups"][j]["name"]+ \
                                    "_set"+str(k)+"_direct.ill"
                                #parbat.write("##copy %s %s\n" %(n1,n2))
                                #parbat.write("##copy %s %s\n" %(n3,n4))
                                #parbat.write("##del %s\n" %(n1))
                                #parbat.write("##del %s \n" %(n3))
                        except:
                            pass
                except:
                    pass
                try:
                    for i in range(len (self.tempdata["spaces"])):
                        for j in range(len(self.tempdata["spaces"][i]["window_groups"])):
                            pass
                    parbat.write('dxprocessshade %s\n' %self.JFileName)
                    n1=os.path.normpath(os.path.join(self.tempdata["general"]["project_directory"],self.tempdata["spaces"][0]["results_directory"]))+"\\"+ \
                       self.tempdata["spaces"][0]["space_name"]+"_final.ill"
                    n2=os.path.normpath(os.path.join(self.tempdata["general"]["project_directory"],self.tempdata["spaces"][0]["results_directory"]))+"\\"+ \
                        self.tempdata["spaces"][0]["space_name"]+".ill"
                    parbat.write("copy %s %s\n" %(n1,n2))
                    parbat.write('dxmetrics %s\n' %self.JFileName)
                except:
                    pass
                parbat.close()
                parbat.close()
                prg=Status()
                prg.show()

               # os.system("var.bat")
                prg.exec_()


    def closeEvent(self, event):
        if self.imported or self.created:
            reply = QtGui.QMessageBox.question(self, "Save Changes?" ,
                         'Save?', QtGui.QMessageBox.Yes, QtGui.QMessageBox.No, QtGui.QMessageBox.Cancel)
            if reply == QtGui.QMessageBox.Yes:
                self.finalCheck()
                self.SaveAll()
                self.tpfile.close()
                os.remove(str(self.tpfname))
                event.accept()
            elif reply == QtGui.QMessageBox.No:
                self.tpfile.close()
                os.remove(str(self.tpfname))
                event.accept()
            else:
                event.ignore()
        else:
            event.accept()


##Start Simulation Dialog
class Status(QtGui.QDialog):
    def __init__(self):
        QtGui.QDialog.__init__(self)
        self.setupUi(self)
        self.myLongTask = TaskThread()
        self.myLongTask.taskFinished.connect(self.onF)

    def setupUi(self, Status):
        self.resize(300, 50)
        self.setWindowTitle(_translate("Status", "Please Wait...", None))
        self.Combo = QtGui.QVBoxLayout()
        self.setLayout(self.Combo)
        self.lbl=QtGui.QLabel()
        self.lbl.setText("Wait")
        self.Combo.addWidget(self.lbl)
        self.status=QtGui.QProgressBar()
        self.Combo.addWidget(self.status)
        self.status.setValue(0)
        self.sbtn=QtGui.QPushButton()
        self.sbtn.setText("Start")
        self.Combo.addWidget(self.sbtn)
        self.sbtn.clicked.connect(self.start)

        self.cbtn=QtGui.QPushButton()
        self.cbtn.setText("Cancel")
        self.Combo.addWidget(self.cbtn)
        self.cbtn.clicked.connect(self.cancel)


    def cancel(self):
        self.myLongTask.terminate()
        self.accept()

    def start(self):
        self.status.setRange(0,0)
        self.myLongTask.start()



    def onF(self):
        self.status.setRange(0,100)
        self.status.setValue(100)
        self.setWindowTitle("Finished")
        self.sbtn.setText("Finished")
        self.sbtn.setDisabled(1)
        self.cbtn.setText("ok")


class TaskThread(QtCore.QThread):
    taskFinished = QtCore.pyqtSignal()
    def run(self):
        os.system("var.bat")
        self.taskFinished.emit()


##Material Layer Selection
class Ui_Combo(QtGui.QDialog):
    def __init__(self):
        QtGui.QDialog.__init__(self)
        self.setupUi(self)

    def setupUi(self, Ui_Combo):
        self.resize(300, 100)
        self.setWindowTitle(_translate("Ui_Combo", "Material", None))
        self.Combo = QtGui.QVBoxLayout()
        self.setLayout(self.Combo)
        self.cbox = QtGui.QComboBox()
        self.Combo.addWidget(self.cbox)
        self.cbtn=QtGui.QPushButton()
        self.cbtn.setText("Add")
        self.Combo.addWidget(self.cbtn)
        self.cbtn.clicked.connect(self.PtsMatAddBtn)
        self.cancelbtn=QtGui.QPushButton()
        self.cancelbtn.setText("Cancel")
        self.Combo.addWidget(self.cancelbtn)
        self.cancelbtn.clicked.connect(self.cancel)

    def PtsMatAddBtn(self):
        index=self.cbox.currentIndex()
        self.mat=self.cbox.itemText(index)
        self.accept()

    def cancel(self):
        self.accept()



#Luminaire Duplication
class DupUi_Combo(QtGui.QDialog):
    def __init__(self):
        QtGui.QDialog.__init__(self)
        self.setupUi(self)

    def setupUi(self, DupUi_Combo):
        self.resize(400, 200)
        self.setWindowTitle(_translate("Ui_Combo", "Zone Duplication From:", None))
        self.Combo = QtGui.QVBoxLayout()
        self.setLayout(self.Combo)
        self.splbl=QtGui.QLabel()
        self.splbl.setText("Space Name:")
        self.Combo.addWidget(self.splbl)
        self.cboxsp = QtGui.QComboBox()
        self.cboxsp.currentIndexChanged.connect(self.sptoz)
        self.Combo.addWidget(self.cboxsp)
        self.zlbl=QtGui.QLabel()
        self.zlbl.setText("Zone Name:")
        self.Combo.addWidget(self.zlbl)
        self.cboxzone = QtGui.QComboBox()
        self.Combo.addWidget(self.cboxzone)
        self.cbtn=QtGui.QPushButton()
        self.cbtn.setText("Duplicate")
        self.Combo.addWidget(self.cbtn)
        self.cbtn.clicked.connect(self.duplicate)
        self.cancelbtn=QtGui.QPushButton()
        self.cancelbtn.setText("Cancel")
        self.Combo.addWidget(self.cancelbtn)
        self.cancelbtn.clicked.connect(self.cancel)
        spacerItem = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Expanding)
        self.Combo.addItem(spacerItem)


    def sptoz(self):
        if ex.imported or ex.created:
            self.spi=self.cboxsp.currentIndex()
            self.cboxzone.clear()
            for zone in ex.tempdata["spaces"][self.spi]["control_zones"]:
                self.cboxzone.addItem(zone["name"])

    def duplicate(self):
        zi=self.cboxzone.currentIndex()
        self.id=[self.spi, zi]
        self.accept()

    def cancel(self):
        self.accept()






from PyQt4 import QtWebKit

if __name__=="__main__":
    app=QtGui.QApplication(sys.argv)
    ex=Ui_FormSTADIC()
    ex.show()

    sys.exit(app.exec_())
    
